// Code generated by sdkgen. DO NOT EDIT.

// nolint
package asymmetricencryption

import (
	"context"

	"google.golang.org/grpc"

	asymmetricencryption "github.com/yandex-cloud/go-genproto/yandex/cloud/kms/v1/asymmetricencryption"
)

//revive:disable

// AsymmetricEncryptionCryptoServiceClient is a asymmetricencryption.AsymmetricEncryptionCryptoServiceClient with
// lazy GRPC connection initialization.
type AsymmetricEncryptionCryptoServiceClient struct {
	getConn func(ctx context.Context) (*grpc.ClientConn, error)
}

// Decrypt implements asymmetricencryption.AsymmetricEncryptionCryptoServiceClient
func (c *AsymmetricEncryptionCryptoServiceClient) Decrypt(ctx context.Context, in *asymmetricencryption.AsymmetricDecryptRequest, opts ...grpc.CallOption) (*asymmetricencryption.AsymmetricDecryptResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return asymmetricencryption.NewAsymmetricEncryptionCryptoServiceClient(conn).Decrypt(ctx, in, opts...)
}

// GetPublicKey implements asymmetricencryption.AsymmetricEncryptionCryptoServiceClient
func (c *AsymmetricEncryptionCryptoServiceClient) GetPublicKey(ctx context.Context, in *asymmetricencryption.AsymmetricGetPublicKeyRequest, opts ...grpc.CallOption) (*asymmetricencryption.AsymmetricGetPublicKeyResponse, error) {
	conn, err := c.getConn(ctx)
	if err != nil {
		return nil, err
	}
	return asymmetricencryption.NewAsymmetricEncryptionCryptoServiceClient(conn).GetPublicKey(ctx, in, opts...)
}
