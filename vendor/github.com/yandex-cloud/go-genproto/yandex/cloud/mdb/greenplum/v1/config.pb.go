// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/mdb/greenplum/v1/config.proto

package greenplum

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogStatement int32

const (
	LogStatement_LOG_STATEMENT_UNSPECIFIED LogStatement = 0
	// None statements are logged.
	LogStatement_NONE LogStatement = 1
	// Logs all data definition commands like `CREATE`, `ALTER`, and `DROP`. Default value.
	LogStatement_DDL LogStatement = 2
	// Logs all `DDL` statements, plus `INSERT`, `UPDATE`, `DELETE`, `TRUNCATE`, and `COPY FROM`.
	LogStatement_MOD LogStatement = 3
	// Logs all statements.
	LogStatement_ALL LogStatement = 4
)

// Enum value maps for LogStatement.
var (
	LogStatement_name = map[int32]string{
		0: "LOG_STATEMENT_UNSPECIFIED",
		1: "NONE",
		2: "DDL",
		3: "MOD",
		4: "ALL",
	}
	LogStatement_value = map[string]int32{
		"LOG_STATEMENT_UNSPECIFIED": 0,
		"NONE":                      1,
		"DDL":                       2,
		"MOD":                       3,
		"ALL":                       4,
	}
)

func (x LogStatement) Enum() *LogStatement {
	p := new(LogStatement)
	*p = x
	return p
}

func (x LogStatement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogStatement) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[0].Descriptor()
}

func (LogStatement) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[0]
}

func (x LogStatement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogStatement.Descriptor instead.
func (LogStatement) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{0}
}

type ConnectionPoolerConfig_PoolMode int32

const (
	ConnectionPoolerConfig_POOL_MODE_UNSPECIFIED ConnectionPoolerConfig_PoolMode = 0
	// Assign server connection to a client until it disconnects. Default value.
	ConnectionPoolerConfig_SESSION ConnectionPoolerConfig_PoolMode = 1
	// Assign server connection to a client for a transaction processing.
	ConnectionPoolerConfig_TRANSACTION ConnectionPoolerConfig_PoolMode = 2
)

// Enum value maps for ConnectionPoolerConfig_PoolMode.
var (
	ConnectionPoolerConfig_PoolMode_name = map[int32]string{
		0: "POOL_MODE_UNSPECIFIED",
		1: "SESSION",
		2: "TRANSACTION",
	}
	ConnectionPoolerConfig_PoolMode_value = map[string]int32{
		"POOL_MODE_UNSPECIFIED": 0,
		"SESSION":               1,
		"TRANSACTION":           2,
	}
)

func (x ConnectionPoolerConfig_PoolMode) Enum() *ConnectionPoolerConfig_PoolMode {
	p := new(ConnectionPoolerConfig_PoolMode)
	*p = x
	return p
}

func (x ConnectionPoolerConfig_PoolMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionPoolerConfig_PoolMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[1].Descriptor()
}

func (ConnectionPoolerConfig_PoolMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[1]
}

func (x ConnectionPoolerConfig_PoolMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionPoolerConfig_PoolMode.Descriptor instead.
func (ConnectionPoolerConfig_PoolMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{1, 0}
}

type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the preset for computational resources allocated to a host.
	//
	// Available presets are listed in the [documentation](/docs/managed-greenplum/concepts/instance-types).
	ResourcePresetId string `protobuf:"bytes,1,opt,name=resource_preset_id,json=resourcePresetId,proto3" json:"resource_preset_id,omitempty"`
	// Volume of the storage used by the host, in bytes.
	DiskSize int64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Type of the storage used by the host: `network-hdd`, `network-ssd` or `local-ssd`.
	DiskTypeId string `protobuf:"bytes,3,opt,name=disk_type_id,json=diskTypeId,proto3" json:"disk_type_id,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *Resources) GetResourcePresetId() string {
	if x != nil {
		return x.ResourcePresetId
	}
	return ""
}

func (x *Resources) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *Resources) GetDiskTypeId() string {
	if x != nil {
		return x.DiskTypeId
	}
	return ""
}

type ConnectionPoolerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Route server pool mode.
	Mode ConnectionPoolerConfig_PoolMode `protobuf:"varint,1,opt,name=mode,proto3,enum=yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig_PoolMode" json:"mode,omitempty"`
	// The number of servers in the server pool. Clients are placed in a wait queue when all servers are busy.
	//
	// Set to zero to disable the limit.
	Size *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	// Server pool idle timeout, in seconds.
	//
	// A server connection closes after being idle for the specified time.
	//
	// Set to zero to disable the limit.
	ClientIdleTimeout *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=client_idle_timeout,json=clientIdleTimeout,proto3" json:"client_idle_timeout,omitempty"`
}

func (x *ConnectionPoolerConfig) Reset() {
	*x = ConnectionPoolerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionPoolerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionPoolerConfig) ProtoMessage() {}

func (x *ConnectionPoolerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionPoolerConfig.ProtoReflect.Descriptor instead.
func (*ConnectionPoolerConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectionPoolerConfig) GetMode() ConnectionPoolerConfig_PoolMode {
	if x != nil {
		return x.Mode
	}
	return ConnectionPoolerConfig_POOL_MODE_UNSPECIFIED
}

func (x *ConnectionPoolerConfig) GetSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *ConnectionPoolerConfig) GetClientIdleTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.ClientIdleTimeout
	}
	return nil
}

type BackgroundActivityStartAt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hours   int64 `protobuf:"varint,1,opt,name=hours,proto3" json:"hours,omitempty"`
	Minutes int64 `protobuf:"varint,2,opt,name=minutes,proto3" json:"minutes,omitempty"`
}

func (x *BackgroundActivityStartAt) Reset() {
	*x = BackgroundActivityStartAt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundActivityStartAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundActivityStartAt) ProtoMessage() {}

func (x *BackgroundActivityStartAt) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundActivityStartAt.ProtoReflect.Descriptor instead.
func (*BackgroundActivityStartAt) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *BackgroundActivityStartAt) GetHours() int64 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *BackgroundActivityStartAt) GetMinutes() int64 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

type TableSizes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Starts []*BackgroundActivityStartAt `protobuf:"bytes,1,rep,name=starts,proto3" json:"starts,omitempty"`
}

func (x *TableSizes) Reset() {
	*x = TableSizes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSizes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSizes) ProtoMessage() {}

func (x *TableSizes) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSizes.ProtoReflect.Descriptor instead.
func (*TableSizes) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *TableSizes) GetStarts() []*BackgroundActivityStartAt {
	if x != nil {
		return x.Starts
	}
	return nil
}

type AnalyzeAndVacuum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *BackgroundActivityStartAt `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// Maximum duration of the `ANALYZE` operation, in seconds. The default value is `36000`. As soon as this period expires, the `ANALYZE` operation will be forced to terminate.
	AnalyzeTimeout *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=analyze_timeout,json=analyzeTimeout,proto3" json:"analyze_timeout,omitempty"`
	// Maximum duration of the `VACUUM` operation, in seconds. The default value is `36000`. As soon as this period expires, the `VACUUM` operation will be forced to terminate.
	VacuumTimeout *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=vacuum_timeout,json=vacuumTimeout,proto3" json:"vacuum_timeout,omitempty"`
}

func (x *AnalyzeAndVacuum) Reset() {
	*x = AnalyzeAndVacuum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeAndVacuum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeAndVacuum) ProtoMessage() {}

func (x *AnalyzeAndVacuum) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeAndVacuum.ProtoReflect.Descriptor instead.
func (*AnalyzeAndVacuum) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *AnalyzeAndVacuum) GetStart() *BackgroundActivityStartAt {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *AnalyzeAndVacuum) GetAnalyzeTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.AnalyzeTimeout
	}
	return nil
}

func (x *AnalyzeAndVacuum) GetVacuumTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.VacuumTimeout
	}
	return nil
}

type BackgroundActivitiesConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enables scripts that collects tables sizes to `*_sizes` tables in `mdb_toolkit` schema.
	TableSizes *TableSizes `protobuf:"bytes,1,opt,name=table_sizes,json=tableSizes,proto3" json:"table_sizes,omitempty"`
	// Configuration for `ANALYZE` and `VACUUM` operations.
	AnalyzeAndVacuum *AnalyzeAndVacuum `protobuf:"bytes,2,opt,name=analyze_and_vacuum,json=analyzeAndVacuum,proto3" json:"analyze_and_vacuum,omitempty"`
	// Configuration for long running queries killer.
	QueryKillerScripts *QueryKillerScripts `protobuf:"bytes,3,opt,name=query_killer_scripts,json=queryKillerScripts,proto3" json:"query_killer_scripts,omitempty"`
}

func (x *BackgroundActivitiesConfig) Reset() {
	*x = BackgroundActivitiesConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundActivitiesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundActivitiesConfig) ProtoMessage() {}

func (x *BackgroundActivitiesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundActivitiesConfig.ProtoReflect.Descriptor instead.
func (*BackgroundActivitiesConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *BackgroundActivitiesConfig) GetTableSizes() *TableSizes {
	if x != nil {
		return x.TableSizes
	}
	return nil
}

func (x *BackgroundActivitiesConfig) GetAnalyzeAndVacuum() *AnalyzeAndVacuum {
	if x != nil {
		return x.AnalyzeAndVacuum
	}
	return nil
}

func (x *BackgroundActivitiesConfig) GetQueryKillerScripts() *QueryKillerScripts {
	if x != nil {
		return x.QueryKillerScripts
	}
	return nil
}

type QueryKiller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Maximum duration for this type of queries (in seconds).
	MaxAge *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// Ignore these users when considering queries to terminate
	IgnoreUsers []string `protobuf:"bytes,3,rep,name=ignore_users,json=ignoreUsers,proto3" json:"ignore_users,omitempty"`
}

func (x *QueryKiller) Reset() {
	*x = QueryKiller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKiller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKiller) ProtoMessage() {}

func (x *QueryKiller) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKiller.ProtoReflect.Descriptor instead.
func (*QueryKiller) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{6}
}

func (x *QueryKiller) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *QueryKiller) GetMaxAge() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *QueryKiller) GetIgnoreUsers() []string {
	if x != nil {
		return x.IgnoreUsers
	}
	return nil
}

type QueryKillerScripts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration of script that kills long running queries that are in `idle` state.
	Idle *QueryKiller `protobuf:"bytes,1,opt,name=idle,proto3" json:"idle,omitempty"`
	// Configuration of script that kills long running queries that are in `idle in transaction` state.
	IdleInTransaction *QueryKiller `protobuf:"bytes,2,opt,name=idle_in_transaction,json=idleInTransaction,proto3" json:"idle_in_transaction,omitempty"`
	// Configuration of script that kills long running queries (in any state).
	LongRunning *QueryKiller `protobuf:"bytes,3,opt,name=long_running,json=longRunning,proto3" json:"long_running,omitempty"`
}

func (x *QueryKillerScripts) Reset() {
	*x = QueryKillerScripts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryKillerScripts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKillerScripts) ProtoMessage() {}

func (x *QueryKillerScripts) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKillerScripts.ProtoReflect.Descriptor instead.
func (*QueryKillerScripts) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{7}
}

func (x *QueryKillerScripts) GetIdle() *QueryKiller {
	if x != nil {
		return x.Idle
	}
	return nil
}

func (x *QueryKillerScripts) GetIdleInTransaction() *QueryKiller {
	if x != nil {
		return x.IdleInTransaction
	}
	return nil
}

func (x *QueryKillerScripts) GetLongRunning() *QueryKiller {
	if x != nil {
		return x.LongRunning
	}
	return nil
}

type MasterSubclusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Computational resources allocated to Greenplum® master subcluster hosts.
	Resources *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *MasterSubclusterConfig) Reset() {
	*x = MasterSubclusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterSubclusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterSubclusterConfig) ProtoMessage() {}

func (x *MasterSubclusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterSubclusterConfig.ProtoReflect.Descriptor instead.
func (*MasterSubclusterConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{8}
}

func (x *MasterSubclusterConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type SegmentSubclusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Computational resources allocated to Greenplum® segment subcluster hosts.
	Resources *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *SegmentSubclusterConfig) Reset() {
	*x = SegmentSubclusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentSubclusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentSubclusterConfig) ProtoMessage() {}

func (x *SegmentSubclusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentSubclusterConfig.ProtoReflect.Descriptor instead.
func (*SegmentSubclusterConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{9}
}

func (x *SegmentSubclusterConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type GreenplumConfig6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of inbound connections on master segment
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
	// https://www.postgresql.org/docs/current/runtime-config-replication.html
	MaxSlotWalKeepSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_slot_wal_keep_size,json=maxSlotWalKeepSize,proto3" json:"max_slot_wal_keep_size,omitempty"`
	// Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_segment
	GpWorkfileLimitPerSegment *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=gp_workfile_limit_per_segment,json=gpWorkfileLimitPerSegment,proto3" json:"gp_workfile_limit_per_segment,omitempty"`
	// Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_query
	GpWorkfileLimitPerQuery *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=gp_workfile_limit_per_query,json=gpWorkfileLimitPerQuery,proto3" json:"gp_workfile_limit_per_query,omitempty"`
	// Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
	// Spill files are created when executing a query that requires more memory than it is allocated.
	// The current query is terminated when the limit is exceeded.
	// Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_files_per_query
	// Default value is 10000
	GpWorkfileLimitFilesPerQuery *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=gp_workfile_limit_files_per_query,json=gpWorkfileLimitFilesPerQuery,proto3" json:"gp_workfile_limit_files_per_query,omitempty"`
	// Sets the maximum number of transactions that can be in the "prepared" state simultaneously
	// https://www.postgresql.org/docs/9.6/runtime-config-resource.html
	MaxPreparedTransactions *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	// Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_compression
	GpWorkfileCompression *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=gp_workfile_compression,json=gpWorkfileCompression,proto3" json:"gp_workfile_compression,omitempty"`
	// Sets the maximum memory limit for a query. Helps avoid out-of-memory errors on a segment host during query processing as a result of setting statement_mem too high.
	// Taking into account the configuration of a single segment host, calculate max_statement_mem as follows:
	// (seghost_physical_memory) / (average_number_concurrent_queries)
	// When changing both max_statement_mem and statement_mem, max_statement_mem must be changed first, or listed first in the postgresql.conf file.
	// https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem
	// Default value is 2097152000 (2000MB)
	MaxStatementMem *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=max_statement_mem,json=maxStatementMem,proto3" json:"max_statement_mem,omitempty"` // in bytes
	// Controls which SQL statements are logged. DDL logs all data definition commands like CREATE, ALTER, and DROP commands.
	// MOD logs all DDL statements, plus INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM.
	// PREPARE and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#log_statement
	// Default value is ddl
	LogStatement LogStatement `protobuf:"varint,9,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.greenplum.v1.LogStatement" json:"log_statement,omitempty"`
	// https://docs.vmware.com/en/VMware-Tanzu-Greenplum/6/greenplum-database/GUID-ref_guide-config_params-guc-list.html#gp_add_column_inherits_table_setting
	GpAddColumnInheritsTableSetting *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=gp_add_column_inherits_table_setting,json=gpAddColumnInheritsTableSetting,proto3" json:"gp_add_column_inherits_table_setting,omitempty"`
}

func (x *GreenplumConfig6) Reset() {
	*x = GreenplumConfig6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumConfig6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfig6) ProtoMessage() {}

func (x *GreenplumConfig6) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfig6.ProtoReflect.Descriptor instead.
func (*GreenplumConfig6) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{10}
}

func (x *GreenplumConfig6) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *GreenplumConfig6) GetMaxSlotWalKeepSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSlotWalKeepSize
	}
	return nil
}

func (x *GreenplumConfig6) GetGpWorkfileLimitPerSegment() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerSegment
	}
	return nil
}

func (x *GreenplumConfig6) GetGpWorkfileLimitPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerQuery
	}
	return nil
}

func (x *GreenplumConfig6) GetGpWorkfileLimitFilesPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitFilesPerQuery
	}
	return nil
}

func (x *GreenplumConfig6) GetMaxPreparedTransactions() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedTransactions
	}
	return nil
}

func (x *GreenplumConfig6) GetGpWorkfileCompression() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpWorkfileCompression
	}
	return nil
}

func (x *GreenplumConfig6) GetMaxStatementMem() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxStatementMem
	}
	return nil
}

func (x *GreenplumConfig6) GetLogStatement() LogStatement {
	if x != nil {
		return x.LogStatement
	}
	return LogStatement_LOG_STATEMENT_UNSPECIFIED
}

func (x *GreenplumConfig6) GetGpAddColumnInheritsTableSetting() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpAddColumnInheritsTableSetting
	}
	return nil
}

type GreenplumConfig6_17 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of inbound connections on master segment.
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// The maximum size of WAL files that replication slots are allowed to retain in the `pg_wal` directory at checkpoint time.
	//
	// More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/current/runtime-config-replication.html).
	MaxSlotWalKeepSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_slot_wal_keep_size,json=maxSlotWalKeepSize,proto3" json:"max_slot_wal_keep_size,omitempty"`
	// The maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
	//
	// The default value is 0 (no limit).
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_segment).
	GpWorkfileLimitPerSegment *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=gp_workfile_limit_per_segment,json=gpWorkfileLimitPerSegment,proto3" json:"gp_workfile_limit_per_segment,omitempty"`
	// The maximum disk size that an individual query is allowed to use for creating temporary spill files at each segment.
	//
	// The default value is 0 (no limit).
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_query).
	GpWorkfileLimitPerQuery *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=gp_workfile_limit_per_query,json=gpWorkfileLimitPerQuery,proto3" json:"gp_workfile_limit_per_query,omitempty"`
	// The maximum number of temporary spill files allowed per query at each segment.
	//
	// Spill files, also known as workfiles, are created when a query requires more memory than there is allocated.
	//
	// The current query is terminated if the limit is exceeded.
	//
	// Set to zero to disable the limit.
	//
	// Master session reloads if the parameter changes.
	//
	// Default value is 10000.
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_files_per_query).
	GpWorkfileLimitFilesPerQuery *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=gp_workfile_limit_files_per_query,json=gpWorkfileLimitFilesPerQuery,proto3" json:"gp_workfile_limit_files_per_query,omitempty"`
	// The maximum number of transactions that can be in the `prepared` state simultaneously.
	//
	// More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/9.6/runtime-config-resource.html).
	MaxPreparedTransactions *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	// Whether the spill files are compressed or not.
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_compression).
	GpWorkfileCompression *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=gp_workfile_compression,json=gpWorkfileCompression,proto3" json:"gp_workfile_compression,omitempty"`
}

func (x *GreenplumConfig6_17) Reset() {
	*x = GreenplumConfig6_17{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumConfig6_17) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfig6_17) ProtoMessage() {}

func (x *GreenplumConfig6_17) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfig6_17.ProtoReflect.Descriptor instead.
func (*GreenplumConfig6_17) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{11}
}

func (x *GreenplumConfig6_17) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *GreenplumConfig6_17) GetMaxSlotWalKeepSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSlotWalKeepSize
	}
	return nil
}

func (x *GreenplumConfig6_17) GetGpWorkfileLimitPerSegment() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerSegment
	}
	return nil
}

func (x *GreenplumConfig6_17) GetGpWorkfileLimitPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_17) GetGpWorkfileLimitFilesPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitFilesPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_17) GetMaxPreparedTransactions() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedTransactions
	}
	return nil
}

func (x *GreenplumConfig6_17) GetGpWorkfileCompression() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpWorkfileCompression
	}
	return nil
}

type GreenplumConfig6_19 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of inbound connections on master segment.
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// The maximum size of WAL files that replication slots are allowed to retain in the `pg_wal` directory at checkpoint time.
	//
	// More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/current/runtime-config-replication.html).
	MaxSlotWalKeepSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_slot_wal_keep_size,json=maxSlotWalKeepSize,proto3" json:"max_slot_wal_keep_size,omitempty"`
	// The maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
	//
	// The default value is 0 (no limit).
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_segment).
	GpWorkfileLimitPerSegment *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=gp_workfile_limit_per_segment,json=gpWorkfileLimitPerSegment,proto3" json:"gp_workfile_limit_per_segment,omitempty"`
	// The maximum disk size that an individual query is allowed to use for creating temporary spill files at each segment.
	//
	// The default value is 0 (no limit).
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_query).
	GpWorkfileLimitPerQuery *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=gp_workfile_limit_per_query,json=gpWorkfileLimitPerQuery,proto3" json:"gp_workfile_limit_per_query,omitempty"`
	// The maximum number of temporary spill files allowed per query at each segment.
	//
	// Spill files, also known as workfiles, are created when a query requires more memory than there is allocated.
	//
	// The current query is terminated if the limit is exceeded.
	//
	// Set to zero to disable the limit.
	//
	// Master session reloads if the parameter changes.
	//
	// Default value is 10000.
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_files_per_query).
	GpWorkfileLimitFilesPerQuery *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=gp_workfile_limit_files_per_query,json=gpWorkfileLimitFilesPerQuery,proto3" json:"gp_workfile_limit_files_per_query,omitempty"`
	// The maximum number of transactions that can be in the `prepared` state simultaneously.
	//
	// More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/9.6/runtime-config-resource.html).
	MaxPreparedTransactions *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	// Whether the spill files are compressed or not.
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_compression).
	GpWorkfileCompression *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=gp_workfile_compression,json=gpWorkfileCompression,proto3" json:"gp_workfile_compression,omitempty"`
	// The maximum memory limit for a query, in bytes.
	//
	// Helps to avoid out-of-memory errors on a segment host during query processing as a result of setting `statement_mem` too high.
	//
	// Taking into account the configuration of a single segment host, calculate [max_statement_mem] as follows: `seghost_physical_memory` / `average_number_concurrent_queries`.
	//
	// When changing both [max_statement_mem] and `statement_mem`, [max_statement_mem] must be changed first, or listed first in the `postgresql.conf` file.
	//
	// Default value is 2097152000 (2000 MB).
	//
	// More info in [Greenplum® documentation](https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem).
	MaxStatementMem *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=max_statement_mem,json=maxStatementMem,proto3" json:"max_statement_mem,omitempty"` // in bytes
	// Logged SQL statements.
	//
	// `PREPARE` and `EXPLAIN ANALYZE` statements are also logged if their contained command belongs to an appropriate type.
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#log_statement).
	LogStatement LogStatement `protobuf:"varint,9,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.greenplum.v1.LogStatement" json:"log_statement,omitempty"`
}

func (x *GreenplumConfig6_19) Reset() {
	*x = GreenplumConfig6_19{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumConfig6_19) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfig6_19) ProtoMessage() {}

func (x *GreenplumConfig6_19) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfig6_19.ProtoReflect.Descriptor instead.
func (*GreenplumConfig6_19) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{12}
}

func (x *GreenplumConfig6_19) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *GreenplumConfig6_19) GetMaxSlotWalKeepSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSlotWalKeepSize
	}
	return nil
}

func (x *GreenplumConfig6_19) GetGpWorkfileLimitPerSegment() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerSegment
	}
	return nil
}

func (x *GreenplumConfig6_19) GetGpWorkfileLimitPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_19) GetGpWorkfileLimitFilesPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitFilesPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_19) GetMaxPreparedTransactions() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedTransactions
	}
	return nil
}

func (x *GreenplumConfig6_19) GetGpWorkfileCompression() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpWorkfileCompression
	}
	return nil
}

func (x *GreenplumConfig6_19) GetMaxStatementMem() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxStatementMem
	}
	return nil
}

func (x *GreenplumConfig6_19) GetLogStatement() LogStatement {
	if x != nil {
		return x.LogStatement
	}
	return LogStatement_LOG_STATEMENT_UNSPECIFIED
}

type GreenplumConfig6_21 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of inbound connections on master segment
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
	// https://www.postgresql.org/docs/current/runtime-config-replication.html
	MaxSlotWalKeepSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_slot_wal_keep_size,json=maxSlotWalKeepSize,proto3" json:"max_slot_wal_keep_size,omitempty"`
	// Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_segment
	GpWorkfileLimitPerSegment *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=gp_workfile_limit_per_segment,json=gpWorkfileLimitPerSegment,proto3" json:"gp_workfile_limit_per_segment,omitempty"`
	// Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_query
	GpWorkfileLimitPerQuery *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=gp_workfile_limit_per_query,json=gpWorkfileLimitPerQuery,proto3" json:"gp_workfile_limit_per_query,omitempty"`
	// Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
	// Spill files are created when executing a query that requires more memory than it is allocated.
	// The current query is terminated when the limit is exceeded.
	// Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_files_per_query
	// Default value is 10000
	GpWorkfileLimitFilesPerQuery *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=gp_workfile_limit_files_per_query,json=gpWorkfileLimitFilesPerQuery,proto3" json:"gp_workfile_limit_files_per_query,omitempty"`
	// Sets the maximum number of transactions that can be in the "prepared" state simultaneously
	// https://www.postgresql.org/docs/9.6/runtime-config-resource.html
	MaxPreparedTransactions *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	// Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_compression
	GpWorkfileCompression *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=gp_workfile_compression,json=gpWorkfileCompression,proto3" json:"gp_workfile_compression,omitempty"`
	// Sets the maximum memory limit for a query. Helps avoid out-of-memory errors on a segment host during query processing as a result of setting statement_mem too high.
	// Taking into account the configuration of a single segment host, calculate max_statement_mem as follows:
	// (seghost_physical_memory) / (average_number_concurrent_queries)
	// When changing both max_statement_mem and statement_mem, max_statement_mem must be changed first, or listed first in the postgresql.conf file.
	// https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem
	// Default value is 2097152000 (2000MB)
	MaxStatementMem *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=max_statement_mem,json=maxStatementMem,proto3" json:"max_statement_mem,omitempty"` // in bytes
	// Controls which SQL statements are logged. DDL logs all data definition commands like CREATE, ALTER, and DROP commands.
	// MOD logs all DDL statements, plus INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM.
	// PREPARE and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#log_statement
	// Default value is ddl
	LogStatement LogStatement `protobuf:"varint,9,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.greenplum.v1.LogStatement" json:"log_statement,omitempty"`
	// https://docs.vmware.com/en/VMware-Tanzu-Greenplum/6/greenplum-database/GUID-ref_guide-config_params-guc-list.html#gp_add_column_inherits_table_setting
	GpAddColumnInheritsTableSetting *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=gp_add_column_inherits_table_setting,json=gpAddColumnInheritsTableSetting,proto3" json:"gp_add_column_inherits_table_setting,omitempty"`
}

func (x *GreenplumConfig6_21) Reset() {
	*x = GreenplumConfig6_21{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumConfig6_21) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfig6_21) ProtoMessage() {}

func (x *GreenplumConfig6_21) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfig6_21.ProtoReflect.Descriptor instead.
func (*GreenplumConfig6_21) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{13}
}

func (x *GreenplumConfig6_21) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *GreenplumConfig6_21) GetMaxSlotWalKeepSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSlotWalKeepSize
	}
	return nil
}

func (x *GreenplumConfig6_21) GetGpWorkfileLimitPerSegment() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerSegment
	}
	return nil
}

func (x *GreenplumConfig6_21) GetGpWorkfileLimitPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_21) GetGpWorkfileLimitFilesPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitFilesPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_21) GetMaxPreparedTransactions() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedTransactions
	}
	return nil
}

func (x *GreenplumConfig6_21) GetGpWorkfileCompression() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpWorkfileCompression
	}
	return nil
}

func (x *GreenplumConfig6_21) GetMaxStatementMem() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxStatementMem
	}
	return nil
}

func (x *GreenplumConfig6_21) GetLogStatement() LogStatement {
	if x != nil {
		return x.LogStatement
	}
	return LogStatement_LOG_STATEMENT_UNSPECIFIED
}

func (x *GreenplumConfig6_21) GetGpAddColumnInheritsTableSetting() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpAddColumnInheritsTableSetting
	}
	return nil
}

type GreenplumConfig6_22 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of inbound connections on master segment
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
	// https://www.postgresql.org/docs/current/runtime-config-replication.html
	MaxSlotWalKeepSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_slot_wal_keep_size,json=maxSlotWalKeepSize,proto3" json:"max_slot_wal_keep_size,omitempty"`
	// Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_segment
	GpWorkfileLimitPerSegment *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=gp_workfile_limit_per_segment,json=gpWorkfileLimitPerSegment,proto3" json:"gp_workfile_limit_per_segment,omitempty"`
	// Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_query
	GpWorkfileLimitPerQuery *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=gp_workfile_limit_per_query,json=gpWorkfileLimitPerQuery,proto3" json:"gp_workfile_limit_per_query,omitempty"`
	// Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
	// Spill files are created when executing a query that requires more memory than it is allocated.
	// The current query is terminated when the limit is exceeded.
	// Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_files_per_query
	// Default value is 10000
	GpWorkfileLimitFilesPerQuery *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=gp_workfile_limit_files_per_query,json=gpWorkfileLimitFilesPerQuery,proto3" json:"gp_workfile_limit_files_per_query,omitempty"`
	// Sets the maximum number of transactions that can be in the "prepared" state simultaneously
	// https://www.postgresql.org/docs/9.6/runtime-config-resource.html
	MaxPreparedTransactions *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	// Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_compression
	GpWorkfileCompression *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=gp_workfile_compression,json=gpWorkfileCompression,proto3" json:"gp_workfile_compression,omitempty"`
	// Sets the maximum memory limit for a query. Helps avoid out-of-memory errors on a segment host during query processing as a result of setting statement_mem too high.
	// Taking into account the configuration of a single segment host, calculate max_statement_mem as follows:
	// (seghost_physical_memory) / (average_number_concurrent_queries)
	// When changing both max_statement_mem and statement_mem, max_statement_mem must be changed first, or listed first in the postgresql.conf file.
	// https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem
	// Default value is 2097152000 (2000MB)
	MaxStatementMem *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=max_statement_mem,json=maxStatementMem,proto3" json:"max_statement_mem,omitempty"` // in bytes
	// Controls which SQL statements are logged. DDL logs all data definition commands like CREATE, ALTER, and DROP commands.
	// MOD logs all DDL statements, plus INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM.
	// PREPARE and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#log_statement
	// Default value is ddl
	LogStatement LogStatement `protobuf:"varint,9,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.greenplum.v1.LogStatement" json:"log_statement,omitempty"`
	// https://docs.vmware.com/en/VMware-Tanzu-Greenplum/6/greenplum-database/GUID-ref_guide-config_params-guc-list.html#gp_add_column_inherits_table_setting
	GpAddColumnInheritsTableSetting *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=gp_add_column_inherits_table_setting,json=gpAddColumnInheritsTableSetting,proto3" json:"gp_add_column_inherits_table_setting,omitempty"`
}

func (x *GreenplumConfig6_22) Reset() {
	*x = GreenplumConfig6_22{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumConfig6_22) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfig6_22) ProtoMessage() {}

func (x *GreenplumConfig6_22) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfig6_22.ProtoReflect.Descriptor instead.
func (*GreenplumConfig6_22) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{14}
}

func (x *GreenplumConfig6_22) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *GreenplumConfig6_22) GetMaxSlotWalKeepSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSlotWalKeepSize
	}
	return nil
}

func (x *GreenplumConfig6_22) GetGpWorkfileLimitPerSegment() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerSegment
	}
	return nil
}

func (x *GreenplumConfig6_22) GetGpWorkfileLimitPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_22) GetGpWorkfileLimitFilesPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitFilesPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_22) GetMaxPreparedTransactions() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedTransactions
	}
	return nil
}

func (x *GreenplumConfig6_22) GetGpWorkfileCompression() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpWorkfileCompression
	}
	return nil
}

func (x *GreenplumConfig6_22) GetMaxStatementMem() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxStatementMem
	}
	return nil
}

func (x *GreenplumConfig6_22) GetLogStatement() LogStatement {
	if x != nil {
		return x.LogStatement
	}
	return LogStatement_LOG_STATEMENT_UNSPECIFIED
}

func (x *GreenplumConfig6_22) GetGpAddColumnInheritsTableSetting() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpAddColumnInheritsTableSetting
	}
	return nil
}

// Configuration settings version 6.17
type GreenplumConfigSet6_17 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for a Greenplum® cluster (a combination of settings defined in [user_config] and [default_config]).
	EffectiveConfig *GreenplumConfig6_17 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Greenplum® cluster.
	UserConfig *GreenplumConfig6_17 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Greenplum® cluster.
	DefaultConfig *GreenplumConfig6_17 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *GreenplumConfigSet6_17) Reset() {
	*x = GreenplumConfigSet6_17{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumConfigSet6_17) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfigSet6_17) ProtoMessage() {}

func (x *GreenplumConfigSet6_17) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfigSet6_17.ProtoReflect.Descriptor instead.
func (*GreenplumConfigSet6_17) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{15}
}

func (x *GreenplumConfigSet6_17) GetEffectiveConfig() *GreenplumConfig6_17 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_17) GetUserConfig() *GreenplumConfig6_17 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_17) GetDefaultConfig() *GreenplumConfig6_17 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// Configuration settings version 6.19
type GreenplumConfigSet6_19 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for a Greenplum® cluster (a combination of settings defined in [user_config] and [default_config]).
	EffectiveConfig *GreenplumConfig6_19 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Greenplum® cluster.
	UserConfig *GreenplumConfig6_19 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Greenplum® cluster.
	DefaultConfig *GreenplumConfig6_19 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *GreenplumConfigSet6_19) Reset() {
	*x = GreenplumConfigSet6_19{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumConfigSet6_19) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfigSet6_19) ProtoMessage() {}

func (x *GreenplumConfigSet6_19) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfigSet6_19.ProtoReflect.Descriptor instead.
func (*GreenplumConfigSet6_19) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{16}
}

func (x *GreenplumConfigSet6_19) GetEffectiveConfig() *GreenplumConfig6_19 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_19) GetUserConfig() *GreenplumConfig6_19 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_19) GetDefaultConfig() *GreenplumConfig6_19 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type GreenplumConfigSet6_21 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for a Greenplum®  cluster (a combination of settings defined in [user_config] and [default_config]).
	EffectiveConfig *GreenplumConfig6_21 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Greenplum® cluster.
	UserConfig *GreenplumConfig6_21 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Greenplum® cluster.
	DefaultConfig *GreenplumConfig6_21 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *GreenplumConfigSet6_21) Reset() {
	*x = GreenplumConfigSet6_21{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumConfigSet6_21) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfigSet6_21) ProtoMessage() {}

func (x *GreenplumConfigSet6_21) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfigSet6_21.ProtoReflect.Descriptor instead.
func (*GreenplumConfigSet6_21) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{17}
}

func (x *GreenplumConfigSet6_21) GetEffectiveConfig() *GreenplumConfig6_21 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_21) GetUserConfig() *GreenplumConfig6_21 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_21) GetDefaultConfig() *GreenplumConfig6_21 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type GreenplumConfigSet6_22 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for a Greenplum®  cluster (a combination of settings defined in [user_config] and [default_config]).
	EffectiveConfig *GreenplumConfig6_22 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Greenplum® cluster.
	UserConfig *GreenplumConfig6_22 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Greenplum® cluster.
	DefaultConfig *GreenplumConfig6_22 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *GreenplumConfigSet6_22) Reset() {
	*x = GreenplumConfigSet6_22{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumConfigSet6_22) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfigSet6_22) ProtoMessage() {}

func (x *GreenplumConfigSet6_22) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfigSet6_22.ProtoReflect.Descriptor instead.
func (*GreenplumConfigSet6_22) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{18}
}

func (x *GreenplumConfigSet6_22) GetEffectiveConfig() *GreenplumConfig6_22 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_22) GetUserConfig() *GreenplumConfig6_22 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_22) GetDefaultConfig() *GreenplumConfig6_22 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type GreenplumConfigSet6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for a Greenplum (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *GreenplumConfig6 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Greenplum.
	UserConfig *GreenplumConfig6 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Greenplum.
	DefaultConfig *GreenplumConfig6 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *GreenplumConfigSet6) Reset() {
	*x = GreenplumConfigSet6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GreenplumConfigSet6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfigSet6) ProtoMessage() {}

func (x *GreenplumConfigSet6) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfigSet6.ProtoReflect.Descriptor instead.
func (*GreenplumConfigSet6) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{19}
}

func (x *GreenplumConfigSet6) GetEffectiveConfig() *GreenplumConfig6 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *GreenplumConfigSet6) GetUserConfig() *GreenplumConfig6 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *GreenplumConfigSet6) GetDefaultConfig() *GreenplumConfig6 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type ConnectionPoolerConfigSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for an Odyssey® pooler (a combination of settings defined in [ConnectionPoolerConfigSet.user_config] and [ConnectionPoolerConfigSet.default_config]).
	EffectiveConfig *ConnectionPoolerConfig `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for an Odyssey® pooler.
	UserConfig *ConnectionPoolerConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for an Odyssey® pooler.
	DefaultConfig *ConnectionPoolerConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *ConnectionPoolerConfigSet) Reset() {
	*x = ConnectionPoolerConfigSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionPoolerConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionPoolerConfigSet) ProtoMessage() {}

func (x *ConnectionPoolerConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionPoolerConfigSet.ProtoReflect.Descriptor instead.
func (*ConnectionPoolerConfigSet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{20}
}

func (x *ConnectionPoolerConfigSet) GetEffectiveConfig() *ConnectionPoolerConfig {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *ConnectionPoolerConfigSet) GetUserConfig() *ConnectionPoolerConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *ConnectionPoolerConfigSet) GetDefaultConfig() *ConnectionPoolerConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

var File_yandex_cloud_mdb_greenplum_v1_config_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x09, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x52, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0x43, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x5f, 0x0a, 0x19, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x30, 0x2d, 0x32, 0x33, 0x52, 0x05, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x30, 0x2d, 0x35, 0x39, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c,
	0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42,
	0x07, 0x82, 0xc8, 0x31, 0x03, 0x3c, 0x3d, 0x34, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73,
	0x22, 0x8c, 0x02, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x41, 0x6e, 0x64, 0x56,
	0x61, 0x63, 0x75, 0x75, 0x6d, 0x12, 0x4e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x54, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31,
	0x0a, 0x37, 0x32, 0x30, 0x30, 0x2d, 0x38, 0x36, 0x33, 0x39, 0x39, 0x52, 0x0e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x52, 0x0a, 0x0e, 0x76,
	0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a, 0x37, 0x32, 0x30, 0x30, 0x2d, 0x38, 0x36, 0x33, 0x39, 0x39,
	0x52, 0x0d, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0xac, 0x02, 0x0a, 0x1a, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a,
	0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x52, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x12, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x41, 0x6e,
	0x64, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x52, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x41, 0x6e, 0x64, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x12, 0x63, 0x0a, 0x14, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x69, 0x6c,
	0x6c, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x52, 0x12, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x22, 0xa7,
	0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x31, 0x2d, 0x38, 0x36, 0x34, 0x30, 0x30, 0x52, 0x06, 0x6d,
	0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12,
	0x3e, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x12,
	0x5a, 0x0a, 0x13, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x11, 0x69, 0x64, 0x6c, 0x65, 0x49, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0c, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0b, 0x6c,
	0x6f, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x60, 0x0a, 0x16, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x17,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22,
	0xfc, 0x06, 0x0a, 0x10, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x36, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x16, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x53, 0x6c, 0x6f, 0x74,
	0x57, 0x61, 0x6c, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5d, 0x0a, 0x1d, 0x67,
	0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x19, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x1b, 0x67, 0x70,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x67, 0x70,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x21, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x67,
	0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x57, 0x0a, 0x19, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x6d, 0x61, 0x78,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x15, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x6d, 0x12, 0x50, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x24, 0x67, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x73, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x67,
	0x70, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xf9,
	0x04, 0x0a, 0x13, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x36, 0x5f, 0x31, 0x37, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x16,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x65,
	0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x53, 0x6c,
	0x6f, 0x74, 0x57, 0x61, 0x6c, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5d, 0x0a,
	0x1d, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x19, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x1b,
	0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17,
	0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x21, 0x67, 0x70, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1c, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x57, 0x0a,
	0x19, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x6d,
	0x61, 0x78, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x15, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x06, 0x0a, 0x13, 0x47,
	0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x5f,
	0x31, 0x39, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x57, 0x61,
	0x6c, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5d, 0x0a, 0x1d, 0x67, 0x70, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x67,
	0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x1b, 0x67, 0x70, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x67, 0x70, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x21, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x67, 0x70, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x57, 0x0a, 0x19, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x12,
	0x50, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xff, 0x06, 0x0a, 0x13, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x5f, 0x32, 0x31, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4f, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x5f,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x53, 0x6c, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x5d, 0x0a, 0x1d, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x59, 0x0a, 0x1b, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x17, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x21, 0x67, 0x70,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1c, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x57, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x17, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x67, 0x70, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x11, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x12, 0x50, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x24, 0x67, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1f, 0x67, 0x70, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x22, 0xff, 0x06, 0x0a, 0x13, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x5f, 0x32, 0x32, 0x12, 0x44, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4f, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x77, 0x61,
	0x6c, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x5d, 0x0a, 0x1d, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x59, 0x0a, 0x1b, 0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x17, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x21,
	0x67, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x57, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x67,
	0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x67, 0x70, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x12, 0x50, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x6f,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x24, 0x67, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x67, 0x70, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xad, 0x02, 0x0a, 0x16, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x36, 0x5f, 0x31, 0x37,
	0x12, 0x63, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x5f, 0x31, 0x37, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x5f, 0x31, 0x37, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x36, 0x5f, 0x31, 0x37, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xad, 0x02, 0x0a, 0x16, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x36, 0x5f, 0x31, 0x39,
	0x12, 0x63, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x5f, 0x31, 0x39, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x5f, 0x31, 0x39, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x36, 0x5f, 0x31, 0x39, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xad, 0x02, 0x0a, 0x16, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x36, 0x5f, 0x32, 0x31,
	0x12, 0x63, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x5f, 0x32, 0x31, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x5f, 0x32, 0x31, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x36, 0x5f, 0x32, 0x31, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xad, 0x02, 0x0a, 0x16, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x36, 0x5f, 0x32, 0x32,
	0x12, 0x63, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x5f, 0x32, 0x32, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x5f, 0x32, 0x32, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x36, 0x5f, 0x32, 0x32, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa1, 0x02, 0x0a, 0x13, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x36, 0x12, 0x60, 0x0a,
	0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x50, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x36, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x56, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x70,
	0x6c, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x36, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb9, 0x02, 0x0a, 0x19, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x12, 0x66, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x56, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5c, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2a, 0x52, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x44, 0x44, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x44, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x42, 0x70, 0x0a, 0x21, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x5a, 0x4b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x2f, 0x76,
	0x31, 0x3b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescData = file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc
)

func file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescData
}

var file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_yandex_cloud_mdb_greenplum_v1_config_proto_goTypes = []interface{}{
	(LogStatement)(0),                    // 0: yandex.cloud.mdb.greenplum.v1.LogStatement
	(ConnectionPoolerConfig_PoolMode)(0), // 1: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.PoolMode
	(*Resources)(nil),                    // 2: yandex.cloud.mdb.greenplum.v1.Resources
	(*ConnectionPoolerConfig)(nil),       // 3: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig
	(*BackgroundActivityStartAt)(nil),    // 4: yandex.cloud.mdb.greenplum.v1.BackgroundActivityStartAt
	(*TableSizes)(nil),                   // 5: yandex.cloud.mdb.greenplum.v1.TableSizes
	(*AnalyzeAndVacuum)(nil),             // 6: yandex.cloud.mdb.greenplum.v1.AnalyzeAndVacuum
	(*BackgroundActivitiesConfig)(nil),   // 7: yandex.cloud.mdb.greenplum.v1.BackgroundActivitiesConfig
	(*QueryKiller)(nil),                  // 8: yandex.cloud.mdb.greenplum.v1.QueryKiller
	(*QueryKillerScripts)(nil),           // 9: yandex.cloud.mdb.greenplum.v1.QueryKillerScripts
	(*MasterSubclusterConfig)(nil),       // 10: yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfig
	(*SegmentSubclusterConfig)(nil),      // 11: yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfig
	(*GreenplumConfig6)(nil),             // 12: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6
	(*GreenplumConfig6_17)(nil),          // 13: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17
	(*GreenplumConfig6_19)(nil),          // 14: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19
	(*GreenplumConfig6_21)(nil),          // 15: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21
	(*GreenplumConfig6_22)(nil),          // 16: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22
	(*GreenplumConfigSet6_17)(nil),       // 17: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_17
	(*GreenplumConfigSet6_19)(nil),       // 18: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_19
	(*GreenplumConfigSet6_21)(nil),       // 19: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_21
	(*GreenplumConfigSet6_22)(nil),       // 20: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_22
	(*GreenplumConfigSet6)(nil),          // 21: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6
	(*ConnectionPoolerConfigSet)(nil),    // 22: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfigSet
	(*wrapperspb.Int64Value)(nil),        // 23: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),         // 24: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_greenplum_v1_config_proto_depIdxs = []int32{
	1,  // 0: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.mode:type_name -> yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.PoolMode
	23, // 1: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.size:type_name -> google.protobuf.Int64Value
	23, // 2: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.client_idle_timeout:type_name -> google.protobuf.Int64Value
	4,  // 3: yandex.cloud.mdb.greenplum.v1.TableSizes.starts:type_name -> yandex.cloud.mdb.greenplum.v1.BackgroundActivityStartAt
	4,  // 4: yandex.cloud.mdb.greenplum.v1.AnalyzeAndVacuum.start:type_name -> yandex.cloud.mdb.greenplum.v1.BackgroundActivityStartAt
	23, // 5: yandex.cloud.mdb.greenplum.v1.AnalyzeAndVacuum.analyze_timeout:type_name -> google.protobuf.Int64Value
	23, // 6: yandex.cloud.mdb.greenplum.v1.AnalyzeAndVacuum.vacuum_timeout:type_name -> google.protobuf.Int64Value
	5,  // 7: yandex.cloud.mdb.greenplum.v1.BackgroundActivitiesConfig.table_sizes:type_name -> yandex.cloud.mdb.greenplum.v1.TableSizes
	6,  // 8: yandex.cloud.mdb.greenplum.v1.BackgroundActivitiesConfig.analyze_and_vacuum:type_name -> yandex.cloud.mdb.greenplum.v1.AnalyzeAndVacuum
	9,  // 9: yandex.cloud.mdb.greenplum.v1.BackgroundActivitiesConfig.query_killer_scripts:type_name -> yandex.cloud.mdb.greenplum.v1.QueryKillerScripts
	24, // 10: yandex.cloud.mdb.greenplum.v1.QueryKiller.enable:type_name -> google.protobuf.BoolValue
	23, // 11: yandex.cloud.mdb.greenplum.v1.QueryKiller.max_age:type_name -> google.protobuf.Int64Value
	8,  // 12: yandex.cloud.mdb.greenplum.v1.QueryKillerScripts.idle:type_name -> yandex.cloud.mdb.greenplum.v1.QueryKiller
	8,  // 13: yandex.cloud.mdb.greenplum.v1.QueryKillerScripts.idle_in_transaction:type_name -> yandex.cloud.mdb.greenplum.v1.QueryKiller
	8,  // 14: yandex.cloud.mdb.greenplum.v1.QueryKillerScripts.long_running:type_name -> yandex.cloud.mdb.greenplum.v1.QueryKiller
	2,  // 15: yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfig.resources:type_name -> yandex.cloud.mdb.greenplum.v1.Resources
	2,  // 16: yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfig.resources:type_name -> yandex.cloud.mdb.greenplum.v1.Resources
	23, // 17: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.max_connections:type_name -> google.protobuf.Int64Value
	23, // 18: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.max_slot_wal_keep_size:type_name -> google.protobuf.Int64Value
	23, // 19: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.gp_workfile_limit_per_segment:type_name -> google.protobuf.Int64Value
	23, // 20: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.gp_workfile_limit_per_query:type_name -> google.protobuf.Int64Value
	23, // 21: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.gp_workfile_limit_files_per_query:type_name -> google.protobuf.Int64Value
	23, // 22: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.max_prepared_transactions:type_name -> google.protobuf.Int64Value
	24, // 23: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.gp_workfile_compression:type_name -> google.protobuf.BoolValue
	23, // 24: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.max_statement_mem:type_name -> google.protobuf.Int64Value
	0,  // 25: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.log_statement:type_name -> yandex.cloud.mdb.greenplum.v1.LogStatement
	24, // 26: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.gp_add_column_inherits_table_setting:type_name -> google.protobuf.BoolValue
	23, // 27: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.max_connections:type_name -> google.protobuf.Int64Value
	23, // 28: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.max_slot_wal_keep_size:type_name -> google.protobuf.Int64Value
	23, // 29: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.gp_workfile_limit_per_segment:type_name -> google.protobuf.Int64Value
	23, // 30: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.gp_workfile_limit_per_query:type_name -> google.protobuf.Int64Value
	23, // 31: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.gp_workfile_limit_files_per_query:type_name -> google.protobuf.Int64Value
	23, // 32: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.max_prepared_transactions:type_name -> google.protobuf.Int64Value
	24, // 33: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.gp_workfile_compression:type_name -> google.protobuf.BoolValue
	23, // 34: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.max_connections:type_name -> google.protobuf.Int64Value
	23, // 35: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.max_slot_wal_keep_size:type_name -> google.protobuf.Int64Value
	23, // 36: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.gp_workfile_limit_per_segment:type_name -> google.protobuf.Int64Value
	23, // 37: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.gp_workfile_limit_per_query:type_name -> google.protobuf.Int64Value
	23, // 38: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.gp_workfile_limit_files_per_query:type_name -> google.protobuf.Int64Value
	23, // 39: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.max_prepared_transactions:type_name -> google.protobuf.Int64Value
	24, // 40: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.gp_workfile_compression:type_name -> google.protobuf.BoolValue
	23, // 41: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.max_statement_mem:type_name -> google.protobuf.Int64Value
	0,  // 42: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.log_statement:type_name -> yandex.cloud.mdb.greenplum.v1.LogStatement
	23, // 43: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.max_connections:type_name -> google.protobuf.Int64Value
	23, // 44: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.max_slot_wal_keep_size:type_name -> google.protobuf.Int64Value
	23, // 45: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.gp_workfile_limit_per_segment:type_name -> google.protobuf.Int64Value
	23, // 46: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.gp_workfile_limit_per_query:type_name -> google.protobuf.Int64Value
	23, // 47: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.gp_workfile_limit_files_per_query:type_name -> google.protobuf.Int64Value
	23, // 48: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.max_prepared_transactions:type_name -> google.protobuf.Int64Value
	24, // 49: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.gp_workfile_compression:type_name -> google.protobuf.BoolValue
	23, // 50: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.max_statement_mem:type_name -> google.protobuf.Int64Value
	0,  // 51: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.log_statement:type_name -> yandex.cloud.mdb.greenplum.v1.LogStatement
	24, // 52: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.gp_add_column_inherits_table_setting:type_name -> google.protobuf.BoolValue
	23, // 53: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.max_connections:type_name -> google.protobuf.Int64Value
	23, // 54: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.max_slot_wal_keep_size:type_name -> google.protobuf.Int64Value
	23, // 55: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.gp_workfile_limit_per_segment:type_name -> google.protobuf.Int64Value
	23, // 56: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.gp_workfile_limit_per_query:type_name -> google.protobuf.Int64Value
	23, // 57: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.gp_workfile_limit_files_per_query:type_name -> google.protobuf.Int64Value
	23, // 58: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.max_prepared_transactions:type_name -> google.protobuf.Int64Value
	24, // 59: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.gp_workfile_compression:type_name -> google.protobuf.BoolValue
	23, // 60: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.max_statement_mem:type_name -> google.protobuf.Int64Value
	0,  // 61: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.log_statement:type_name -> yandex.cloud.mdb.greenplum.v1.LogStatement
	24, // 62: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.gp_add_column_inherits_table_setting:type_name -> google.protobuf.BoolValue
	13, // 63: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_17.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17
	13, // 64: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_17.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17
	13, // 65: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_17.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17
	14, // 66: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_19.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19
	14, // 67: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_19.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19
	14, // 68: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_19.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19
	15, // 69: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_21.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21
	15, // 70: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_21.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21
	15, // 71: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_21.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21
	16, // 72: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_22.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22
	16, // 73: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_22.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22
	16, // 74: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_22.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22
	12, // 75: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6
	12, // 76: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6
	12, // 77: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6
	3,  // 78: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfigSet.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig
	3,  // 79: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfigSet.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig
	3,  // 80: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfigSet.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig
	81, // [81:81] is the sub-list for method output_type
	81, // [81:81] is the sub-list for method input_type
	81, // [81:81] is the sub-list for extension type_name
	81, // [81:81] is the sub-list for extension extendee
	0,  // [0:81] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_greenplum_v1_config_proto_init() }
func file_yandex_cloud_mdb_greenplum_v1_config_proto_init() {
	if File_yandex_cloud_mdb_greenplum_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionPoolerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundActivityStartAt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSizes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeAndVacuum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundActivitiesConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKiller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryKillerScripts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterSubclusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentSubclusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumConfig6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumConfig6_17); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumConfig6_19); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumConfig6_21); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumConfig6_22); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumConfigSet6_17); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumConfigSet6_19); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumConfigSet6_21); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumConfigSet6_22); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GreenplumConfigSet6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionPoolerConfigSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_greenplum_v1_config_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_greenplum_v1_config_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_greenplum_v1_config_proto = out.File
	file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc = nil
	file_yandex_cloud_mdb_greenplum_v1_config_proto_goTypes = nil
	file_yandex_cloud_mdb_greenplum_v1_config_proto_depIdxs = nil
}
