// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: yandex/cloud/mdb/mysql/v1/config/mysql5_7.proto

package mysql

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MysqlConfig5_7_SQLMode int32

const (
	MysqlConfig5_7_SQLMODE_UNSPECIFIED        MysqlConfig5_7_SQLMode = 0
	MysqlConfig5_7_ALLOW_INVALID_DATES        MysqlConfig5_7_SQLMode = 1
	MysqlConfig5_7_ANSI_QUOTES                MysqlConfig5_7_SQLMode = 2
	MysqlConfig5_7_ERROR_FOR_DIVISION_BY_ZERO MysqlConfig5_7_SQLMode = 3
	MysqlConfig5_7_HIGH_NOT_PRECEDENCE        MysqlConfig5_7_SQLMode = 4
	MysqlConfig5_7_IGNORE_SPACE               MysqlConfig5_7_SQLMode = 5
	MysqlConfig5_7_NO_AUTO_VALUE_ON_ZERO      MysqlConfig5_7_SQLMode = 6
	MysqlConfig5_7_NO_BACKSLASH_ESCAPES       MysqlConfig5_7_SQLMode = 7
	MysqlConfig5_7_NO_ENGINE_SUBSTITUTION     MysqlConfig5_7_SQLMode = 8
	MysqlConfig5_7_NO_UNSIGNED_SUBTRACTION    MysqlConfig5_7_SQLMode = 9
	MysqlConfig5_7_NO_ZERO_DATE               MysqlConfig5_7_SQLMode = 10
	MysqlConfig5_7_NO_ZERO_IN_DATE            MysqlConfig5_7_SQLMode = 11
	MysqlConfig5_7_NO_FIELD_OPTIONS           MysqlConfig5_7_SQLMode = 12
	MysqlConfig5_7_NO_KEY_OPTIONS             MysqlConfig5_7_SQLMode = 13
	MysqlConfig5_7_NO_TABLE_OPTIONS           MysqlConfig5_7_SQLMode = 14
	MysqlConfig5_7_ONLY_FULL_GROUP_BY         MysqlConfig5_7_SQLMode = 15
	MysqlConfig5_7_PAD_CHAR_TO_FULL_LENGTH    MysqlConfig5_7_SQLMode = 16
	MysqlConfig5_7_PIPES_AS_CONCAT            MysqlConfig5_7_SQLMode = 17
	MysqlConfig5_7_REAL_AS_FLOAT              MysqlConfig5_7_SQLMode = 18
	MysqlConfig5_7_STRICT_ALL_TABLES          MysqlConfig5_7_SQLMode = 19
	MysqlConfig5_7_STRICT_TRANS_TABLES        MysqlConfig5_7_SQLMode = 20
	MysqlConfig5_7_ANSI                       MysqlConfig5_7_SQLMode = 21
	MysqlConfig5_7_TRADITIONAL                MysqlConfig5_7_SQLMode = 22
	MysqlConfig5_7_DB2                        MysqlConfig5_7_SQLMode = 23
	MysqlConfig5_7_MAXDB                      MysqlConfig5_7_SQLMode = 24
	MysqlConfig5_7_MSSQL                      MysqlConfig5_7_SQLMode = 25
	MysqlConfig5_7_MYSQL323                   MysqlConfig5_7_SQLMode = 26
	MysqlConfig5_7_MYSQL40                    MysqlConfig5_7_SQLMode = 27
	MysqlConfig5_7_ORACLE                     MysqlConfig5_7_SQLMode = 28
	MysqlConfig5_7_POSTGRESQL                 MysqlConfig5_7_SQLMode = 29
	MysqlConfig5_7_NO_AUTO_CREATE_USER        MysqlConfig5_7_SQLMode = 30
	MysqlConfig5_7_NO_DIR_IN_CREATE           MysqlConfig5_7_SQLMode = 31
)

// Enum value maps for MysqlConfig5_7_SQLMode.
var (
	MysqlConfig5_7_SQLMode_name = map[int32]string{
		0:  "SQLMODE_UNSPECIFIED",
		1:  "ALLOW_INVALID_DATES",
		2:  "ANSI_QUOTES",
		3:  "ERROR_FOR_DIVISION_BY_ZERO",
		4:  "HIGH_NOT_PRECEDENCE",
		5:  "IGNORE_SPACE",
		6:  "NO_AUTO_VALUE_ON_ZERO",
		7:  "NO_BACKSLASH_ESCAPES",
		8:  "NO_ENGINE_SUBSTITUTION",
		9:  "NO_UNSIGNED_SUBTRACTION",
		10: "NO_ZERO_DATE",
		11: "NO_ZERO_IN_DATE",
		12: "NO_FIELD_OPTIONS",
		13: "NO_KEY_OPTIONS",
		14: "NO_TABLE_OPTIONS",
		15: "ONLY_FULL_GROUP_BY",
		16: "PAD_CHAR_TO_FULL_LENGTH",
		17: "PIPES_AS_CONCAT",
		18: "REAL_AS_FLOAT",
		19: "STRICT_ALL_TABLES",
		20: "STRICT_TRANS_TABLES",
		21: "ANSI",
		22: "TRADITIONAL",
		23: "DB2",
		24: "MAXDB",
		25: "MSSQL",
		26: "MYSQL323",
		27: "MYSQL40",
		28: "ORACLE",
		29: "POSTGRESQL",
		30: "NO_AUTO_CREATE_USER",
		31: "NO_DIR_IN_CREATE",
	}
	MysqlConfig5_7_SQLMode_value = map[string]int32{
		"SQLMODE_UNSPECIFIED":        0,
		"ALLOW_INVALID_DATES":        1,
		"ANSI_QUOTES":                2,
		"ERROR_FOR_DIVISION_BY_ZERO": 3,
		"HIGH_NOT_PRECEDENCE":        4,
		"IGNORE_SPACE":               5,
		"NO_AUTO_VALUE_ON_ZERO":      6,
		"NO_BACKSLASH_ESCAPES":       7,
		"NO_ENGINE_SUBSTITUTION":     8,
		"NO_UNSIGNED_SUBTRACTION":    9,
		"NO_ZERO_DATE":               10,
		"NO_ZERO_IN_DATE":            11,
		"NO_FIELD_OPTIONS":           12,
		"NO_KEY_OPTIONS":             13,
		"NO_TABLE_OPTIONS":           14,
		"ONLY_FULL_GROUP_BY":         15,
		"PAD_CHAR_TO_FULL_LENGTH":    16,
		"PIPES_AS_CONCAT":            17,
		"REAL_AS_FLOAT":              18,
		"STRICT_ALL_TABLES":          19,
		"STRICT_TRANS_TABLES":        20,
		"ANSI":                       21,
		"TRADITIONAL":                22,
		"DB2":                        23,
		"MAXDB":                      24,
		"MSSQL":                      25,
		"MYSQL323":                   26,
		"MYSQL40":                    27,
		"ORACLE":                     28,
		"POSTGRESQL":                 29,
		"NO_AUTO_CREATE_USER":        30,
		"NO_DIR_IN_CREATE":           31,
	}
)

func (x MysqlConfig5_7_SQLMode) Enum() *MysqlConfig5_7_SQLMode {
	p := new(MysqlConfig5_7_SQLMode)
	*p = x
	return p
}

func (x MysqlConfig5_7_SQLMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig5_7_SQLMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[0].Descriptor()
}

func (MysqlConfig5_7_SQLMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[0]
}

func (x MysqlConfig5_7_SQLMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig5_7_SQLMode.Descriptor instead.
func (MysqlConfig5_7_SQLMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0, 0}
}

type MysqlConfig5_7_AuthPlugin int32

const (
	MysqlConfig5_7_AUTH_PLUGIN_UNSPECIFIED MysqlConfig5_7_AuthPlugin = 0
	// Using [Native Pluggable Authentication](https://dev.mysql.com/doc/refman/5.7/en/native-pluggable-authentication.html).
	MysqlConfig5_7_MYSQL_NATIVE_PASSWORD MysqlConfig5_7_AuthPlugin = 1
	// Deprecated: Do not use.
	MysqlConfig5_7_CACHING_SHA2_PASSWORD MysqlConfig5_7_AuthPlugin = 2
	// Using [SHA-256 Pluggable Authentication](https://dev.mysql.com/doc/refman/5.7/en/sha256-pluggable-authentication.html).
	MysqlConfig5_7_SHA256_PASSWORD MysqlConfig5_7_AuthPlugin = 3
)

// Enum value maps for MysqlConfig5_7_AuthPlugin.
var (
	MysqlConfig5_7_AuthPlugin_name = map[int32]string{
		0: "AUTH_PLUGIN_UNSPECIFIED",
		1: "MYSQL_NATIVE_PASSWORD",
		2: "CACHING_SHA2_PASSWORD",
		3: "SHA256_PASSWORD",
	}
	MysqlConfig5_7_AuthPlugin_value = map[string]int32{
		"AUTH_PLUGIN_UNSPECIFIED": 0,
		"MYSQL_NATIVE_PASSWORD":   1,
		"CACHING_SHA2_PASSWORD":   2,
		"SHA256_PASSWORD":         3,
	}
)

func (x MysqlConfig5_7_AuthPlugin) Enum() *MysqlConfig5_7_AuthPlugin {
	p := new(MysqlConfig5_7_AuthPlugin)
	*p = x
	return p
}

func (x MysqlConfig5_7_AuthPlugin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig5_7_AuthPlugin) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[1].Descriptor()
}

func (MysqlConfig5_7_AuthPlugin) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[1]
}

func (x MysqlConfig5_7_AuthPlugin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig5_7_AuthPlugin.Descriptor instead.
func (MysqlConfig5_7_AuthPlugin) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0, 1}
}

type MysqlConfig5_7_TransactionIsolation int32

const (
	MysqlConfig5_7_TRANSACTION_ISOLATION_UNSPECIFIED MysqlConfig5_7_TransactionIsolation = 0
	MysqlConfig5_7_READ_COMMITTED                    MysqlConfig5_7_TransactionIsolation = 1
	MysqlConfig5_7_REPEATABLE_READ                   MysqlConfig5_7_TransactionIsolation = 2
	MysqlConfig5_7_SERIALIZABLE                      MysqlConfig5_7_TransactionIsolation = 3
)

// Enum value maps for MysqlConfig5_7_TransactionIsolation.
var (
	MysqlConfig5_7_TransactionIsolation_name = map[int32]string{
		0: "TRANSACTION_ISOLATION_UNSPECIFIED",
		1: "READ_COMMITTED",
		2: "REPEATABLE_READ",
		3: "SERIALIZABLE",
	}
	MysqlConfig5_7_TransactionIsolation_value = map[string]int32{
		"TRANSACTION_ISOLATION_UNSPECIFIED": 0,
		"READ_COMMITTED":                    1,
		"REPEATABLE_READ":                   2,
		"SERIALIZABLE":                      3,
	}
)

func (x MysqlConfig5_7_TransactionIsolation) Enum() *MysqlConfig5_7_TransactionIsolation {
	p := new(MysqlConfig5_7_TransactionIsolation)
	*p = x
	return p
}

func (x MysqlConfig5_7_TransactionIsolation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig5_7_TransactionIsolation) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[2].Descriptor()
}

func (MysqlConfig5_7_TransactionIsolation) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[2]
}

func (x MysqlConfig5_7_TransactionIsolation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig5_7_TransactionIsolation.Descriptor instead.
func (MysqlConfig5_7_TransactionIsolation) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0, 2}
}

type MysqlConfig5_7_BinlogRowImage int32

const (
	MysqlConfig5_7_BINLOG_ROW_IMAGE_UNSPECIFIED MysqlConfig5_7_BinlogRowImage = 0
	MysqlConfig5_7_FULL                         MysqlConfig5_7_BinlogRowImage = 1
	MysqlConfig5_7_MINIMAL                      MysqlConfig5_7_BinlogRowImage = 2
	MysqlConfig5_7_NOBLOB                       MysqlConfig5_7_BinlogRowImage = 3
)

// Enum value maps for MysqlConfig5_7_BinlogRowImage.
var (
	MysqlConfig5_7_BinlogRowImage_name = map[int32]string{
		0: "BINLOG_ROW_IMAGE_UNSPECIFIED",
		1: "FULL",
		2: "MINIMAL",
		3: "NOBLOB",
	}
	MysqlConfig5_7_BinlogRowImage_value = map[string]int32{
		"BINLOG_ROW_IMAGE_UNSPECIFIED": 0,
		"FULL":                         1,
		"MINIMAL":                      2,
		"NOBLOB":                       3,
	}
)

func (x MysqlConfig5_7_BinlogRowImage) Enum() *MysqlConfig5_7_BinlogRowImage {
	p := new(MysqlConfig5_7_BinlogRowImage)
	*p = x
	return p
}

func (x MysqlConfig5_7_BinlogRowImage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig5_7_BinlogRowImage) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[3].Descriptor()
}

func (MysqlConfig5_7_BinlogRowImage) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[3]
}

func (x MysqlConfig5_7_BinlogRowImage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig5_7_BinlogRowImage.Descriptor instead.
func (MysqlConfig5_7_BinlogRowImage) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0, 3}
}

type MysqlConfig5_7_SlaveParallelType int32

const (
	MysqlConfig5_7_SLAVE_PARALLEL_TYPE_UNSPECIFIED MysqlConfig5_7_SlaveParallelType = 0
	MysqlConfig5_7_DATABASE                        MysqlConfig5_7_SlaveParallelType = 1
	MysqlConfig5_7_LOGICAL_CLOCK                   MysqlConfig5_7_SlaveParallelType = 2
)

// Enum value maps for MysqlConfig5_7_SlaveParallelType.
var (
	MysqlConfig5_7_SlaveParallelType_name = map[int32]string{
		0: "SLAVE_PARALLEL_TYPE_UNSPECIFIED",
		1: "DATABASE",
		2: "LOGICAL_CLOCK",
	}
	MysqlConfig5_7_SlaveParallelType_value = map[string]int32{
		"SLAVE_PARALLEL_TYPE_UNSPECIFIED": 0,
		"DATABASE":                        1,
		"LOGICAL_CLOCK":                   2,
	}
)

func (x MysqlConfig5_7_SlaveParallelType) Enum() *MysqlConfig5_7_SlaveParallelType {
	p := new(MysqlConfig5_7_SlaveParallelType)
	*p = x
	return p
}

func (x MysqlConfig5_7_SlaveParallelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig5_7_SlaveParallelType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[4].Descriptor()
}

func (MysqlConfig5_7_SlaveParallelType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[4]
}

func (x MysqlConfig5_7_SlaveParallelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig5_7_SlaveParallelType.Descriptor instead.
func (MysqlConfig5_7_SlaveParallelType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0, 4}
}

type MysqlConfig5_7_LogSlowRateType int32

const (
	MysqlConfig5_7_LOG_SLOW_RATE_TYPE_UNSPECIFIED MysqlConfig5_7_LogSlowRateType = 0
	MysqlConfig5_7_SESSION                        MysqlConfig5_7_LogSlowRateType = 1
	MysqlConfig5_7_QUERY                          MysqlConfig5_7_LogSlowRateType = 2
)

// Enum value maps for MysqlConfig5_7_LogSlowRateType.
var (
	MysqlConfig5_7_LogSlowRateType_name = map[int32]string{
		0: "LOG_SLOW_RATE_TYPE_UNSPECIFIED",
		1: "SESSION",
		2: "QUERY",
	}
	MysqlConfig5_7_LogSlowRateType_value = map[string]int32{
		"LOG_SLOW_RATE_TYPE_UNSPECIFIED": 0,
		"SESSION":                        1,
		"QUERY":                          2,
	}
)

func (x MysqlConfig5_7_LogSlowRateType) Enum() *MysqlConfig5_7_LogSlowRateType {
	p := new(MysqlConfig5_7_LogSlowRateType)
	*p = x
	return p
}

func (x MysqlConfig5_7_LogSlowRateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig5_7_LogSlowRateType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[5].Descriptor()
}

func (MysqlConfig5_7_LogSlowRateType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[5]
}

func (x MysqlConfig5_7_LogSlowRateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig5_7_LogSlowRateType.Descriptor instead.
func (MysqlConfig5_7_LogSlowRateType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0, 5}
}

type MysqlConfig5_7_LogSlowFilterType int32

const (
	MysqlConfig5_7_LOG_SLOW_FILTER_TYPE_UNSPECIFIED MysqlConfig5_7_LogSlowFilterType = 0
	MysqlConfig5_7_FULL_SCAN                        MysqlConfig5_7_LogSlowFilterType = 1
	MysqlConfig5_7_FULL_JOIN                        MysqlConfig5_7_LogSlowFilterType = 2
	MysqlConfig5_7_TMP_TABLE                        MysqlConfig5_7_LogSlowFilterType = 3
	MysqlConfig5_7_TMP_TABLE_ON_DISK                MysqlConfig5_7_LogSlowFilterType = 4
	MysqlConfig5_7_FILESORT                         MysqlConfig5_7_LogSlowFilterType = 5
	MysqlConfig5_7_FILESORT_ON_DISK                 MysqlConfig5_7_LogSlowFilterType = 6
)

// Enum value maps for MysqlConfig5_7_LogSlowFilterType.
var (
	MysqlConfig5_7_LogSlowFilterType_name = map[int32]string{
		0: "LOG_SLOW_FILTER_TYPE_UNSPECIFIED",
		1: "FULL_SCAN",
		2: "FULL_JOIN",
		3: "TMP_TABLE",
		4: "TMP_TABLE_ON_DISK",
		5: "FILESORT",
		6: "FILESORT_ON_DISK",
	}
	MysqlConfig5_7_LogSlowFilterType_value = map[string]int32{
		"LOG_SLOW_FILTER_TYPE_UNSPECIFIED": 0,
		"FULL_SCAN":                        1,
		"FULL_JOIN":                        2,
		"TMP_TABLE":                        3,
		"TMP_TABLE_ON_DISK":                4,
		"FILESORT":                         5,
		"FILESORT_ON_DISK":                 6,
	}
)

func (x MysqlConfig5_7_LogSlowFilterType) Enum() *MysqlConfig5_7_LogSlowFilterType {
	p := new(MysqlConfig5_7_LogSlowFilterType)
	*p = x
	return p
}

func (x MysqlConfig5_7_LogSlowFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig5_7_LogSlowFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[6].Descriptor()
}

func (MysqlConfig5_7_LogSlowFilterType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[6]
}

func (x MysqlConfig5_7_LogSlowFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig5_7_LogSlowFilterType.Descriptor instead.
func (MysqlConfig5_7_LogSlowFilterType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0, 6}
}

type MysqlConfig5_7_BinlogTransactionDependencyTracking int32

const (
	MysqlConfig5_7_BINLOG_TRANSACTION_DEPENDENCY_TRACKING_UNSPECIFIED MysqlConfig5_7_BinlogTransactionDependencyTracking = 0
	MysqlConfig5_7_COMMIT_ORDER                                       MysqlConfig5_7_BinlogTransactionDependencyTracking = 1
	MysqlConfig5_7_WRITESET                                           MysqlConfig5_7_BinlogTransactionDependencyTracking = 2
	MysqlConfig5_7_WRITESET_SESSION                                   MysqlConfig5_7_BinlogTransactionDependencyTracking = 3
)

// Enum value maps for MysqlConfig5_7_BinlogTransactionDependencyTracking.
var (
	MysqlConfig5_7_BinlogTransactionDependencyTracking_name = map[int32]string{
		0: "BINLOG_TRANSACTION_DEPENDENCY_TRACKING_UNSPECIFIED",
		1: "COMMIT_ORDER",
		2: "WRITESET",
		3: "WRITESET_SESSION",
	}
	MysqlConfig5_7_BinlogTransactionDependencyTracking_value = map[string]int32{
		"BINLOG_TRANSACTION_DEPENDENCY_TRACKING_UNSPECIFIED": 0,
		"COMMIT_ORDER":     1,
		"WRITESET":         2,
		"WRITESET_SESSION": 3,
	}
)

func (x MysqlConfig5_7_BinlogTransactionDependencyTracking) Enum() *MysqlConfig5_7_BinlogTransactionDependencyTracking {
	p := new(MysqlConfig5_7_BinlogTransactionDependencyTracking)
	*p = x
	return p
}

func (x MysqlConfig5_7_BinlogTransactionDependencyTracking) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig5_7_BinlogTransactionDependencyTracking) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[7].Descriptor()
}

func (MysqlConfig5_7_BinlogTransactionDependencyTracking) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes[7]
}

func (x MysqlConfig5_7_BinlogTransactionDependencyTracking) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig5_7_BinlogTransactionDependencyTracking.Descriptor instead.
func (MysqlConfig5_7_BinlogTransactionDependencyTracking) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0, 7}
}

// Options and structure of `MysqlConfig5_7` reflects MySQL 5.7 configuration file.
type MysqlConfig5_7 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the InnoDB buffer pool used for caching table and index data.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size) for details.
	InnodbBufferPoolSize *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=innodb_buffer_pool_size,json=innodbBufferPoolSize,proto3" json:"innodb_buffer_pool_size,omitempty"`
	// The maximum permitted number of simultaneous client connections.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections) for details.
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Time that it takes to process a query before it is considered slow.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time) for details.
	LongQueryTime *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=long_query_time,json=longQueryTime,proto3" json:"long_query_time,omitempty"`
	// Enable writing of general query log of MySQL.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log) for details.
	GeneralLog *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=general_log,json=generalLog,proto3" json:"general_log,omitempty"`
	// Enable writing of audit log of MySQL.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log) for details.
	AuditLog *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=audit_log,json=auditLog,proto3" json:"audit_log,omitempty"`
	// Server SQL mode of MySQL.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting) for details.
	SqlMode []MysqlConfig5_7_SQLMode `protobuf:"varint,6,rep,packed,name=sql_mode,json=sqlMode,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7_SQLMode" json:"sql_mode,omitempty"`
	// The maximum size in bytes of one packet.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet) for details.
	MaxAllowedPacket *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=max_allowed_packet,json=maxAllowedPacket,proto3" json:"max_allowed_packet,omitempty"`
	// Authentication plugin used in the managed MySQL cluster.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_default_authentication_plugin for details.
	DefaultAuthenticationPlugin MysqlConfig5_7_AuthPlugin `protobuf:"varint,8,opt,name=default_authentication_plugin,json=defaultAuthenticationPlugin,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7_AuthPlugin" json:"default_authentication_plugin,omitempty"`
	// Transaction log flush behaviour.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit for details.
	InnodbFlushLogAtTrxCommit *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=innodb_flush_log_at_trx_commit,json=innodbFlushLogAtTrxCommit,proto3" json:"innodb_flush_log_at_trx_commit,omitempty"`
	// Max time in seconds for a transaction to wait for a row lock.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout for details.
	InnodbLockWaitTimeout *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=innodb_lock_wait_timeout,json=innodbLockWaitTimeout,proto3" json:"innodb_lock_wait_timeout,omitempty"`
	// Default transaction isolation level.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_transaction_isolation for details.
	TransactionIsolation MysqlConfig5_7_TransactionIsolation `protobuf:"varint,11,opt,name=transaction_isolation,json=transactionIsolation,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7_TransactionIsolation" json:"transaction_isolation,omitempty"`
	// Print information about deadlocks in error log.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks for details.
	InnodbPrintAllDeadlocks *wrapperspb.BoolValue `protobuf:"bytes,12,opt,name=innodb_print_all_deadlocks,json=innodbPrintAllDeadlocks,proto3" json:"innodb_print_all_deadlocks,omitempty"`
	// The number of seconds to wait for more data from a connection before aborting the read.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_read_timeout for details.
	NetReadTimeout *wrapperspb.Int64Value `protobuf:"bytes,13,opt,name=net_read_timeout,json=netReadTimeout,proto3" json:"net_read_timeout,omitempty"`
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout for details.
	NetWriteTimeout *wrapperspb.Int64Value `protobuf:"bytes,14,opt,name=net_write_timeout,json=netWriteTimeout,proto3" json:"net_write_timeout,omitempty"`
	// The maximum permitted result length in bytes for the GROUP_CONCAT() function.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_group_concat_max_len for details.
	GroupConcatMaxLen *wrapperspb.Int64Value `protobuf:"bytes,15,opt,name=group_concat_max_len,json=groupConcatMaxLen,proto3" json:"group_concat_max_len,omitempty"`
	// The maximum size of internal in-memory temporary tables.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_tmp_table_size for details.
	TmpTableSize *wrapperspb.Int64Value `protobuf:"bytes,16,opt,name=tmp_table_size,json=tmpTableSize,proto3" json:"tmp_table_size,omitempty"`
	// This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_heap_table_size for details.
	MaxHeapTableSize *wrapperspb.Int64Value `protobuf:"bytes,17,opt,name=max_heap_table_size,json=maxHeapTableSize,proto3" json:"max_heap_table_size,omitempty"`
	// The servers default time zone.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_default-time-zone for details.
	DefaultTimeZone string `protobuf:"bytes,18,opt,name=default_time_zone,json=defaultTimeZone,proto3" json:"default_time_zone,omitempty"`
	// The servers default character set.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_character_set_server for details.
	CharacterSetServer string `protobuf:"bytes,19,opt,name=character_set_server,json=characterSetServer,proto3" json:"character_set_server,omitempty"`
	// The server default collation.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_collation_server for details.
	CollationServer string `protobuf:"bytes,20,opt,name=collation_server,json=collationServer,proto3" json:"collation_server,omitempty"`
	// Enables InnoDB adaptive hash index.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index for details.
	InnodbAdaptiveHashIndex *wrapperspb.BoolValue `protobuf:"bytes,21,opt,name=innodb_adaptive_hash_index,json=innodbAdaptiveHashIndex,proto3" json:"innodb_adaptive_hash_index,omitempty"`
	// Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_numa_interleave for details.
	InnodbNumaInterleave *wrapperspb.BoolValue `protobuf:"bytes,22,opt,name=innodb_numa_interleave,json=innodbNumaInterleave,proto3" json:"innodb_numa_interleave,omitempty"`
	// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_log_buffer_size for details.
	InnodbLogBufferSize *wrapperspb.Int64Value `protobuf:"bytes,23,opt,name=innodb_log_buffer_size,json=innodbLogBufferSize,proto3" json:"innodb_log_buffer_size,omitempty"`
	// The size in bytes of the single InnoDB Redo log file.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_log_file_size for details.
	InnodbLogFileSize *wrapperspb.Int64Value `protobuf:"bytes,24,opt,name=innodb_log_file_size,json=innodbLogFileSize,proto3" json:"innodb_log_file_size,omitempty"`
	// Limits IO available for InnoDB background tasks.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_io_capacity for details.
	InnodbIoCapacity *wrapperspb.Int64Value `protobuf:"bytes,25,opt,name=innodb_io_capacity,json=innodbIoCapacity,proto3" json:"innodb_io_capacity,omitempty"`
	// Limits IO available for InnoDB background tasks.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_io_capacity_max for details.
	InnodbIoCapacityMax *wrapperspb.Int64Value `protobuf:"bytes,26,opt,name=innodb_io_capacity_max,json=innodbIoCapacityMax,proto3" json:"innodb_io_capacity_max,omitempty"`
	// The number of I/O threads for read operations in InnoDB.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_read_io_threads for details.
	InnodbReadIoThreads *wrapperspb.Int64Value `protobuf:"bytes,27,opt,name=innodb_read_io_threads,json=innodbReadIoThreads,proto3" json:"innodb_read_io_threads,omitempty"`
	// The number of I/O threads for write operations in InnoDB.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_write_io_threads for details.
	InnodbWriteIoThreads *wrapperspb.Int64Value `protobuf:"bytes,28,opt,name=innodb_write_io_threads,json=innodbWriteIoThreads,proto3" json:"innodb_write_io_threads,omitempty"`
	// The number of background threads devoted to the InnoDB purge operation.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_purge_threads for details.
	InnodbPurgeThreads *wrapperspb.Int64Value `protobuf:"bytes,29,opt,name=innodb_purge_threads,json=innodbPurgeThreads,proto3" json:"innodb_purge_threads,omitempty"`
	// Defines the maximum number of threads permitted inside of InnoDB.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_thread_concurrency for details.
	InnodbThreadConcurrency *wrapperspb.Int64Value `protobuf:"bytes,30,opt,name=innodb_thread_concurrency,json=innodbThreadConcurrency,proto3" json:"innodb_thread_concurrency,omitempty"`
	// Limits the max size of InnoDB temp tablespace.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path for details.
	InnodbTempDataFileMaxSize *wrapperspb.Int64Value `protobuf:"bytes,31,opt,name=innodb_temp_data_file_max_size,json=innodbTempDataFileMaxSize,proto3" json:"innodb_temp_data_file_max_size,omitempty"`
	// A number of threads the server should cache for reuse.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_thread_cache_size) for details.
	ThreadCacheSize *wrapperspb.Int64Value `protobuf:"bytes,32,opt,name=thread_cache_size,json=threadCacheSize,proto3" json:"thread_cache_size,omitempty"`
	// The stack size for each thread. The default is large enough for normal operation.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_thread_stack) for details.
	ThreadStack *wrapperspb.Int64Value `protobuf:"bytes,33,opt,name=thread_stack,json=threadStack,proto3" json:"thread_stack,omitempty"`
	// The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_join_buffer_size) for details.
	JoinBufferSize *wrapperspb.Int64Value `protobuf:"bytes,34,opt,name=join_buffer_size,json=joinBufferSize,proto3" json:"join_buffer_size,omitempty"`
	// Each session that must perform a sort allocates a buffer of this size.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_sort_buffer_size) for details.
	SortBufferSize *wrapperspb.Int64Value `protobuf:"bytes,35,opt,name=sort_buffer_size,json=sortBufferSize,proto3" json:"sort_buffer_size,omitempty"`
	// The number of table definitions that can be stored in the definition cache.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_table_definition_cache) for details.
	TableDefinitionCache *wrapperspb.Int64Value `protobuf:"bytes,36,opt,name=table_definition_cache,json=tableDefinitionCache,proto3" json:"table_definition_cache,omitempty"`
	// The number of open tables for all threads.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_table_open_cache) for details.
	TableOpenCache *wrapperspb.Int64Value `protobuf:"bytes,37,opt,name=table_open_cache,json=tableOpenCache,proto3" json:"table_open_cache,omitempty"`
	// The number of open tables cache instances.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_table_open_cache_instances) for details.
	TableOpenCacheInstances *wrapperspb.Int64Value `protobuf:"bytes,38,opt,name=table_open_cache_instances,json=tableOpenCacheInstances,proto3" json:"table_open_cache_instances,omitempty"`
	// Determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp) for details.
	ExplicitDefaultsForTimestamp *wrapperspb.BoolValue `protobuf:"bytes,39,opt,name=explicit_defaults_for_timestamp,json=explicitDefaultsForTimestamp,proto3" json:"explicit_defaults_for_timestamp,omitempty"`
	// Can be used to control the operation of AUTO_INCREMENT columns.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/replication-options-master.html#sysvar_auto_increment_increment) for details.
	AutoIncrementIncrement *wrapperspb.Int64Value `protobuf:"bytes,40,opt,name=auto_increment_increment,json=autoIncrementIncrement,proto3" json:"auto_increment_increment,omitempty"`
	// Can be used to control the operation of AUTO_INCREMENT columns.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/replication-options-master.html#sysvar_auto_increment_offset) for details.
	AutoIncrementOffset *wrapperspb.Int64Value `protobuf:"bytes,41,opt,name=auto_increment_offset,json=autoIncrementOffset,proto3" json:"auto_increment_offset,omitempty"`
	// Controls how often the MySQL server synchronizes the binary log to disk.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_sync_binlog) for details.
	SyncBinlog *wrapperspb.Int64Value `protobuf:"bytes,42,opt,name=sync_binlog,json=syncBinlog,proto3" json:"sync_binlog,omitempty"`
	// The size of the cache to hold changes to the binary log during a transaction.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_cache_size) for details.
	BinlogCacheSize *wrapperspb.Int64Value `protobuf:"bytes,43,opt,name=binlog_cache_size,json=binlogCacheSize,proto3" json:"binlog_cache_size,omitempty"`
	// Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
	//
	// See [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay) for details.
	BinlogGroupCommitSyncDelay *wrapperspb.Int64Value `protobuf:"bytes,44,opt,name=binlog_group_commit_sync_delay,json=binlogGroupCommitSyncDelay,proto3" json:"binlog_group_commit_sync_delay,omitempty"`
	// For MySQL row-based replication, this variable determines how row images are written to the binary log.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_row_image) for details.
	BinlogRowImage MysqlConfig5_7_BinlogRowImage `protobuf:"varint,45,opt,name=binlog_row_image,json=binlogRowImage,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7_BinlogRowImage" json:"binlog_row_image,omitempty"`
	// When enabled, it causes the server to write informational log events such as row query log events into its binary log.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events) for details.
	BinlogRowsQueryLogEvents *wrapperspb.BoolValue `protobuf:"bytes,46,opt,name=binlog_rows_query_log_events,json=binlogRowsQueryLogEvents,proto3" json:"binlog_rows_query_log_events,omitempty"`
	// The number of replica acknowledgments the source must receive per transaction before proceeding.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/replication-options-master.html#sysvar_rpl_semi_sync_master_wait_for_slave_count) for details.
	RplSemiSyncMasterWaitForSlaveCount *wrapperspb.Int64Value `protobuf:"bytes,47,opt,name=rpl_semi_sync_master_wait_for_slave_count,json=rplSemiSyncMasterWaitForSlaveCount,proto3" json:"rpl_semi_sync_master_wait_for_slave_count,omitempty"`
	// When using a multi-threaded replica, this variable specifies the policy used to decide which transactions are allowed to execute in parallel on the replica.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/replication-options-replica.html#sysvar_slave_parallel_type) for details.
	SlaveParallelType MysqlConfig5_7_SlaveParallelType `protobuf:"varint,48,opt,name=slave_parallel_type,json=slaveParallelType,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7_SlaveParallelType" json:"slave_parallel_type,omitempty"`
	// Sets the number of applier threads for executing replication transactions in parallel.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/replication-options-replica.html#sysvar_slave_parallel_workers) for details.
	SlaveParallelWorkers *wrapperspb.Int64Value `protobuf:"bytes,49,opt,name=slave_parallel_workers,json=slaveParallelWorkers,proto3" json:"slave_parallel_workers,omitempty"`
	// The size of the binary log to hold.
	MdbPreserveBinlogBytes *wrapperspb.Int64Value `protobuf:"bytes,50,opt,name=mdb_preserve_binlog_bytes,json=mdbPreserveBinlogBytes,proto3" json:"mdb_preserve_binlog_bytes,omitempty"`
	// The number of seconds the server waits for activity on an interactive connection before closing it.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_interactive_timeout) for details.
	InteractiveTimeout *wrapperspb.Int64Value `protobuf:"bytes,51,opt,name=interactive_timeout,json=interactiveTimeout,proto3" json:"interactive_timeout,omitempty"`
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_wait_timeout) for details.
	WaitTimeout *wrapperspb.Int64Value `protobuf:"bytes,52,opt,name=wait_timeout,json=waitTimeout,proto3" json:"wait_timeout,omitempty"`
	// Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
	MdbOfflineModeEnableLag *wrapperspb.Int64Value `protobuf:"bytes,53,opt,name=mdb_offline_mode_enable_lag,json=mdbOfflineModeEnableLag,proto3" json:"mdb_offline_mode_enable_lag,omitempty"`
	// Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
	// Should be less than mdb_offline_mode_enable_lag value.
	MdbOfflineModeDisableLag *wrapperspb.Int64Value `protobuf:"bytes,54,opt,name=mdb_offline_mode_disable_lag,json=mdbOfflineModeDisableLag,proto3" json:"mdb_offline_mode_disable_lag,omitempty"`
	// The limit on memory consumption for the range optimizer.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size) for details.
	RangeOptimizerMaxMemSize *wrapperspb.Int64Value `protobuf:"bytes,55,opt,name=range_optimizer_max_mem_size,json=rangeOptimizerMaxMemSize,proto3" json:"range_optimizer_max_mem_size,omitempty"`
	// Manages slow query log.
	//
	// See [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_slow_query_log) for details.
	SlowQueryLog *wrapperspb.BoolValue `protobuf:"bytes,56,opt,name=slow_query_log,json=slowQueryLog,proto3" json:"slow_query_log,omitempty"`
	// Query execution time, after which query to be logged unconditionally, that is, `log_slow_rate_limit`` will not apply to it.
	//
	// See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#slow_query_log_always_write_time) for details.
	SlowQueryLogAlwaysWriteTime *wrapperspb.DoubleValue `protobuf:"bytes,57,opt,name=slow_query_log_always_write_time,json=slowQueryLogAlwaysWriteTime,proto3" json:"slow_query_log_always_write_time,omitempty"`
	// Specifies slow log granularity for `log_slow_rate_limit` values QUERY or SESSION.
	//
	// See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_type) for details.
	LogSlowRateType MysqlConfig5_7_LogSlowRateType `protobuf:"varint,58,opt,name=log_slow_rate_type,json=logSlowRateType,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7_LogSlowRateType" json:"log_slow_rate_type,omitempty"`
	// Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
	//
	// See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_rate_limit) for details.
	LogSlowRateLimit *wrapperspb.Int64Value `protobuf:"bytes,59,opt,name=log_slow_rate_limit,json=logSlowRateLimit,proto3" json:"log_slow_rate_limit,omitempty"`
	// When TRUE, statements executed by stored procedures are logged to the slow log.
	//
	// See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_sp_statements) for details.
	LogSlowSpStatements *wrapperspb.BoolValue `protobuf:"bytes,60,opt,name=log_slow_sp_statements,json=logSlowSpStatements,proto3" json:"log_slow_sp_statements,omitempty"`
	// Filters the slow log by the query's execution plan.
	//
	// See [Percona documentation](https://www.percona.com/doc/percona-server/8.0/diagnostics/slow_extended.html#log_slow_filter) for details.
	LogSlowFilter []MysqlConfig5_7_LogSlowFilterType `protobuf:"varint,61,rep,packed,name=log_slow_filter,json=logSlowFilter,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7_LogSlowFilterType" json:"log_slow_filter,omitempty"`
	// Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
	// Should be less than mdb_offline_mode_disable_lag.
	MdbPriorityChoiceMaxLag *wrapperspb.Int64Value `protobuf:"bytes,62,opt,name=mdb_priority_choice_max_lag,json=mdbPriorityChoiceMaxLag,proto3" json:"mdb_priority_choice_max_lag,omitempty"`
	// Specifies the page size for InnoDB tablespaces.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_page_size).
	InnodbPageSize *wrapperspb.Int64Value `protobuf:"bytes,63,opt,name=innodb_page_size,json=innodbPageSize,proto3" json:"innodb_page_size,omitempty"`
	// The limit in bytes on the size of the temporary log files used during online DDL operations
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size).
	InnodbOnlineAlterLogMaxSize *wrapperspb.Int64Value `protobuf:"bytes,64,opt,name=innodb_online_alter_log_max_size,json=innodbOnlineAlterLogMaxSize,proto3" json:"innodb_online_alter_log_max_size,omitempty"`
	// Minimum length of words that are stored in an InnoDB FULLTEXT index
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size).
	InnodbFtMinTokenSize *wrapperspb.Int64Value `protobuf:"bytes,65,opt,name=innodb_ft_min_token_size,json=innodbFtMinTokenSize,proto3" json:"innodb_ft_min_token_size,omitempty"`
	// Maximum length of words that are stored in an InnoDB FULLTEXT index
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size).
	InnodbFtMaxTokenSize *wrapperspb.Int64Value `protobuf:"bytes,66,opt,name=innodb_ft_max_token_size,json=innodbFtMaxTokenSize,proto3" json:"innodb_ft_max_token_size,omitempty"`
	// Table names storage and comparison strategy
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_lower_case_table_names).
	LowerCaseTableNames *wrapperspb.Int64Value `protobuf:"bytes,67,opt,name=lower_case_table_names,json=lowerCaseTableNames,proto3" json:"lower_case_table_names,omitempty"`
	// Manages MySQL 5.6 compatibility
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_show_compatibility_56).
	ShowCompatibility_56 *wrapperspb.BoolValue `protobuf:"bytes,68,opt,name=show_compatibility_56,json=showCompatibility_56,proto3" json:"show_compatibility_56,omitempty"`
	// The number of times that any given stored procedure may be called recursively.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
	MaxSpRecursionDepth *wrapperspb.Int64Value `protobuf:"bytes,69,opt,name=max_sp_recursion_depth,json=maxSpRecursionDepth,proto3" json:"max_sp_recursion_depth,omitempty"`
	// The level of zlib compression to use for InnoDB compressed tables and indexes.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_compression_level).
	InnodbCompressionLevel *wrapperspb.Int64Value `protobuf:"bytes,70,opt,name=innodb_compression_level,json=innodbCompressionLevel,proto3" json:"innodb_compression_level,omitempty"`
	// Specifies how the source mysqld generates the dependency information that it writes in the binary log to help replicas determine which transactions can be executed in parallel.
	//
	// For details, see [MySQL documentation for the variabl](https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_transaction_dependency_tracking).
	BinlogTransactionDependencyTracking MysqlConfig5_7_BinlogTransactionDependencyTracking `protobuf:"varint,71,opt,name=binlog_transaction_dependency_tracking,json=binlogTransactionDependencyTracking,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7_BinlogTransactionDependencyTracking" json:"binlog_transaction_dependency_tracking,omitempty"`
}

func (x *MysqlConfig5_7) Reset() {
	*x = MysqlConfig5_7{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlConfig5_7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlConfig5_7) ProtoMessage() {}

func (x *MysqlConfig5_7) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlConfig5_7.ProtoReflect.Descriptor instead.
func (*MysqlConfig5_7) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{0}
}

func (x *MysqlConfig5_7) GetInnodbBufferPoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbBufferPoolSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *MysqlConfig5_7) GetLongQueryTime() *wrapperspb.DoubleValue {
	if x != nil {
		return x.LongQueryTime
	}
	return nil
}

func (x *MysqlConfig5_7) GetGeneralLog() *wrapperspb.BoolValue {
	if x != nil {
		return x.GeneralLog
	}
	return nil
}

func (x *MysqlConfig5_7) GetAuditLog() *wrapperspb.BoolValue {
	if x != nil {
		return x.AuditLog
	}
	return nil
}

func (x *MysqlConfig5_7) GetSqlMode() []MysqlConfig5_7_SQLMode {
	if x != nil {
		return x.SqlMode
	}
	return nil
}

func (x *MysqlConfig5_7) GetMaxAllowedPacket() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxAllowedPacket
	}
	return nil
}

func (x *MysqlConfig5_7) GetDefaultAuthenticationPlugin() MysqlConfig5_7_AuthPlugin {
	if x != nil {
		return x.DefaultAuthenticationPlugin
	}
	return MysqlConfig5_7_AUTH_PLUGIN_UNSPECIFIED
}

func (x *MysqlConfig5_7) GetInnodbFlushLogAtTrxCommit() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbFlushLogAtTrxCommit
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbLockWaitTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbLockWaitTimeout
	}
	return nil
}

func (x *MysqlConfig5_7) GetTransactionIsolation() MysqlConfig5_7_TransactionIsolation {
	if x != nil {
		return x.TransactionIsolation
	}
	return MysqlConfig5_7_TRANSACTION_ISOLATION_UNSPECIFIED
}

func (x *MysqlConfig5_7) GetInnodbPrintAllDeadlocks() *wrapperspb.BoolValue {
	if x != nil {
		return x.InnodbPrintAllDeadlocks
	}
	return nil
}

func (x *MysqlConfig5_7) GetNetReadTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.NetReadTimeout
	}
	return nil
}

func (x *MysqlConfig5_7) GetNetWriteTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.NetWriteTimeout
	}
	return nil
}

func (x *MysqlConfig5_7) GetGroupConcatMaxLen() *wrapperspb.Int64Value {
	if x != nil {
		return x.GroupConcatMaxLen
	}
	return nil
}

func (x *MysqlConfig5_7) GetTmpTableSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.TmpTableSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetMaxHeapTableSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxHeapTableSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetDefaultTimeZone() string {
	if x != nil {
		return x.DefaultTimeZone
	}
	return ""
}

func (x *MysqlConfig5_7) GetCharacterSetServer() string {
	if x != nil {
		return x.CharacterSetServer
	}
	return ""
}

func (x *MysqlConfig5_7) GetCollationServer() string {
	if x != nil {
		return x.CollationServer
	}
	return ""
}

func (x *MysqlConfig5_7) GetInnodbAdaptiveHashIndex() *wrapperspb.BoolValue {
	if x != nil {
		return x.InnodbAdaptiveHashIndex
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbNumaInterleave() *wrapperspb.BoolValue {
	if x != nil {
		return x.InnodbNumaInterleave
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbLogBufferSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbLogBufferSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbLogFileSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbLogFileSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbIoCapacity() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbIoCapacity
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbIoCapacityMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbIoCapacityMax
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbReadIoThreads() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbReadIoThreads
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbWriteIoThreads() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbWriteIoThreads
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbPurgeThreads() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbPurgeThreads
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbThreadConcurrency() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbThreadConcurrency
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbTempDataFileMaxSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbTempDataFileMaxSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetThreadCacheSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.ThreadCacheSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetThreadStack() *wrapperspb.Int64Value {
	if x != nil {
		return x.ThreadStack
	}
	return nil
}

func (x *MysqlConfig5_7) GetJoinBufferSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.JoinBufferSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetSortBufferSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.SortBufferSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetTableDefinitionCache() *wrapperspb.Int64Value {
	if x != nil {
		return x.TableDefinitionCache
	}
	return nil
}

func (x *MysqlConfig5_7) GetTableOpenCache() *wrapperspb.Int64Value {
	if x != nil {
		return x.TableOpenCache
	}
	return nil
}

func (x *MysqlConfig5_7) GetTableOpenCacheInstances() *wrapperspb.Int64Value {
	if x != nil {
		return x.TableOpenCacheInstances
	}
	return nil
}

func (x *MysqlConfig5_7) GetExplicitDefaultsForTimestamp() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExplicitDefaultsForTimestamp
	}
	return nil
}

func (x *MysqlConfig5_7) GetAutoIncrementIncrement() *wrapperspb.Int64Value {
	if x != nil {
		return x.AutoIncrementIncrement
	}
	return nil
}

func (x *MysqlConfig5_7) GetAutoIncrementOffset() *wrapperspb.Int64Value {
	if x != nil {
		return x.AutoIncrementOffset
	}
	return nil
}

func (x *MysqlConfig5_7) GetSyncBinlog() *wrapperspb.Int64Value {
	if x != nil {
		return x.SyncBinlog
	}
	return nil
}

func (x *MysqlConfig5_7) GetBinlogCacheSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BinlogCacheSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetBinlogGroupCommitSyncDelay() *wrapperspb.Int64Value {
	if x != nil {
		return x.BinlogGroupCommitSyncDelay
	}
	return nil
}

func (x *MysqlConfig5_7) GetBinlogRowImage() MysqlConfig5_7_BinlogRowImage {
	if x != nil {
		return x.BinlogRowImage
	}
	return MysqlConfig5_7_BINLOG_ROW_IMAGE_UNSPECIFIED
}

func (x *MysqlConfig5_7) GetBinlogRowsQueryLogEvents() *wrapperspb.BoolValue {
	if x != nil {
		return x.BinlogRowsQueryLogEvents
	}
	return nil
}

func (x *MysqlConfig5_7) GetRplSemiSyncMasterWaitForSlaveCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.RplSemiSyncMasterWaitForSlaveCount
	}
	return nil
}

func (x *MysqlConfig5_7) GetSlaveParallelType() MysqlConfig5_7_SlaveParallelType {
	if x != nil {
		return x.SlaveParallelType
	}
	return MysqlConfig5_7_SLAVE_PARALLEL_TYPE_UNSPECIFIED
}

func (x *MysqlConfig5_7) GetSlaveParallelWorkers() *wrapperspb.Int64Value {
	if x != nil {
		return x.SlaveParallelWorkers
	}
	return nil
}

func (x *MysqlConfig5_7) GetMdbPreserveBinlogBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.MdbPreserveBinlogBytes
	}
	return nil
}

func (x *MysqlConfig5_7) GetInteractiveTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.InteractiveTimeout
	}
	return nil
}

func (x *MysqlConfig5_7) GetWaitTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.WaitTimeout
	}
	return nil
}

func (x *MysqlConfig5_7) GetMdbOfflineModeEnableLag() *wrapperspb.Int64Value {
	if x != nil {
		return x.MdbOfflineModeEnableLag
	}
	return nil
}

func (x *MysqlConfig5_7) GetMdbOfflineModeDisableLag() *wrapperspb.Int64Value {
	if x != nil {
		return x.MdbOfflineModeDisableLag
	}
	return nil
}

func (x *MysqlConfig5_7) GetRangeOptimizerMaxMemSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.RangeOptimizerMaxMemSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetSlowQueryLog() *wrapperspb.BoolValue {
	if x != nil {
		return x.SlowQueryLog
	}
	return nil
}

func (x *MysqlConfig5_7) GetSlowQueryLogAlwaysWriteTime() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SlowQueryLogAlwaysWriteTime
	}
	return nil
}

func (x *MysqlConfig5_7) GetLogSlowRateType() MysqlConfig5_7_LogSlowRateType {
	if x != nil {
		return x.LogSlowRateType
	}
	return MysqlConfig5_7_LOG_SLOW_RATE_TYPE_UNSPECIFIED
}

func (x *MysqlConfig5_7) GetLogSlowRateLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.LogSlowRateLimit
	}
	return nil
}

func (x *MysqlConfig5_7) GetLogSlowSpStatements() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogSlowSpStatements
	}
	return nil
}

func (x *MysqlConfig5_7) GetLogSlowFilter() []MysqlConfig5_7_LogSlowFilterType {
	if x != nil {
		return x.LogSlowFilter
	}
	return nil
}

func (x *MysqlConfig5_7) GetMdbPriorityChoiceMaxLag() *wrapperspb.Int64Value {
	if x != nil {
		return x.MdbPriorityChoiceMaxLag
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbPageSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbPageSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbOnlineAlterLogMaxSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbOnlineAlterLogMaxSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbFtMinTokenSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbFtMinTokenSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbFtMaxTokenSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbFtMaxTokenSize
	}
	return nil
}

func (x *MysqlConfig5_7) GetLowerCaseTableNames() *wrapperspb.Int64Value {
	if x != nil {
		return x.LowerCaseTableNames
	}
	return nil
}

func (x *MysqlConfig5_7) GetShowCompatibility_56() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowCompatibility_56
	}
	return nil
}

func (x *MysqlConfig5_7) GetMaxSpRecursionDepth() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSpRecursionDepth
	}
	return nil
}

func (x *MysqlConfig5_7) GetInnodbCompressionLevel() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbCompressionLevel
	}
	return nil
}

func (x *MysqlConfig5_7) GetBinlogTransactionDependencyTracking() MysqlConfig5_7_BinlogTransactionDependencyTracking {
	if x != nil {
		return x.BinlogTransactionDependencyTracking
	}
	return MysqlConfig5_7_BINLOG_TRANSACTION_DEPENDENCY_TRACKING_UNSPECIFIED
}

type MysqlConfigSet5_7 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for a MySQL 5.7 cluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *MysqlConfig5_7 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a MySQL 5.7 cluster.
	UserConfig *MysqlConfig5_7 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a MySQL 5.7 cluster.
	DefaultConfig *MysqlConfig5_7 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *MysqlConfigSet5_7) Reset() {
	*x = MysqlConfigSet5_7{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlConfigSet5_7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlConfigSet5_7) ProtoMessage() {}

func (x *MysqlConfigSet5_7) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlConfigSet5_7.ProtoReflect.Descriptor instead.
func (*MysqlConfigSet5_7) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP(), []int{1}
}

func (x *MysqlConfigSet5_7) GetEffectiveConfig() *MysqlConfig5_7 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *MysqlConfigSet5_7) GetUserConfig() *MysqlConfig5_7 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *MysqlConfigSet5_7) GetDefaultConfig() *MysqlConfig5_7 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

var File_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x35, 0x5f, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8f, 0x40, 0x0a, 0x0e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x35, 0x5f, 0x37, 0x12, 0x61, 0x0a, 0x17, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0xc7, 0x31, 0x09, 0x3e, 0x3d, 0x35, 0x32, 0x34, 0x32, 0x38,
	0x38, 0x30, 0x52, 0x14, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c,
	0xfa, 0xc7, 0x31, 0x08, 0x31, 0x30, 0x2d, 0x31, 0x36, 0x33, 0x38, 0x34, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x0f,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x33, 0x36, 0x30, 0x30, 0x52,
	0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x37, 0x0a, 0x09, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x12, 0x53, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x35, 0x5f, 0x37, 0x2e, 0x53, 0x51, 0x4c, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x13, 0xfa, 0xc7, 0x31, 0x0f, 0x31, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x30, 0x37,
	0x33, 0x37, 0x34, 0x31, 0x38, 0x32, 0x34, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x7f, 0x0a, 0x1d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x35,
	0x5f, 0x37, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x1b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x67, 0x0a, 0x1e, 0x69, 0x6e,
	0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x61,
	0x74, 0x5f, 0x74, 0x72, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0xfa, 0xc7, 0x31, 0x03, 0x31, 0x2d, 0x32, 0x52, 0x19, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x41, 0x74, 0x54, 0x72, 0x78, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x61, 0x0a, 0x18, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x31, 0x2d, 0x32, 0x38, 0x38, 0x30, 0x30, 0x52,
	0x15, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x7a, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x35, 0x5f, 0x37, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x1a, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x6e,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x31, 0x2d, 0x31, 0x32, 0x30, 0x30, 0x52, 0x0e,
	0x6e, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x53,
	0x0a, 0x11, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x31, 0x2d, 0x31, 0x32,
	0x30, 0x30, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x5c, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e,
	0xfa, 0xc7, 0x31, 0x0a, 0x34, 0x2d, 0x33, 0x33, 0x35, 0x35, 0x34, 0x34, 0x33, 0x32, 0x52, 0x11,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x4d, 0x61, 0x78, 0x4c, 0x65,
	0x6e, 0x12, 0x55, 0x0a, 0x0e, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0xfa, 0xc7, 0x31, 0x0e, 0x31, 0x30, 0x32, 0x34,
	0x2d, 0x35, 0x33, 0x36, 0x38, 0x37, 0x30, 0x39, 0x31, 0x32, 0x52, 0x0c, 0x74, 0x6d, 0x70, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5f, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f,
	0x68, 0x65, 0x61, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x13, 0xfa, 0xc7, 0x31, 0x0f, 0x31, 0x36, 0x33, 0x38, 0x34, 0x2d, 0x35, 0x33,
	0x36, 0x38, 0x37, 0x30, 0x39, 0x31, 0x32, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x57, 0x0a, 0x1a, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x50, 0x0a, 0x16, 0x69,
	0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x4e,
	0x75, 0x6d, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x67, 0x0a,
	0x16, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x15, 0xfa, 0xc7, 0x31, 0x11,
	0x31, 0x30, 0x34, 0x38, 0x35, 0x37, 0x36, 0x2d, 0x32, 0x36, 0x38, 0x34, 0x33, 0x35, 0x34, 0x35,
	0x36, 0x52, 0x13, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x4c, 0x6f, 0x67, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x66, 0x0a, 0x14, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x18, 0xfa, 0xc7, 0x31, 0x14, 0x32, 0x36, 0x38, 0x34, 0x33, 0x35, 0x34, 0x35, 0x36,
	0x2d, 0x34, 0x32, 0x39, 0x34, 0x39, 0x36, 0x37, 0x32, 0x39, 0x36, 0x52, 0x11, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x62, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x59,
	0x0a, 0x12, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a, 0x31, 0x30, 0x30,
	0x2d, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x10, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49,
	0x6f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x16, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x62, 0x5f, 0x69, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a, 0x31, 0x30, 0x30, 0x2d,
	0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x13, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x49, 0x6f,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x5a, 0x0a, 0x16, 0x69,
	0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6f, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x31, 0x2d,
	0x31, 0x36, 0x52, 0x13, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6f,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x17, 0x69, 0x6e, 0x6e, 0x6f, 0x64,
	0x62, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x31, 0x2d, 0x31, 0x36, 0x52,
	0x14, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f,
	0x70, 0x75, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x31, 0x2d, 0x31, 0x36, 0x52, 0x12, 0x69, 0x6e, 0x6e, 0x6f,
	0x64, 0x62, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x63,
	0x0a, 0x19, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a,
	0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x17, 0x69, 0x6e, 0x6e, 0x6f,
	0x64, 0x62, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x72, 0x0a, 0x1e, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0xfa, 0xc7, 0x31, 0x0e, 0x30, 0x2d,
	0x31, 0x30, 0x37, 0x33, 0x37, 0x34, 0x31, 0x38, 0x32, 0x34, 0x30, 0x30, 0x52, 0x19, 0x69, 0x6e,
	0x6e, 0x6f, 0x64, 0x62, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65,
	0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0c, 0xfa, 0xc7, 0x31, 0x08, 0x31, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x53,
	0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x13, 0xfa, 0xc7, 0x31, 0x0f, 0x31, 0x33, 0x31, 0x30, 0x37, 0x32, 0x2d, 0x31, 0x36,
	0x37, 0x37, 0x37, 0x32, 0x31, 0x36, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x58, 0x0a, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0xfa, 0xc7, 0x31, 0x0d,
	0x31, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x36, 0x52, 0x0e, 0x6a,
	0x6f, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x58, 0x0a,
	0x10, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0xfa, 0xc7, 0x31, 0x0d, 0x31, 0x30, 0x32, 0x34, 0x2d, 0x31,
	0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x36, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a, 0x34, 0x30, 0x30, 0x2d, 0x35, 0x32,
	0x34, 0x32, 0x38, 0x38, 0x52, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a, 0x34, 0x30, 0x30, 0x2d, 0x35, 0x32, 0x34, 0x32, 0x38,
	0x38, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x62, 0x0a, 0x1a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x31, 0x2d, 0x33, 0x32, 0x52, 0x17, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x1f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x62, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x31, 0x2d, 0x36,
	0x35, 0x35, 0x33, 0x35, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x15,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x31, 0x2d,
	0x36, 0x35, 0x35, 0x33, 0x35, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7,
	0x31, 0x06, 0x30, 0x2d, 0x34, 0x30, 0x39, 0x36, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x12, 0x5a, 0x0a, 0x11, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0xfa, 0xc7,
	0x31, 0x0d, 0x34, 0x30, 0x39, 0x36, 0x2d, 0x36, 0x37, 0x31, 0x30, 0x38, 0x38, 0x36, 0x34, 0x52,
	0x0f, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x6c, 0x0a, 0x1e, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x30, 0x2d, 0x35, 0x30, 0x30,
	0x30, 0x30, 0x52, 0x1a, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x69,
	0x0a, 0x10, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x35, 0x5f, 0x37, 0x2e, 0x42, 0x69, 0x6e, 0x6c, 0x6f,
	0x67, 0x52, 0x6f, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x6c, 0x6f,
	0x67, 0x52, 0x6f, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x1c, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x52, 0x6f, 0x77, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x7b, 0x0a, 0x29, 0x72, 0x70, 0x6c, 0x5f, 0x73, 0x65, 0x6d,
	0x69, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0xc7, 0x31, 0x03, 0x31, 0x2d, 0x32, 0x52, 0x22,
	0x72, 0x70, 0x6c, 0x53, 0x65, 0x6d, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x72, 0x0a, 0x13, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x35, 0x5f,
	0x37, 0x2e, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x11, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x30, 0x2d, 0x36, 0x34, 0x52, 0x14, 0x73,
	0x6c, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x19, 0x6d, 0x64, 0x62, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x1c, 0xfa, 0xc7, 0x31, 0x18, 0x31, 0x30, 0x37, 0x33, 0x37, 0x34, 0x31,
	0x38, 0x32, 0x34, 0x2d, 0x31, 0x30, 0x39, 0x39, 0x35, 0x31, 0x31, 0x36, 0x32, 0x37, 0x37, 0x37,
	0x36, 0x52, 0x16, 0x6d, 0x64, 0x62, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x13, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0xc7, 0x31, 0x09, 0x36, 0x30, 0x30, 0x2d, 0x38, 0x36, 0x34,
	0x30, 0x30, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0xfa, 0xc7, 0x31, 0x09, 0x36,
	0x30, 0x30, 0x2d, 0x38, 0x36, 0x34, 0x30, 0x30, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x69, 0x0a, 0x1b, 0x6d, 0x64, 0x62, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6c, 0x61, 0x67, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a, 0x36, 0x30, 0x30,
	0x2d, 0x34, 0x33, 0x32, 0x30, 0x30, 0x30, 0x52, 0x17, 0x6d, 0x64, 0x62, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x67,
	0x12, 0x69, 0x0a, 0x1c, 0x6d, 0x64, 0x62, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x67,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0c, 0xfa, 0xc7, 0x31, 0x08, 0x36, 0x30, 0x2d, 0x38, 0x36, 0x34, 0x30,
	0x30, 0x52, 0x18, 0x6d, 0x64, 0x62, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x67, 0x12, 0x72, 0x0a, 0x1c, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x15,
	0xfa, 0xc7, 0x31, 0x11, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37, 0x36, 0x2d, 0x32, 0x36, 0x38, 0x34,
	0x33, 0x35, 0x34, 0x35, 0x36, 0x52, 0x18, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x40, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f,
	0x67, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f,
	0x67, 0x12, 0x63, 0x0a, 0x20, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x73, 0x6c, 0x6f, 0x77, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6c,
	0x6f, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x35, 0x5f, 0x37, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6c, 0x6f,
	0x77, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x31, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x10, 0x6c, 0x6f, 0x67,
	0x53, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4f, 0x0a,
	0x16, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6c, 0x6f, 0x67, 0x53, 0x6c,
	0x6f, 0x77, 0x53, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6a,
	0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x35, 0x5f, 0x37, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x6c, 0x6f,
	0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x53, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x1b, 0x6d, 0x64,
	0x62, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x67, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0xc7,
	0x31, 0x07, 0x30, 0x2d, 0x38, 0x36, 0x34, 0x30, 0x30, 0x52, 0x17, 0x6d, 0x64, 0x62, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x4c,
	0x61, 0x67, 0x12, 0x55, 0x0a, 0x10, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a, 0x34,
	0x30, 0x39, 0x36, 0x2d, 0x36, 0x35, 0x35, 0x33, 0x36, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x6f, 0x64,
	0x62, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x7a, 0x0a, 0x20, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x62, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x16, 0xfa, 0xc7, 0x31, 0x12, 0x36, 0x35, 0x35, 0x33, 0x36, 0x2d, 0x31, 0x30, 0x37, 0x33,
	0x37, 0x34, 0x31, 0x38, 0x32, 0x34, 0x30, 0x30, 0x52, 0x1b, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x4d, 0x61,
	0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f,
	0x66, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x30, 0x2d, 0x31, 0x36, 0x52, 0x14,
	0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x46, 0x74, 0x4d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x5e, 0x0a, 0x18, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x66,
	0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x31, 0x30, 0x2d, 0x38, 0x34, 0x52, 0x14,
	0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x46, 0x74, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x07, 0xfa, 0xc7, 0x31, 0x03, 0x30, 0x2d, 0x31, 0x52, 0x13, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x4f, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x35, 0x36, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x73, 0x68, 0x6f, 0x77,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x35, 0x36,
	0x12, 0x5b, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0xfa,
	0xc7, 0x31, 0x05, 0x30, 0x2d, 0x32, 0x35, 0x35, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x5e, 0x0a,
	0x18, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0xc7,
	0x31, 0x03, 0x30, 0x2d, 0x39, 0x52, 0x16, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x62, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0xa9, 0x01,
	0x0a, 0x26, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x35, 0x5f, 0x37,
	0x2e, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x23, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x99, 0x05, 0x0a, 0x07, 0x53, 0x51,
	0x4c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x51, 0x4c, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4e, 0x53, 0x49, 0x5f,
	0x51, 0x55, 0x4f, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x59, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x49, 0x47, 0x48,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x06, 0x12, 0x18,
	0x0a, 0x14, 0x4e, 0x4f, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x45,
	0x53, 0x43, 0x41, 0x50, 0x45, 0x53, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x45,
	0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x49, 0x54, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x49, 0x47,
	0x4e, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x09, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x49,
	0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0c, 0x12, 0x12,
	0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x4e, 0x4c, 0x59,
	0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x10, 0x0f,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x54, 0x4f, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x10, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x49, 0x50, 0x45, 0x53, 0x5f, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54,
	0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x41, 0x53, 0x5f, 0x46, 0x4c,
	0x4f, 0x41, 0x54, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x53, 0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x4e, 0x53, 0x49, 0x10, 0x15, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x16,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x42, 0x32, 0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x58,
	0x44, 0x42, 0x10, 0x18, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x53, 0x53, 0x51, 0x4c, 0x10, 0x19, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x33, 0x32, 0x33, 0x10, 0x1a, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x34, 0x30, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52,
	0x41, 0x43, 0x4c, 0x45, 0x10, 0x1c, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52,
	0x45, 0x53, 0x51, 0x4c, 0x10, 0x1d, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x1e, 0x12,
	0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0x1f, 0x22, 0x78, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x4c, 0x55, 0x47,
	0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x15, 0x43,
	0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x22,
	0x78, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x55, 0x0a, 0x0e, 0x42, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x52, 0x6f, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x42,
	0x49, 0x4e, 0x4c, 0x4f, 0x47, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e, 0x49, 0x4d,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x03,
	0x22, 0x59, 0x0a, 0x11, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x22, 0x4d, 0x0a, 0x0f, 0x4c,
	0x6f, 0x67, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x4c,
	0x6f, 0x67, 0x53, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x53,
	0x43, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4a, 0x4f,
	0x49, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4d, 0x50, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4d, 0x50, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49,
	0x4c, 0x45, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x45,
	0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x06, 0x22, 0x93,
	0x01, 0x0a, 0x23, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x32, 0x42, 0x49, 0x4e, 0x4c, 0x4f, 0x47,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x50,
	0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x22, 0x9c, 0x02, 0x0a, 0x11, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x35, 0x5f, 0x37, 0x12, 0x5b, 0x0a, 0x10, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x35, 0x5f, 0x37, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x35, 0x5f, 0x37, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x35, 0x5f, 0x37, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x72, 0x0a, 0x24, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5a, 0x4a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x64,
	0x62, 0x2f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x3b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescData = file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDesc
)

func file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDescData
}

var file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_goTypes = []interface{}{
	(MysqlConfig5_7_SQLMode)(0),                             // 0: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode
	(MysqlConfig5_7_AuthPlugin)(0),                          // 1: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin
	(MysqlConfig5_7_TransactionIsolation)(0),                // 2: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation
	(MysqlConfig5_7_BinlogRowImage)(0),                      // 3: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.BinlogRowImage
	(MysqlConfig5_7_SlaveParallelType)(0),                   // 4: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SlaveParallelType
	(MysqlConfig5_7_LogSlowRateType)(0),                     // 5: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.LogSlowRateType
	(MysqlConfig5_7_LogSlowFilterType)(0),                   // 6: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.LogSlowFilterType
	(MysqlConfig5_7_BinlogTransactionDependencyTracking)(0), // 7: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.BinlogTransactionDependencyTracking
	(*MysqlConfig5_7)(nil),                                  // 8: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7
	(*MysqlConfigSet5_7)(nil),                               // 9: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7
	(*wrapperspb.Int64Value)(nil),                           // 10: google.protobuf.Int64Value
	(*wrapperspb.DoubleValue)(nil),                          // 11: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),                            // 12: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_depIdxs = []int32{
	10, // 0: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_buffer_pool_size:type_name -> google.protobuf.Int64Value
	10, // 1: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.max_connections:type_name -> google.protobuf.Int64Value
	11, // 2: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.long_query_time:type_name -> google.protobuf.DoubleValue
	12, // 3: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.general_log:type_name -> google.protobuf.BoolValue
	12, // 4: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.audit_log:type_name -> google.protobuf.BoolValue
	0,  // 5: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.sql_mode:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SQLMode
	10, // 6: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.max_allowed_packet:type_name -> google.protobuf.Int64Value
	1,  // 7: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.default_authentication_plugin:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.AuthPlugin
	10, // 8: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_flush_log_at_trx_commit:type_name -> google.protobuf.Int64Value
	10, // 9: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_lock_wait_timeout:type_name -> google.protobuf.Int64Value
	2,  // 10: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.transaction_isolation:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.TransactionIsolation
	12, // 11: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_print_all_deadlocks:type_name -> google.protobuf.BoolValue
	10, // 12: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.net_read_timeout:type_name -> google.protobuf.Int64Value
	10, // 13: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.net_write_timeout:type_name -> google.protobuf.Int64Value
	10, // 14: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.group_concat_max_len:type_name -> google.protobuf.Int64Value
	10, // 15: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.tmp_table_size:type_name -> google.protobuf.Int64Value
	10, // 16: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.max_heap_table_size:type_name -> google.protobuf.Int64Value
	12, // 17: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_adaptive_hash_index:type_name -> google.protobuf.BoolValue
	12, // 18: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_numa_interleave:type_name -> google.protobuf.BoolValue
	10, // 19: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_log_buffer_size:type_name -> google.protobuf.Int64Value
	10, // 20: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_log_file_size:type_name -> google.protobuf.Int64Value
	10, // 21: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_io_capacity:type_name -> google.protobuf.Int64Value
	10, // 22: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_io_capacity_max:type_name -> google.protobuf.Int64Value
	10, // 23: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_read_io_threads:type_name -> google.protobuf.Int64Value
	10, // 24: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_write_io_threads:type_name -> google.protobuf.Int64Value
	10, // 25: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_purge_threads:type_name -> google.protobuf.Int64Value
	10, // 26: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_thread_concurrency:type_name -> google.protobuf.Int64Value
	10, // 27: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_temp_data_file_max_size:type_name -> google.protobuf.Int64Value
	10, // 28: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.thread_cache_size:type_name -> google.protobuf.Int64Value
	10, // 29: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.thread_stack:type_name -> google.protobuf.Int64Value
	10, // 30: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.join_buffer_size:type_name -> google.protobuf.Int64Value
	10, // 31: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.sort_buffer_size:type_name -> google.protobuf.Int64Value
	10, // 32: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.table_definition_cache:type_name -> google.protobuf.Int64Value
	10, // 33: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.table_open_cache:type_name -> google.protobuf.Int64Value
	10, // 34: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.table_open_cache_instances:type_name -> google.protobuf.Int64Value
	12, // 35: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.explicit_defaults_for_timestamp:type_name -> google.protobuf.BoolValue
	10, // 36: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.auto_increment_increment:type_name -> google.protobuf.Int64Value
	10, // 37: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.auto_increment_offset:type_name -> google.protobuf.Int64Value
	10, // 38: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.sync_binlog:type_name -> google.protobuf.Int64Value
	10, // 39: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.binlog_cache_size:type_name -> google.protobuf.Int64Value
	10, // 40: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.binlog_group_commit_sync_delay:type_name -> google.protobuf.Int64Value
	3,  // 41: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.binlog_row_image:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.BinlogRowImage
	12, // 42: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.binlog_rows_query_log_events:type_name -> google.protobuf.BoolValue
	10, // 43: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.rpl_semi_sync_master_wait_for_slave_count:type_name -> google.protobuf.Int64Value
	4,  // 44: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.slave_parallel_type:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.SlaveParallelType
	10, // 45: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.slave_parallel_workers:type_name -> google.protobuf.Int64Value
	10, // 46: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.mdb_preserve_binlog_bytes:type_name -> google.protobuf.Int64Value
	10, // 47: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.interactive_timeout:type_name -> google.protobuf.Int64Value
	10, // 48: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.wait_timeout:type_name -> google.protobuf.Int64Value
	10, // 49: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.mdb_offline_mode_enable_lag:type_name -> google.protobuf.Int64Value
	10, // 50: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.mdb_offline_mode_disable_lag:type_name -> google.protobuf.Int64Value
	10, // 51: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.range_optimizer_max_mem_size:type_name -> google.protobuf.Int64Value
	12, // 52: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.slow_query_log:type_name -> google.protobuf.BoolValue
	11, // 53: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.slow_query_log_always_write_time:type_name -> google.protobuf.DoubleValue
	5,  // 54: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.log_slow_rate_type:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.LogSlowRateType
	10, // 55: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.log_slow_rate_limit:type_name -> google.protobuf.Int64Value
	12, // 56: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.log_slow_sp_statements:type_name -> google.protobuf.BoolValue
	6,  // 57: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.log_slow_filter:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.LogSlowFilterType
	10, // 58: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.mdb_priority_choice_max_lag:type_name -> google.protobuf.Int64Value
	10, // 59: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_page_size:type_name -> google.protobuf.Int64Value
	10, // 60: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_online_alter_log_max_size:type_name -> google.protobuf.Int64Value
	10, // 61: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_ft_min_token_size:type_name -> google.protobuf.Int64Value
	10, // 62: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_ft_max_token_size:type_name -> google.protobuf.Int64Value
	10, // 63: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.lower_case_table_names:type_name -> google.protobuf.Int64Value
	12, // 64: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.show_compatibility_56:type_name -> google.protobuf.BoolValue
	10, // 65: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.max_sp_recursion_depth:type_name -> google.protobuf.Int64Value
	10, // 66: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.innodb_compression_level:type_name -> google.protobuf.Int64Value
	7,  // 67: yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.binlog_transaction_dependency_tracking:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7.BinlogTransactionDependencyTracking
	8,  // 68: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7.effective_config:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7
	8,  // 69: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7.user_config:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7
	8,  // 70: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet5_7.default_config:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig5_7
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_init() }
func file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_init() {
	if File_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlConfig5_7); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlConfigSet5_7); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto = out.File
	file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_rawDesc = nil
	file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_goTypes = nil
	file_yandex_cloud_mdb_mysql_v1_config_mysql5_7_proto_depIdxs = nil
}
