// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/mdb/mongodb/v1/config/mongodb.proto

package mongodb

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor int32

const (
	MongodConfig_Storage_WiredTiger_CollectionConfig_COMPRESSOR_UNSPECIFIED MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor = 0
	// No compression.
	MongodConfig_Storage_WiredTiger_CollectionConfig_NONE MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor = 1
	// The [Snappy](https://docs.mongodb.com/v7.0/reference/glossary/#std-term-snappy) compression.
	MongodConfig_Storage_WiredTiger_CollectionConfig_SNAPPY MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor = 2
	// The [zlib](https://docs.mongodb.com/v7.0/reference/glossary/#std-term-zlib) compression.
	MongodConfig_Storage_WiredTiger_CollectionConfig_ZLIB MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor = 3
	// The [zstd](https://docs.mongodb.com/v7.0/reference/glossary/#std-term-zstd) compression.
	MongodConfig_Storage_WiredTiger_CollectionConfig_ZSTD MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor = 4
)

// Enum value maps for MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor.
var (
	MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor_name = map[int32]string{
		0: "COMPRESSOR_UNSPECIFIED",
		1: "NONE",
		2: "SNAPPY",
		3: "ZLIB",
		4: "ZSTD",
	}
	MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor_value = map[string]int32{
		"COMPRESSOR_UNSPECIFIED": 0,
		"NONE":                   1,
		"SNAPPY":                 2,
		"ZLIB":                   3,
		"ZSTD":                   4,
	}
)

func (x MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor) Enum() *MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor {
	p := new(MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor)
	*p = x
	return p
}

func (x MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_enumTypes[0].Descriptor()
}

func (MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_enumTypes[0]
}

func (x MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor.Descriptor instead.
func (MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

type MongodConfig_OperationProfiling_Mode int32

const (
	MongodConfig_OperationProfiling_MODE_UNSPECIFIED MongodConfig_OperationProfiling_Mode = 0
	// The profiler is off and does not collect any data.
	MongodConfig_OperationProfiling_OFF MongodConfig_OperationProfiling_Mode = 1
	// The profiler collects data for operations that take longer than the value of [slow_op_threshold].
	MongodConfig_OperationProfiling_SLOW_OP MongodConfig_OperationProfiling_Mode = 2
	// The profiler collects data for all operations.
	MongodConfig_OperationProfiling_ALL MongodConfig_OperationProfiling_Mode = 3
)

// Enum value maps for MongodConfig_OperationProfiling_Mode.
var (
	MongodConfig_OperationProfiling_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "OFF",
		2: "SLOW_OP",
		3: "ALL",
	}
	MongodConfig_OperationProfiling_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"OFF":              1,
		"SLOW_OP":          2,
		"ALL":              3,
	}
)

func (x MongodConfig_OperationProfiling_Mode) Enum() *MongodConfig_OperationProfiling_Mode {
	p := new(MongodConfig_OperationProfiling_Mode)
	*p = x
	return p
}

func (x MongodConfig_OperationProfiling_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MongodConfig_OperationProfiling_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_enumTypes[1].Descriptor()
}

func (MongodConfig_OperationProfiling_Mode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_enumTypes[1]
}

func (x MongodConfig_OperationProfiling_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MongodConfig_OperationProfiling_Mode.Descriptor instead.
func (MongodConfig_OperationProfiling_Mode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 1, 0}
}

type MongodConfig_Network_Compression_Compressor int32

const (
	MongodConfig_Network_Compression_COMPRESSOR_UNSPECIFIED MongodConfig_Network_Compression_Compressor = 0
	// The [Snappy](https://docs.mongodb.com/v4.2/reference/glossary/#term-snappy) compression.
	MongodConfig_Network_Compression_SNAPPY MongodConfig_Network_Compression_Compressor = 1
	// The [zlib](https://docs.mongodb.com/v4.2/reference/glossary/#term-zlib) compression.
	MongodConfig_Network_Compression_ZLIB MongodConfig_Network_Compression_Compressor = 2
	// The [zstd](https://docs.mongodb.com/v4.2/reference/glossary/#term-zstd) compression.
	MongodConfig_Network_Compression_ZSTD MongodConfig_Network_Compression_Compressor = 3
	// No compression
	MongodConfig_Network_Compression_DISABLED MongodConfig_Network_Compression_Compressor = 4
)

// Enum value maps for MongodConfig_Network_Compression_Compressor.
var (
	MongodConfig_Network_Compression_Compressor_name = map[int32]string{
		0: "COMPRESSOR_UNSPECIFIED",
		1: "SNAPPY",
		2: "ZLIB",
		3: "ZSTD",
		4: "DISABLED",
	}
	MongodConfig_Network_Compression_Compressor_value = map[string]int32{
		"COMPRESSOR_UNSPECIFIED": 0,
		"SNAPPY":                 1,
		"ZLIB":                   2,
		"ZSTD":                   3,
		"DISABLED":               4,
	}
)

func (x MongodConfig_Network_Compression_Compressor) Enum() *MongodConfig_Network_Compression_Compressor {
	p := new(MongodConfig_Network_Compression_Compressor)
	*p = x
	return p
}

func (x MongodConfig_Network_Compression_Compressor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MongodConfig_Network_Compression_Compressor) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_enumTypes[2].Descriptor()
}

func (MongodConfig_Network_Compression_Compressor) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_enumTypes[2]
}

func (x MongodConfig_Network_Compression_Compressor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MongodConfig_Network_Compression_Compressor.Descriptor instead.
func (MongodConfig_Network_Compression_Compressor) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

type MongoCfgConfig_OperationProfiling_Mode int32

const (
	MongoCfgConfig_OperationProfiling_MODE_UNSPECIFIED MongoCfgConfig_OperationProfiling_Mode = 0
	// The profiler is off and does not collect any data.
	MongoCfgConfig_OperationProfiling_OFF MongoCfgConfig_OperationProfiling_Mode = 1
	// The profiler collects data for operations that take longer than the value of [slow_op_threshold].
	MongoCfgConfig_OperationProfiling_SLOW_OP MongoCfgConfig_OperationProfiling_Mode = 2
	// The profiler collects data for all operations.
	MongoCfgConfig_OperationProfiling_ALL MongoCfgConfig_OperationProfiling_Mode = 3
)

// Enum value maps for MongoCfgConfig_OperationProfiling_Mode.
var (
	MongoCfgConfig_OperationProfiling_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "OFF",
		2: "SLOW_OP",
		3: "ALL",
	}
	MongoCfgConfig_OperationProfiling_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"OFF":              1,
		"SLOW_OP":          2,
		"ALL":              3,
	}
)

func (x MongoCfgConfig_OperationProfiling_Mode) Enum() *MongoCfgConfig_OperationProfiling_Mode {
	p := new(MongoCfgConfig_OperationProfiling_Mode)
	*p = x
	return p
}

func (x MongoCfgConfig_OperationProfiling_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MongoCfgConfig_OperationProfiling_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_enumTypes[3].Descriptor()
}

func (MongoCfgConfig_OperationProfiling_Mode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_enumTypes[3]
}

func (x MongoCfgConfig_OperationProfiling_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MongoCfgConfig_OperationProfiling_Mode.Descriptor instead.
func (MongoCfgConfig_OperationProfiling_Mode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{1, 1, 0}
}

type MongosConfig_Network_Compression_Compressor int32

const (
	MongosConfig_Network_Compression_COMPRESSOR_UNSPECIFIED MongosConfig_Network_Compression_Compressor = 0
	// The [Snappy](https://docs.mongodb.com/v4.2/reference/glossary/#term-snappy) compression.
	MongosConfig_Network_Compression_SNAPPY MongosConfig_Network_Compression_Compressor = 1
	// The [zlib](https://docs.mongodb.com/v4.2/reference/glossary/#term-zlib) compression.
	MongosConfig_Network_Compression_ZLIB MongosConfig_Network_Compression_Compressor = 2
	// The [zstd](https://docs.mongodb.com/v4.2/reference/glossary/#term-zstd) compression.
	MongosConfig_Network_Compression_ZSTD MongosConfig_Network_Compression_Compressor = 3
	// No compression
	MongosConfig_Network_Compression_DISABLED MongosConfig_Network_Compression_Compressor = 4
)

// Enum value maps for MongosConfig_Network_Compression_Compressor.
var (
	MongosConfig_Network_Compression_Compressor_name = map[int32]string{
		0: "COMPRESSOR_UNSPECIFIED",
		1: "SNAPPY",
		2: "ZLIB",
		3: "ZSTD",
		4: "DISABLED",
	}
	MongosConfig_Network_Compression_Compressor_value = map[string]int32{
		"COMPRESSOR_UNSPECIFIED": 0,
		"SNAPPY":                 1,
		"ZLIB":                   2,
		"ZSTD":                   3,
		"DISABLED":               4,
	}
)

func (x MongosConfig_Network_Compression_Compressor) Enum() *MongosConfig_Network_Compression_Compressor {
	p := new(MongosConfig_Network_Compression_Compressor)
	*p = x
	return p
}

func (x MongosConfig_Network_Compression_Compressor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MongosConfig_Network_Compression_Compressor) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_enumTypes[4].Descriptor()
}

func (MongosConfig_Network_Compression_Compressor) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_enumTypes[4]
}

func (x MongosConfig_Network_Compression_Compressor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MongosConfig_Network_Compression_Compressor.Descriptor instead.
func (MongosConfig_Network_Compression_Compressor) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{2, 0, 0, 0}
}

// Configuration of a mongod daemon. Supported options are a limited subset of all
// options described in [MongoDB documentation](https://docs.mongodb.com/v7.0/reference/configuration-options/).
type MongodConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `storage` section of mongod configuration.
	Storage *MongodConfig_Storage `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	// `operationProfiling` section of mongod configuration.
	OperationProfiling *MongodConfig_OperationProfiling `protobuf:"bytes,2,opt,name=operation_profiling,json=operationProfiling,proto3" json:"operation_profiling,omitempty"`
	// `net` section of mongod configuration.
	Net *MongodConfig_Network `protobuf:"bytes,3,opt,name=net,proto3" json:"net,omitempty"`
	// `security` section of mongod configuration.
	Security *MongodConfig_Security `protobuf:"bytes,4,opt,name=security,proto3" json:"security,omitempty"`
	// `AuditLog` section of mongod configuration.
	AuditLog *MongodConfig_AuditLog `protobuf:"bytes,5,opt,name=audit_log,json=auditLog,proto3" json:"audit_log,omitempty"`
	// `SetParameter` section of mongod configuration.
	SetParameter *MongodConfig_SetParameter `protobuf:"bytes,6,opt,name=set_parameter,json=setParameter,proto3" json:"set_parameter,omitempty"`
}

func (x *MongodConfig) Reset() {
	*x = MongodConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig) ProtoMessage() {}

func (x *MongodConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig.ProtoReflect.Descriptor instead.
func (*MongodConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0}
}

func (x *MongodConfig) GetStorage() *MongodConfig_Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *MongodConfig) GetOperationProfiling() *MongodConfig_OperationProfiling {
	if x != nil {
		return x.OperationProfiling
	}
	return nil
}

func (x *MongodConfig) GetNet() *MongodConfig_Network {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *MongodConfig) GetSecurity() *MongodConfig_Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *MongodConfig) GetAuditLog() *MongodConfig_AuditLog {
	if x != nil {
		return x.AuditLog
	}
	return nil
}

func (x *MongodConfig) GetSetParameter() *MongodConfig_SetParameter {
	if x != nil {
		return x.SetParameter
	}
	return nil
}

type MongoCfgConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `storage` section of mongocfg configuration.
	Storage *MongoCfgConfig_Storage `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	// `operationProfiling` section of mongocfg configuration.
	OperationProfiling *MongoCfgConfig_OperationProfiling `protobuf:"bytes,2,opt,name=operation_profiling,json=operationProfiling,proto3" json:"operation_profiling,omitempty"`
	// `net` section of mongocfg configuration.
	Net *MongoCfgConfig_Network `protobuf:"bytes,3,opt,name=net,proto3" json:"net,omitempty"`
}

func (x *MongoCfgConfig) Reset() {
	*x = MongoCfgConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoCfgConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoCfgConfig) ProtoMessage() {}

func (x *MongoCfgConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoCfgConfig.ProtoReflect.Descriptor instead.
func (*MongoCfgConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{1}
}

func (x *MongoCfgConfig) GetStorage() *MongoCfgConfig_Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *MongoCfgConfig) GetOperationProfiling() *MongoCfgConfig_OperationProfiling {
	if x != nil {
		return x.OperationProfiling
	}
	return nil
}

func (x *MongoCfgConfig) GetNet() *MongoCfgConfig_Network {
	if x != nil {
		return x.Net
	}
	return nil
}

type MongosConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network settings for mongos.
	Net *MongosConfig_Network `protobuf:"bytes,3,opt,name=net,proto3" json:"net,omitempty"`
}

func (x *MongosConfig) Reset() {
	*x = MongosConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongosConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongosConfig) ProtoMessage() {}

func (x *MongosConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongosConfig.ProtoReflect.Descriptor instead.
func (*MongosConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{2}
}

func (x *MongosConfig) GetNet() *MongosConfig_Network {
	if x != nil {
		return x.Net
	}
	return nil
}

type MongodConfigSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective mongod settings for a MongoDB cluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *MongodConfig `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined mongod settings for a MongoDB cluster.
	UserConfig *MongodConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default mongod configuration for a MongoDB cluster.
	DefaultConfig *MongodConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *MongodConfigSet) Reset() {
	*x = MongodConfigSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfigSet) ProtoMessage() {}

func (x *MongodConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfigSet.ProtoReflect.Descriptor instead.
func (*MongodConfigSet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{3}
}

func (x *MongodConfigSet) GetEffectiveConfig() *MongodConfig {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *MongodConfigSet) GetUserConfig() *MongodConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *MongodConfigSet) GetDefaultConfig() *MongodConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type MongoCfgConfigSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective mongocfg settings for a MongoDB cluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *MongoCfgConfig `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined mongocfg settings for a MongoDB cluster.
	UserConfig *MongoCfgConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default mongocfg configuration for a MongoDB cluster.
	DefaultConfig *MongoCfgConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *MongoCfgConfigSet) Reset() {
	*x = MongoCfgConfigSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoCfgConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoCfgConfigSet) ProtoMessage() {}

func (x *MongoCfgConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoCfgConfigSet.ProtoReflect.Descriptor instead.
func (*MongoCfgConfigSet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{4}
}

func (x *MongoCfgConfigSet) GetEffectiveConfig() *MongoCfgConfig {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *MongoCfgConfigSet) GetUserConfig() *MongoCfgConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *MongoCfgConfigSet) GetDefaultConfig() *MongoCfgConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type MongosConfigSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective mongos settings for a MongoDB cluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *MongosConfig `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined mongos settings for a MongoDB cluster.
	UserConfig *MongosConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default mongos configuration for a MongoDB cluster.
	DefaultConfig *MongosConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *MongosConfigSet) Reset() {
	*x = MongosConfigSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongosConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongosConfigSet) ProtoMessage() {}

func (x *MongosConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongosConfigSet.ProtoReflect.Descriptor instead.
func (*MongosConfigSet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{5}
}

func (x *MongosConfigSet) GetEffectiveConfig() *MongosConfig {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *MongosConfigSet) GetUserConfig() *MongosConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *MongosConfigSet) GetDefaultConfig() *MongosConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type MongodConfig_Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration of the WiredTiger storage engine.
	WiredTiger *MongodConfig_Storage_WiredTiger `protobuf:"bytes,1,opt,name=wired_tiger,json=wiredTiger,proto3" json:"wired_tiger,omitempty"`
	// Configuration of the MongoDB [journal](https://docs.mongodb.com/v7.0/reference/glossary/#std-term-journal).
	Journal *MongodConfig_Storage_Journal `protobuf:"bytes,2,opt,name=journal,proto3" json:"journal,omitempty"`
}

func (x *MongodConfig_Storage) Reset() {
	*x = MongodConfig_Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_Storage) ProtoMessage() {}

func (x *MongodConfig_Storage) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_Storage.ProtoReflect.Descriptor instead.
func (*MongodConfig_Storage) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MongodConfig_Storage) GetWiredTiger() *MongodConfig_Storage_WiredTiger {
	if x != nil {
		return x.WiredTiger
	}
	return nil
}

func (x *MongodConfig_Storage) GetJournal() *MongodConfig_Storage_Journal {
	if x != nil {
		return x.Journal
	}
	return nil
}

type MongodConfig_OperationProfiling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mode which specifies operations that should be profiled.
	Mode MongodConfig_OperationProfiling_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=yandex.cloud.mdb.mongodb.v1.config.MongodConfig_OperationProfiling_Mode" json:"mode,omitempty"`
	// The slow operation time threshold, in milliseconds. Operations that run
	// for longer than this threshold are considered slow, and are processed by the profiler
	// running in the SLOW_OP mode.
	SlowOpThreshold *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=slow_op_threshold,json=slowOpThreshold,proto3" json:"slow_op_threshold,omitempty"`
	// The fraction of slow operations that should be profiled or logged.
	// operationProfiling.slowOpSampleRate accepts values between 0 and 1, inclusive.
	SlowOpSampleRate *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=slow_op_sample_rate,json=slowOpSampleRate,proto3" json:"slow_op_sample_rate,omitempty"`
}

func (x *MongodConfig_OperationProfiling) Reset() {
	*x = MongodConfig_OperationProfiling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_OperationProfiling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_OperationProfiling) ProtoMessage() {}

func (x *MongodConfig_OperationProfiling) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_OperationProfiling.ProtoReflect.Descriptor instead.
func (*MongodConfig_OperationProfiling) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MongodConfig_OperationProfiling) GetMode() MongodConfig_OperationProfiling_Mode {
	if x != nil {
		return x.Mode
	}
	return MongodConfig_OperationProfiling_MODE_UNSPECIFIED
}

func (x *MongodConfig_OperationProfiling) GetSlowOpThreshold() *wrapperspb.Int64Value {
	if x != nil {
		return x.SlowOpThreshold
	}
	return nil
}

func (x *MongodConfig_OperationProfiling) GetSlowOpSampleRate() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SlowOpSampleRate
	}
	return nil
}

type MongodConfig_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of simultaneous connections that mongod will accept.
	MaxIncomingConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_incoming_connections,json=maxIncomingConnections,proto3" json:"max_incoming_connections,omitempty"`
	// Compression settings
	Compression *MongodConfig_Network_Compression `protobuf:"bytes,2,opt,name=compression,proto3" json:"compression,omitempty"`
}

func (x *MongodConfig_Network) Reset() {
	*x = MongodConfig_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_Network) ProtoMessage() {}

func (x *MongodConfig_Network) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_Network.ProtoReflect.Descriptor instead.
func (*MongodConfig_Network) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MongodConfig_Network) GetMaxIncomingConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxIncomingConnections
	}
	return nil
}

func (x *MongodConfig_Network) GetCompression() *MongodConfig_Network_Compression {
	if x != nil {
		return x.Compression
	}
	return nil
}

type MongodConfig_Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If encryption at rest should be enabled or not
	EnableEncryption *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable_encryption,json=enableEncryption,proto3" json:"enable_encryption,omitempty"`
	// `kmip` section of mongod security config
	Kmip *MongodConfig_Security_KMIP `protobuf:"bytes,2,opt,name=kmip,proto3" json:"kmip,omitempty"`
}

func (x *MongodConfig_Security) Reset() {
	*x = MongodConfig_Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_Security) ProtoMessage() {}

func (x *MongodConfig_Security) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_Security.ProtoReflect.Descriptor instead.
func (*MongodConfig_Security) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MongodConfig_Security) GetEnableEncryption() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableEncryption
	}
	return nil
}

func (x *MongodConfig_Security) GetKmip() *MongodConfig_Security_KMIP {
	if x != nil {
		return x.Kmip
	}
	return nil
}

type MongodConfig_AuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Audit filter
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Allows runtime configuration of audit filter and auditAuthorizationSuccess
	RuntimeConfiguration *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=runtime_configuration,json=runtimeConfiguration,proto3" json:"runtime_configuration,omitempty"`
}

func (x *MongodConfig_AuditLog) Reset() {
	*x = MongodConfig_AuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_AuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_AuditLog) ProtoMessage() {}

func (x *MongodConfig_AuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_AuditLog.ProtoReflect.Descriptor instead.
func (*MongodConfig_AuditLog) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MongodConfig_AuditLog) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *MongodConfig_AuditLog) GetRuntimeConfiguration() *wrapperspb.BoolValue {
	if x != nil {
		return x.RuntimeConfiguration
	}
	return nil
}

type MongodConfig_SetParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enables the auditing of authorization successes
	AuditAuthorizationSuccess *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=audit_authorization_success,json=auditAuthorizationSuccess,proto3" json:"audit_authorization_success,omitempty"`
	// Enables or disables the mechanism that controls the rate at which the primary applies its writes with the
	// goal of keeping the secondary members [majority committed](https://www.mongodb.com/docs/v7.0/reference/command/replSetGetStatus/#replSetGetStatus.optimes.lastCommittedOpTime)
	// lag under a configurable maximum value.
	EnableFlowControl *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=enable_flow_control,json=enableFlowControl,proto3" json:"enable_flow_control,omitempty"`
	// The minimum time window in seconds for which the storage engine keeps the snapshot history.
	MinSnapshotHistoryWindowInSeconds *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=min_snapshot_history_window_in_seconds,json=minSnapshotHistoryWindowInSeconds,proto3" json:"min_snapshot_history_window_in_seconds,omitempty"`
}

func (x *MongodConfig_SetParameter) Reset() {
	*x = MongodConfig_SetParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_SetParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_SetParameter) ProtoMessage() {}

func (x *MongodConfig_SetParameter) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_SetParameter.ProtoReflect.Descriptor instead.
func (*MongodConfig_SetParameter) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MongodConfig_SetParameter) GetAuditAuthorizationSuccess() *wrapperspb.BoolValue {
	if x != nil {
		return x.AuditAuthorizationSuccess
	}
	return nil
}

func (x *MongodConfig_SetParameter) GetEnableFlowControl() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableFlowControl
	}
	return nil
}

func (x *MongodConfig_SetParameter) GetMinSnapshotHistoryWindowInSeconds() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinSnapshotHistoryWindowInSeconds
	}
	return nil
}

// Configuration of WiredTiger storage engine.
type MongodConfig_Storage_WiredTiger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Engine configuration for WiredTiger.
	EngineConfig *MongodConfig_Storage_WiredTiger_EngineConfig `protobuf:"bytes,1,opt,name=engine_config,json=engineConfig,proto3" json:"engine_config,omitempty"`
	// Collection configuration for WiredTiger.
	CollectionConfig *MongodConfig_Storage_WiredTiger_CollectionConfig `protobuf:"bytes,2,opt,name=collection_config,json=collectionConfig,proto3" json:"collection_config,omitempty"`
	// Index configuration for WiredTiger
	IndexConfig *MongodConfig_Storage_WiredTiger_IndexConfig `protobuf:"bytes,3,opt,name=index_config,json=indexConfig,proto3" json:"index_config,omitempty"`
}

func (x *MongodConfig_Storage_WiredTiger) Reset() {
	*x = MongodConfig_Storage_WiredTiger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_Storage_WiredTiger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_Storage_WiredTiger) ProtoMessage() {}

func (x *MongodConfig_Storage_WiredTiger) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_Storage_WiredTiger.ProtoReflect.Descriptor instead.
func (*MongodConfig_Storage_WiredTiger) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *MongodConfig_Storage_WiredTiger) GetEngineConfig() *MongodConfig_Storage_WiredTiger_EngineConfig {
	if x != nil {
		return x.EngineConfig
	}
	return nil
}

func (x *MongodConfig_Storage_WiredTiger) GetCollectionConfig() *MongodConfig_Storage_WiredTiger_CollectionConfig {
	if x != nil {
		return x.CollectionConfig
	}
	return nil
}

func (x *MongodConfig_Storage_WiredTiger) GetIndexConfig() *MongodConfig_Storage_WiredTiger_IndexConfig {
	if x != nil {
		return x.IndexConfig
	}
	return nil
}

type MongodConfig_Storage_Journal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Commit interval between journal operations, in milliseconds.
	// Default: 100.
	CommitInterval *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=commit_interval,json=commitInterval,proto3" json:"commit_interval,omitempty"`
}

func (x *MongodConfig_Storage_Journal) Reset() {
	*x = MongodConfig_Storage_Journal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_Storage_Journal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_Storage_Journal) ProtoMessage() {}

func (x *MongodConfig_Storage_Journal) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_Storage_Journal.ProtoReflect.Descriptor instead.
func (*MongodConfig_Storage_Journal) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *MongodConfig_Storage_Journal) GetCommitInterval() *wrapperspb.Int64Value {
	if x != nil {
		return x.CommitInterval
	}
	return nil
}

type MongodConfig_Storage_WiredTiger_EngineConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum size of the internal cache that WiredTiger will use for all data.
	CacheSizeGb *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=cache_size_gb,json=cacheSizeGb,proto3" json:"cache_size_gb,omitempty"`
}

func (x *MongodConfig_Storage_WiredTiger_EngineConfig) Reset() {
	*x = MongodConfig_Storage_WiredTiger_EngineConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_Storage_WiredTiger_EngineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_Storage_WiredTiger_EngineConfig) ProtoMessage() {}

func (x *MongodConfig_Storage_WiredTiger_EngineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_Storage_WiredTiger_EngineConfig.ProtoReflect.Descriptor instead.
func (*MongodConfig_Storage_WiredTiger_EngineConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *MongodConfig_Storage_WiredTiger_EngineConfig) GetCacheSizeGb() *wrapperspb.DoubleValue {
	if x != nil {
		return x.CacheSizeGb
	}
	return nil
}

type MongodConfig_Storage_WiredTiger_CollectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default type of compression to use for collection data.
	BlockCompressor MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor `protobuf:"varint,1,opt,name=block_compressor,json=blockCompressor,proto3,enum=yandex.cloud.mdb.mongodb.v1.config.MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor" json:"block_compressor,omitempty"`
}

func (x *MongodConfig_Storage_WiredTiger_CollectionConfig) Reset() {
	*x = MongodConfig_Storage_WiredTiger_CollectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_Storage_WiredTiger_CollectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_Storage_WiredTiger_CollectionConfig) ProtoMessage() {}

func (x *MongodConfig_Storage_WiredTiger_CollectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_Storage_WiredTiger_CollectionConfig.ProtoReflect.Descriptor instead.
func (*MongodConfig_Storage_WiredTiger_CollectionConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *MongodConfig_Storage_WiredTiger_CollectionConfig) GetBlockCompressor() MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor {
	if x != nil {
		return x.BlockCompressor
	}
	return MongodConfig_Storage_WiredTiger_CollectionConfig_COMPRESSOR_UNSPECIFIED
}

type MongodConfig_Storage_WiredTiger_IndexConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enables or disables [prefix compression](https://www.mongodb.com/docs/manual/reference/glossary/#std-term-prefix-compression)
	PrefixCompression *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=prefix_compression,json=prefixCompression,proto3" json:"prefix_compression,omitempty"`
}

func (x *MongodConfig_Storage_WiredTiger_IndexConfig) Reset() {
	*x = MongodConfig_Storage_WiredTiger_IndexConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_Storage_WiredTiger_IndexConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_Storage_WiredTiger_IndexConfig) ProtoMessage() {}

func (x *MongodConfig_Storage_WiredTiger_IndexConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_Storage_WiredTiger_IndexConfig.ProtoReflect.Descriptor instead.
func (*MongodConfig_Storage_WiredTiger_IndexConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *MongodConfig_Storage_WiredTiger_IndexConfig) GetPrefixCompression() *wrapperspb.BoolValue {
	if x != nil {
		return x.PrefixCompression
	}
	return nil
}

type MongodConfig_Network_Compression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the default compressor(s) to use for communication between this mongod or mongos instance and:
	// - other members of the deployment if the instance is part of a replica set or a sharded cluster
	// - mongosh
	// - drivers that support the OP_COMPRESSED message format.
	// MongoDB supports the following compressors:
	Compressors []MongodConfig_Network_Compression_Compressor `protobuf:"varint,1,rep,packed,name=compressors,proto3,enum=yandex.cloud.mdb.mongodb.v1.config.MongodConfig_Network_Compression_Compressor" json:"compressors,omitempty"`
}

func (x *MongodConfig_Network_Compression) Reset() {
	*x = MongodConfig_Network_Compression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_Network_Compression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_Network_Compression) ProtoMessage() {}

func (x *MongodConfig_Network_Compression) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_Network_Compression.ProtoReflect.Descriptor instead.
func (*MongodConfig_Network_Compression) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *MongodConfig_Network_Compression) GetCompressors() []MongodConfig_Network_Compression_Compressor {
	if x != nil {
		return x.Compressors
	}
	return nil
}

type MongodConfig_Security_KMIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KMIP server name
	ServerName string `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// KMIP server port
	Port *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	// KMIP Server CA
	ServerCa string `protobuf:"bytes,3,opt,name=server_ca,json=serverCa,proto3" json:"server_ca,omitempty"`
	// KMIP client certificate + private key (unencrypted)
	ClientCertificate string `protobuf:"bytes,4,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
	// KMIP Key identifier (if any)
	KeyIdentifier string `protobuf:"bytes,5,opt,name=key_identifier,json=keyIdentifier,proto3" json:"key_identifier,omitempty"`
}

func (x *MongodConfig_Security_KMIP) Reset() {
	*x = MongodConfig_Security_KMIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodConfig_Security_KMIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodConfig_Security_KMIP) ProtoMessage() {}

func (x *MongodConfig_Security_KMIP) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodConfig_Security_KMIP.ProtoReflect.Descriptor instead.
func (*MongodConfig_Security_KMIP) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *MongodConfig_Security_KMIP) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *MongodConfig_Security_KMIP) GetPort() *wrapperspb.Int64Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *MongodConfig_Security_KMIP) GetServerCa() string {
	if x != nil {
		return x.ServerCa
	}
	return ""
}

func (x *MongodConfig_Security_KMIP) GetClientCertificate() string {
	if x != nil {
		return x.ClientCertificate
	}
	return ""
}

func (x *MongodConfig_Security_KMIP) GetKeyIdentifier() string {
	if x != nil {
		return x.KeyIdentifier
	}
	return ""
}

type MongoCfgConfig_Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration of the WiredTiger storage engine.
	WiredTiger *MongoCfgConfig_Storage_WiredTiger `protobuf:"bytes,1,opt,name=wired_tiger,json=wiredTiger,proto3" json:"wired_tiger,omitempty"`
}

func (x *MongoCfgConfig_Storage) Reset() {
	*x = MongoCfgConfig_Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoCfgConfig_Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoCfgConfig_Storage) ProtoMessage() {}

func (x *MongoCfgConfig_Storage) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoCfgConfig_Storage.ProtoReflect.Descriptor instead.
func (*MongoCfgConfig_Storage) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MongoCfgConfig_Storage) GetWiredTiger() *MongoCfgConfig_Storage_WiredTiger {
	if x != nil {
		return x.WiredTiger
	}
	return nil
}

type MongoCfgConfig_OperationProfiling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mode which specifies operations that should be profiled.
	Mode MongoCfgConfig_OperationProfiling_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig_OperationProfiling_Mode" json:"mode,omitempty"`
	// The slow operation time threshold, in milliseconds. Operations that run
	// for longer than this threshold are considered slow, and are processed by the profiler
	// running in the SLOW_OP mode. For details see [MongoDB documentation](https://www.mongodb.com/docs/v7.0/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs).
	SlowOpThreshold *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=slow_op_threshold,json=slowOpThreshold,proto3" json:"slow_op_threshold,omitempty"`
}

func (x *MongoCfgConfig_OperationProfiling) Reset() {
	*x = MongoCfgConfig_OperationProfiling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoCfgConfig_OperationProfiling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoCfgConfig_OperationProfiling) ProtoMessage() {}

func (x *MongoCfgConfig_OperationProfiling) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoCfgConfig_OperationProfiling.ProtoReflect.Descriptor instead.
func (*MongoCfgConfig_OperationProfiling) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{1, 1}
}

func (x *MongoCfgConfig_OperationProfiling) GetMode() MongoCfgConfig_OperationProfiling_Mode {
	if x != nil {
		return x.Mode
	}
	return MongoCfgConfig_OperationProfiling_MODE_UNSPECIFIED
}

func (x *MongoCfgConfig_OperationProfiling) GetSlowOpThreshold() *wrapperspb.Int64Value {
	if x != nil {
		return x.SlowOpThreshold
	}
	return nil
}

type MongoCfgConfig_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of simultaneous connections that mongocfg will accept.
	MaxIncomingConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_incoming_connections,json=maxIncomingConnections,proto3" json:"max_incoming_connections,omitempty"`
}

func (x *MongoCfgConfig_Network) Reset() {
	*x = MongoCfgConfig_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoCfgConfig_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoCfgConfig_Network) ProtoMessage() {}

func (x *MongoCfgConfig_Network) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoCfgConfig_Network.ProtoReflect.Descriptor instead.
func (*MongoCfgConfig_Network) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{1, 2}
}

func (x *MongoCfgConfig_Network) GetMaxIncomingConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxIncomingConnections
	}
	return nil
}

// Configuration of WiredTiger storage engine.
type MongoCfgConfig_Storage_WiredTiger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Engine configuration for WiredTiger.
	EngineConfig *MongoCfgConfig_Storage_WiredTiger_EngineConfig `protobuf:"bytes,1,opt,name=engine_config,json=engineConfig,proto3" json:"engine_config,omitempty"`
}

func (x *MongoCfgConfig_Storage_WiredTiger) Reset() {
	*x = MongoCfgConfig_Storage_WiredTiger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoCfgConfig_Storage_WiredTiger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoCfgConfig_Storage_WiredTiger) ProtoMessage() {}

func (x *MongoCfgConfig_Storage_WiredTiger) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoCfgConfig_Storage_WiredTiger.ProtoReflect.Descriptor instead.
func (*MongoCfgConfig_Storage_WiredTiger) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *MongoCfgConfig_Storage_WiredTiger) GetEngineConfig() *MongoCfgConfig_Storage_WiredTiger_EngineConfig {
	if x != nil {
		return x.EngineConfig
	}
	return nil
}

type MongoCfgConfig_Storage_WiredTiger_EngineConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum size of the internal cache that WiredTiger will use for all data.
	CacheSizeGb *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=cache_size_gb,json=cacheSizeGb,proto3" json:"cache_size_gb,omitempty"`
}

func (x *MongoCfgConfig_Storage_WiredTiger_EngineConfig) Reset() {
	*x = MongoCfgConfig_Storage_WiredTiger_EngineConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoCfgConfig_Storage_WiredTiger_EngineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoCfgConfig_Storage_WiredTiger_EngineConfig) ProtoMessage() {}

func (x *MongoCfgConfig_Storage_WiredTiger_EngineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoCfgConfig_Storage_WiredTiger_EngineConfig.ProtoReflect.Descriptor instead.
func (*MongoCfgConfig_Storage_WiredTiger_EngineConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{1, 0, 0, 0}
}

func (x *MongoCfgConfig_Storage_WiredTiger_EngineConfig) GetCacheSizeGb() *wrapperspb.DoubleValue {
	if x != nil {
		return x.CacheSizeGb
	}
	return nil
}

type MongosConfig_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of simultaneous connections that mongos will accept.
	MaxIncomingConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_incoming_connections,json=maxIncomingConnections,proto3" json:"max_incoming_connections,omitempty"`
	// Compression settings
	Compression *MongosConfig_Network_Compression `protobuf:"bytes,2,opt,name=compression,proto3" json:"compression,omitempty"`
}

func (x *MongosConfig_Network) Reset() {
	*x = MongosConfig_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongosConfig_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongosConfig_Network) ProtoMessage() {}

func (x *MongosConfig_Network) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongosConfig_Network.ProtoReflect.Descriptor instead.
func (*MongosConfig_Network) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{2, 0}
}

func (x *MongosConfig_Network) GetMaxIncomingConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxIncomingConnections
	}
	return nil
}

func (x *MongosConfig_Network) GetCompression() *MongosConfig_Network_Compression {
	if x != nil {
		return x.Compression
	}
	return nil
}

type MongosConfig_Network_Compression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the default compressor(s) to use for communication between this mongod or mongos instance and:
	// - other members of the deployment if the instance is part of a replica set or a sharded cluster
	// - mongosh
	// - drivers that support the OP_COMPRESSED message format.
	// MongoDB supports the following compressors:
	Compressors []MongosConfig_Network_Compression_Compressor `protobuf:"varint,1,rep,packed,name=compressors,proto3,enum=yandex.cloud.mdb.mongodb.v1.config.MongosConfig_Network_Compression_Compressor" json:"compressors,omitempty"`
}

func (x *MongosConfig_Network_Compression) Reset() {
	*x = MongosConfig_Network_Compression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongosConfig_Network_Compression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongosConfig_Network_Compression) ProtoMessage() {}

func (x *MongosConfig_Network_Compression) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongosConfig_Network_Compression.ProtoReflect.Descriptor instead.
func (*MongosConfig_Network_Compression) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *MongosConfig_Network_Compression) GetCompressors() []MongosConfig_Network_Compression_Compressor {
	if x != nil {
		return x.Compressors
	}
	return nil
}

var File_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDesc = []byte{
	0x0a, 0x30, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x22, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x19, 0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x74, 0x0a, 0x13, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x4a, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x08,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x62, 0x0a, 0x0d, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a,
	0xc7, 0x08, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x77,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x64,
	0x54, 0x69, 0x67, 0x65, 0x72, 0x52, 0x0a, 0x77, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x67, 0x65,
	0x72, 0x12, 0x5a, 0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x9d, 0x06,
	0x0a, 0x0a, 0x57, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x67, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x0d,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x69,
	0x72, 0x65, 0x64, 0x54, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x54, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x64, 0x54,
	0x69, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x72, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x67,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x50, 0x0a, 0x0c, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x1a, 0xf3, 0x01,
	0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5f, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x0f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22,
	0x52, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x5a, 0x4c, 0x49, 0x42, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x53, 0x54,
	0x44, 0x10, 0x04, 0x1a, 0x58, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x49, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x5a, 0x0a,
	0x07, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09,
	0xfa, 0xc7, 0x31, 0x05, 0x31, 0x2d, 0x35, 0x30, 0x30, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0xd6, 0x02, 0x0a, 0x12, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x5c, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x4f,
	0x0a, 0x11, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xfa, 0xc7, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x0f,
	0x73, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x54, 0x0a, 0x13, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0xc7, 0x31, 0x03,
	0x30, 0x2d, 0x31, 0x52, 0x10, 0x73, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x3b, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c,
	0x10, 0x03, 0x1a, 0xba, 0x03, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x63,
	0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0xfa,
	0xc7, 0x31, 0x08, 0x31, 0x30, 0x2d, 0x31, 0x36, 0x33, 0x38, 0x34, 0x52, 0x16, 0x6d, 0x61, 0x78,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x66, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f,
	0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xe1, 0x01, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x4f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x42, 0x07, 0x82, 0xc8, 0x31, 0x03, 0x31, 0x2d, 0x33, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x5a, 0x4c, 0x49, 0x42, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x53, 0x54, 0x44, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x1a,
	0xf5, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x11,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x04, 0x6b, 0x6d, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x4b,
	0x4d, 0x49, 0x50, 0x52, 0x04, 0x6b, 0x6d, 0x69, 0x70, 0x1a, 0xcb, 0x01, 0x0a, 0x04, 0x4b, 0x4d,
	0x49, 0x50, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x61, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x73, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x15, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xaf, 0x02, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x5a, 0x0a,
	0x1b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x77, 0x0a, 0x26, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x07, 0xfa, 0xc7, 0x31, 0x03, 0x3e, 0x3d, 0x30, 0x52, 0x21, 0x6d, 0x69, 0x6e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xef,
	0x07, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x66, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x54, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x66, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x76, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43,
	0x66, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x4c, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x66, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x1a, 0xcb, 0x02,
	0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x0b, 0x77, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x66, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x64,
	0x54, 0x69, 0x67, 0x65, 0x72, 0x52, 0x0a, 0x77, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x67, 0x65,
	0x72, 0x1a, 0xd7, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x67, 0x65, 0x72,
	0x12, 0x77, 0x0a, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x43, 0x66, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x67, 0x65, 0x72, 0x2e, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x50, 0x0a, 0x0c, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x1a, 0x82, 0x02, 0x0a, 0x12,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x5e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x66, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xfa, 0xc7, 0x31, 0x02,
	0x3e, 0x30, 0x52, 0x0f, 0x73, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x22, 0x3b, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4c,
	0x4f, 0x57, 0x5f, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x03,
	0x1a, 0x6e, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x63, 0x0a, 0x18, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0xfa, 0xc7, 0x31, 0x08,
	0x31, 0x30, 0x2d, 0x31, 0x36, 0x33, 0x38, 0x34, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x97, 0x04, 0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x4a, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x1a, 0xba, 0x03,
	0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x63, 0x0a, 0x18, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0xfa, 0xc7, 0x31, 0x08, 0x31, 0x30,
	0x2d, 0x31, 0x36, 0x33, 0x38, 0x34, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xe1, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x42, 0x07, 0x82, 0xc8,
	0x31, 0x03, 0x31, 0x2d, 0x33, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x73, 0x22, 0x56, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x4c, 0x49, 0x42,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x53, 0x54, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x22, 0x9a, 0x02, 0x0a, 0x0f, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x12, 0x5b,
	0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f,
	0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57,
	0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa2, 0x02, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x43, 0x66, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x12, 0x5d, 0x0a,
	0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x43, 0x66, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x66, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x59, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x66, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x9a, 0x02, 0x0a,
	0x0f, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x12, 0x5b, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x57, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f,
	0x6e, 0x67, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x78, 0x0a, 0x26, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescData = file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDesc
)

func file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDescData
}

var file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_goTypes = []interface{}{
	(MongodConfig_Storage_WiredTiger_CollectionConfig_Compressor)(0), // 0: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.CollectionConfig.Compressor
	(MongodConfig_OperationProfiling_Mode)(0),                        // 1: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.OperationProfiling.Mode
	(MongodConfig_Network_Compression_Compressor)(0),                 // 2: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Network.Compression.Compressor
	(MongoCfgConfig_OperationProfiling_Mode)(0),                      // 3: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.OperationProfiling.Mode
	(MongosConfig_Network_Compression_Compressor)(0),                 // 4: yandex.cloud.mdb.mongodb.v1.config.MongosConfig.Network.Compression.Compressor
	(*MongodConfig)(nil),                                             // 5: yandex.cloud.mdb.mongodb.v1.config.MongodConfig
	(*MongoCfgConfig)(nil),                                           // 6: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig
	(*MongosConfig)(nil),                                             // 7: yandex.cloud.mdb.mongodb.v1.config.MongosConfig
	(*MongodConfigSet)(nil),                                          // 8: yandex.cloud.mdb.mongodb.v1.config.MongodConfigSet
	(*MongoCfgConfigSet)(nil),                                        // 9: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfigSet
	(*MongosConfigSet)(nil),                                          // 10: yandex.cloud.mdb.mongodb.v1.config.MongosConfigSet
	(*MongodConfig_Storage)(nil),                                     // 11: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage
	(*MongodConfig_OperationProfiling)(nil),                          // 12: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.OperationProfiling
	(*MongodConfig_Network)(nil),                                     // 13: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Network
	(*MongodConfig_Security)(nil),                                    // 14: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Security
	(*MongodConfig_AuditLog)(nil),                                    // 15: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.AuditLog
	(*MongodConfig_SetParameter)(nil),                                // 16: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.SetParameter
	(*MongodConfig_Storage_WiredTiger)(nil),                          // 17: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger
	(*MongodConfig_Storage_Journal)(nil),                             // 18: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.Journal
	(*MongodConfig_Storage_WiredTiger_EngineConfig)(nil),             // 19: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.EngineConfig
	(*MongodConfig_Storage_WiredTiger_CollectionConfig)(nil),         // 20: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.CollectionConfig
	(*MongodConfig_Storage_WiredTiger_IndexConfig)(nil),              // 21: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.IndexConfig
	(*MongodConfig_Network_Compression)(nil),                         // 22: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Network.Compression
	(*MongodConfig_Security_KMIP)(nil),                               // 23: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Security.KMIP
	(*MongoCfgConfig_Storage)(nil),                                   // 24: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.Storage
	(*MongoCfgConfig_OperationProfiling)(nil),                        // 25: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.OperationProfiling
	(*MongoCfgConfig_Network)(nil),                                   // 26: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.Network
	(*MongoCfgConfig_Storage_WiredTiger)(nil),                        // 27: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.Storage.WiredTiger
	(*MongoCfgConfig_Storage_WiredTiger_EngineConfig)(nil),           // 28: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.Storage.WiredTiger.EngineConfig
	(*MongosConfig_Network)(nil),                                     // 29: yandex.cloud.mdb.mongodb.v1.config.MongosConfig.Network
	(*MongosConfig_Network_Compression)(nil),                         // 30: yandex.cloud.mdb.mongodb.v1.config.MongosConfig.Network.Compression
	(*wrapperspb.Int64Value)(nil),                                    // 31: google.protobuf.Int64Value
	(*wrapperspb.DoubleValue)(nil),                                   // 32: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),                                     // 33: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_depIdxs = []int32{
	11, // 0: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.storage:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage
	12, // 1: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.operation_profiling:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.OperationProfiling
	13, // 2: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.net:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Network
	14, // 3: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.security:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Security
	15, // 4: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.audit_log:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.AuditLog
	16, // 5: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.set_parameter:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.SetParameter
	24, // 6: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.storage:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.Storage
	25, // 7: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.operation_profiling:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.OperationProfiling
	26, // 8: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.net:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.Network
	29, // 9: yandex.cloud.mdb.mongodb.v1.config.MongosConfig.net:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig.Network
	5,  // 10: yandex.cloud.mdb.mongodb.v1.config.MongodConfigSet.effective_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig
	5,  // 11: yandex.cloud.mdb.mongodb.v1.config.MongodConfigSet.user_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig
	5,  // 12: yandex.cloud.mdb.mongodb.v1.config.MongodConfigSet.default_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig
	6,  // 13: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfigSet.effective_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig
	6,  // 14: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfigSet.user_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig
	6,  // 15: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfigSet.default_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig
	7,  // 16: yandex.cloud.mdb.mongodb.v1.config.MongosConfigSet.effective_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig
	7,  // 17: yandex.cloud.mdb.mongodb.v1.config.MongosConfigSet.user_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig
	7,  // 18: yandex.cloud.mdb.mongodb.v1.config.MongosConfigSet.default_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig
	17, // 19: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.wired_tiger:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger
	18, // 20: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.journal:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.Journal
	1,  // 21: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.OperationProfiling.mode:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.OperationProfiling.Mode
	31, // 22: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.OperationProfiling.slow_op_threshold:type_name -> google.protobuf.Int64Value
	32, // 23: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.OperationProfiling.slow_op_sample_rate:type_name -> google.protobuf.DoubleValue
	31, // 24: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Network.max_incoming_connections:type_name -> google.protobuf.Int64Value
	22, // 25: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Network.compression:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Network.Compression
	33, // 26: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Security.enable_encryption:type_name -> google.protobuf.BoolValue
	23, // 27: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Security.kmip:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Security.KMIP
	33, // 28: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.AuditLog.runtime_configuration:type_name -> google.protobuf.BoolValue
	33, // 29: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.SetParameter.audit_authorization_success:type_name -> google.protobuf.BoolValue
	33, // 30: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.SetParameter.enable_flow_control:type_name -> google.protobuf.BoolValue
	31, // 31: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.SetParameter.min_snapshot_history_window_in_seconds:type_name -> google.protobuf.Int64Value
	19, // 32: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.engine_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.EngineConfig
	20, // 33: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.collection_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.CollectionConfig
	21, // 34: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.index_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.IndexConfig
	31, // 35: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.Journal.commit_interval:type_name -> google.protobuf.Int64Value
	32, // 36: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.EngineConfig.cache_size_gb:type_name -> google.protobuf.DoubleValue
	0,  // 37: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.CollectionConfig.block_compressor:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.CollectionConfig.Compressor
	33, // 38: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Storage.WiredTiger.IndexConfig.prefix_compression:type_name -> google.protobuf.BoolValue
	2,  // 39: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Network.Compression.compressors:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Network.Compression.Compressor
	31, // 40: yandex.cloud.mdb.mongodb.v1.config.MongodConfig.Security.KMIP.port:type_name -> google.protobuf.Int64Value
	27, // 41: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.Storage.wired_tiger:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.Storage.WiredTiger
	3,  // 42: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.OperationProfiling.mode:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.OperationProfiling.Mode
	31, // 43: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.OperationProfiling.slow_op_threshold:type_name -> google.protobuf.Int64Value
	31, // 44: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.Network.max_incoming_connections:type_name -> google.protobuf.Int64Value
	28, // 45: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.Storage.WiredTiger.engine_config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.Storage.WiredTiger.EngineConfig
	32, // 46: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig.Storage.WiredTiger.EngineConfig.cache_size_gb:type_name -> google.protobuf.DoubleValue
	31, // 47: yandex.cloud.mdb.mongodb.v1.config.MongosConfig.Network.max_incoming_connections:type_name -> google.protobuf.Int64Value
	30, // 48: yandex.cloud.mdb.mongodb.v1.config.MongosConfig.Network.compression:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig.Network.Compression
	4,  // 49: yandex.cloud.mdb.mongodb.v1.config.MongosConfig.Network.Compression.compressors:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig.Network.Compression.Compressor
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_init() }
func file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_init() {
	if File_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoCfgConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongosConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfigSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoCfgConfigSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongosConfigSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_OperationProfiling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_AuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_SetParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_Storage_WiredTiger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_Storage_Journal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_Storage_WiredTiger_EngineConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_Storage_WiredTiger_CollectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_Storage_WiredTiger_IndexConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_Network_Compression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongodConfig_Security_KMIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoCfgConfig_Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoCfgConfig_OperationProfiling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoCfgConfig_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoCfgConfig_Storage_WiredTiger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoCfgConfig_Storage_WiredTiger_EngineConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongosConfig_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongosConfig_Network_Compression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto = out.File
	file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_rawDesc = nil
	file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_goTypes = nil
	file_yandex_cloud_mdb_mongodb_v1_config_mongodb_proto_depIdxs = nil
}
