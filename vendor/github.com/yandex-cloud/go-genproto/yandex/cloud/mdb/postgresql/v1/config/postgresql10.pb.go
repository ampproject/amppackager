// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: yandex/cloud/mdb/postgresql/v1/config/postgresql10.proto

package postgresql

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PostgresqlConfig10_WalLevel int32

const (
	PostgresqlConfig10_WAL_LEVEL_UNSPECIFIED PostgresqlConfig10_WalLevel = 0
	PostgresqlConfig10_WAL_LEVEL_REPLICA     PostgresqlConfig10_WalLevel = 1
	PostgresqlConfig10_WAL_LEVEL_LOGICAL     PostgresqlConfig10_WalLevel = 2
)

// Enum value maps for PostgresqlConfig10_WalLevel.
var (
	PostgresqlConfig10_WalLevel_name = map[int32]string{
		0: "WAL_LEVEL_UNSPECIFIED",
		1: "WAL_LEVEL_REPLICA",
		2: "WAL_LEVEL_LOGICAL",
	}
	PostgresqlConfig10_WalLevel_value = map[string]int32{
		"WAL_LEVEL_UNSPECIFIED": 0,
		"WAL_LEVEL_REPLICA":     1,
		"WAL_LEVEL_LOGICAL":     2,
	}
)

func (x PostgresqlConfig10_WalLevel) Enum() *PostgresqlConfig10_WalLevel {
	p := new(PostgresqlConfig10_WalLevel)
	*p = x
	return p
}

func (x PostgresqlConfig10_WalLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_WalLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[0].Descriptor()
}

func (PostgresqlConfig10_WalLevel) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[0]
}

func (x PostgresqlConfig10_WalLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_WalLevel.Descriptor instead.
func (PostgresqlConfig10_WalLevel) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 0}
}

type PostgresqlConfig10_SynchronousCommit int32

const (
	PostgresqlConfig10_SYNCHRONOUS_COMMIT_UNSPECIFIED  PostgresqlConfig10_SynchronousCommit = 0
	PostgresqlConfig10_SYNCHRONOUS_COMMIT_ON           PostgresqlConfig10_SynchronousCommit = 1
	PostgresqlConfig10_SYNCHRONOUS_COMMIT_OFF          PostgresqlConfig10_SynchronousCommit = 2
	PostgresqlConfig10_SYNCHRONOUS_COMMIT_LOCAL        PostgresqlConfig10_SynchronousCommit = 3
	PostgresqlConfig10_SYNCHRONOUS_COMMIT_REMOTE_WRITE PostgresqlConfig10_SynchronousCommit = 4
	PostgresqlConfig10_SYNCHRONOUS_COMMIT_REMOTE_APPLY PostgresqlConfig10_SynchronousCommit = 5
)

// Enum value maps for PostgresqlConfig10_SynchronousCommit.
var (
	PostgresqlConfig10_SynchronousCommit_name = map[int32]string{
		0: "SYNCHRONOUS_COMMIT_UNSPECIFIED",
		1: "SYNCHRONOUS_COMMIT_ON",
		2: "SYNCHRONOUS_COMMIT_OFF",
		3: "SYNCHRONOUS_COMMIT_LOCAL",
		4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE",
		5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY",
	}
	PostgresqlConfig10_SynchronousCommit_value = map[string]int32{
		"SYNCHRONOUS_COMMIT_UNSPECIFIED":  0,
		"SYNCHRONOUS_COMMIT_ON":           1,
		"SYNCHRONOUS_COMMIT_OFF":          2,
		"SYNCHRONOUS_COMMIT_LOCAL":        3,
		"SYNCHRONOUS_COMMIT_REMOTE_WRITE": 4,
		"SYNCHRONOUS_COMMIT_REMOTE_APPLY": 5,
	}
)

func (x PostgresqlConfig10_SynchronousCommit) Enum() *PostgresqlConfig10_SynchronousCommit {
	p := new(PostgresqlConfig10_SynchronousCommit)
	*p = x
	return p
}

func (x PostgresqlConfig10_SynchronousCommit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_SynchronousCommit) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[1].Descriptor()
}

func (PostgresqlConfig10_SynchronousCommit) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[1]
}

func (x PostgresqlConfig10_SynchronousCommit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_SynchronousCommit.Descriptor instead.
func (PostgresqlConfig10_SynchronousCommit) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 1}
}

type PostgresqlConfig10_ConstraintExclusion int32

const (
	PostgresqlConfig10_CONSTRAINT_EXCLUSION_UNSPECIFIED PostgresqlConfig10_ConstraintExclusion = 0
	PostgresqlConfig10_CONSTRAINT_EXCLUSION_ON          PostgresqlConfig10_ConstraintExclusion = 1
	PostgresqlConfig10_CONSTRAINT_EXCLUSION_OFF         PostgresqlConfig10_ConstraintExclusion = 2
	PostgresqlConfig10_CONSTRAINT_EXCLUSION_PARTITION   PostgresqlConfig10_ConstraintExclusion = 3
)

// Enum value maps for PostgresqlConfig10_ConstraintExclusion.
var (
	PostgresqlConfig10_ConstraintExclusion_name = map[int32]string{
		0: "CONSTRAINT_EXCLUSION_UNSPECIFIED",
		1: "CONSTRAINT_EXCLUSION_ON",
		2: "CONSTRAINT_EXCLUSION_OFF",
		3: "CONSTRAINT_EXCLUSION_PARTITION",
	}
	PostgresqlConfig10_ConstraintExclusion_value = map[string]int32{
		"CONSTRAINT_EXCLUSION_UNSPECIFIED": 0,
		"CONSTRAINT_EXCLUSION_ON":          1,
		"CONSTRAINT_EXCLUSION_OFF":         2,
		"CONSTRAINT_EXCLUSION_PARTITION":   3,
	}
)

func (x PostgresqlConfig10_ConstraintExclusion) Enum() *PostgresqlConfig10_ConstraintExclusion {
	p := new(PostgresqlConfig10_ConstraintExclusion)
	*p = x
	return p
}

func (x PostgresqlConfig10_ConstraintExclusion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_ConstraintExclusion) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[2].Descriptor()
}

func (PostgresqlConfig10_ConstraintExclusion) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[2]
}

func (x PostgresqlConfig10_ConstraintExclusion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_ConstraintExclusion.Descriptor instead.
func (PostgresqlConfig10_ConstraintExclusion) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 2}
}

type PostgresqlConfig10_ForceParallelMode int32

const (
	PostgresqlConfig10_FORCE_PARALLEL_MODE_UNSPECIFIED PostgresqlConfig10_ForceParallelMode = 0
	PostgresqlConfig10_FORCE_PARALLEL_MODE_ON          PostgresqlConfig10_ForceParallelMode = 1
	PostgresqlConfig10_FORCE_PARALLEL_MODE_OFF         PostgresqlConfig10_ForceParallelMode = 2
	PostgresqlConfig10_FORCE_PARALLEL_MODE_REGRESS     PostgresqlConfig10_ForceParallelMode = 3
)

// Enum value maps for PostgresqlConfig10_ForceParallelMode.
var (
	PostgresqlConfig10_ForceParallelMode_name = map[int32]string{
		0: "FORCE_PARALLEL_MODE_UNSPECIFIED",
		1: "FORCE_PARALLEL_MODE_ON",
		2: "FORCE_PARALLEL_MODE_OFF",
		3: "FORCE_PARALLEL_MODE_REGRESS",
	}
	PostgresqlConfig10_ForceParallelMode_value = map[string]int32{
		"FORCE_PARALLEL_MODE_UNSPECIFIED": 0,
		"FORCE_PARALLEL_MODE_ON":          1,
		"FORCE_PARALLEL_MODE_OFF":         2,
		"FORCE_PARALLEL_MODE_REGRESS":     3,
	}
)

func (x PostgresqlConfig10_ForceParallelMode) Enum() *PostgresqlConfig10_ForceParallelMode {
	p := new(PostgresqlConfig10_ForceParallelMode)
	*p = x
	return p
}

func (x PostgresqlConfig10_ForceParallelMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_ForceParallelMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[3].Descriptor()
}

func (PostgresqlConfig10_ForceParallelMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[3]
}

func (x PostgresqlConfig10_ForceParallelMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_ForceParallelMode.Descriptor instead.
func (PostgresqlConfig10_ForceParallelMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 3}
}

type PostgresqlConfig10_LogLevel int32

const (
	PostgresqlConfig10_LOG_LEVEL_UNSPECIFIED PostgresqlConfig10_LogLevel = 0
	PostgresqlConfig10_LOG_LEVEL_DEBUG5      PostgresqlConfig10_LogLevel = 1
	PostgresqlConfig10_LOG_LEVEL_DEBUG4      PostgresqlConfig10_LogLevel = 2
	PostgresqlConfig10_LOG_LEVEL_DEBUG3      PostgresqlConfig10_LogLevel = 3
	PostgresqlConfig10_LOG_LEVEL_DEBUG2      PostgresqlConfig10_LogLevel = 4
	PostgresqlConfig10_LOG_LEVEL_DEBUG1      PostgresqlConfig10_LogLevel = 5
	PostgresqlConfig10_LOG_LEVEL_LOG         PostgresqlConfig10_LogLevel = 6
	PostgresqlConfig10_LOG_LEVEL_NOTICE      PostgresqlConfig10_LogLevel = 7
	PostgresqlConfig10_LOG_LEVEL_WARNING     PostgresqlConfig10_LogLevel = 8
	PostgresqlConfig10_LOG_LEVEL_ERROR       PostgresqlConfig10_LogLevel = 9
	PostgresqlConfig10_LOG_LEVEL_FATAL       PostgresqlConfig10_LogLevel = 10
	PostgresqlConfig10_LOG_LEVEL_PANIC       PostgresqlConfig10_LogLevel = 11
)

// Enum value maps for PostgresqlConfig10_LogLevel.
var (
	PostgresqlConfig10_LogLevel_name = map[int32]string{
		0:  "LOG_LEVEL_UNSPECIFIED",
		1:  "LOG_LEVEL_DEBUG5",
		2:  "LOG_LEVEL_DEBUG4",
		3:  "LOG_LEVEL_DEBUG3",
		4:  "LOG_LEVEL_DEBUG2",
		5:  "LOG_LEVEL_DEBUG1",
		6:  "LOG_LEVEL_LOG",
		7:  "LOG_LEVEL_NOTICE",
		8:  "LOG_LEVEL_WARNING",
		9:  "LOG_LEVEL_ERROR",
		10: "LOG_LEVEL_FATAL",
		11: "LOG_LEVEL_PANIC",
	}
	PostgresqlConfig10_LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"LOG_LEVEL_DEBUG5":      1,
		"LOG_LEVEL_DEBUG4":      2,
		"LOG_LEVEL_DEBUG3":      3,
		"LOG_LEVEL_DEBUG2":      4,
		"LOG_LEVEL_DEBUG1":      5,
		"LOG_LEVEL_LOG":         6,
		"LOG_LEVEL_NOTICE":      7,
		"LOG_LEVEL_WARNING":     8,
		"LOG_LEVEL_ERROR":       9,
		"LOG_LEVEL_FATAL":       10,
		"LOG_LEVEL_PANIC":       11,
	}
)

func (x PostgresqlConfig10_LogLevel) Enum() *PostgresqlConfig10_LogLevel {
	p := new(PostgresqlConfig10_LogLevel)
	*p = x
	return p
}

func (x PostgresqlConfig10_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[4].Descriptor()
}

func (PostgresqlConfig10_LogLevel) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[4]
}

func (x PostgresqlConfig10_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_LogLevel.Descriptor instead.
func (PostgresqlConfig10_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 4}
}

type PostgresqlConfig10_LogErrorVerbosity int32

const (
	PostgresqlConfig10_LOG_ERROR_VERBOSITY_UNSPECIFIED PostgresqlConfig10_LogErrorVerbosity = 0
	PostgresqlConfig10_LOG_ERROR_VERBOSITY_TERSE       PostgresqlConfig10_LogErrorVerbosity = 1
	PostgresqlConfig10_LOG_ERROR_VERBOSITY_DEFAULT     PostgresqlConfig10_LogErrorVerbosity = 2
	PostgresqlConfig10_LOG_ERROR_VERBOSITY_VERBOSE     PostgresqlConfig10_LogErrorVerbosity = 3
)

// Enum value maps for PostgresqlConfig10_LogErrorVerbosity.
var (
	PostgresqlConfig10_LogErrorVerbosity_name = map[int32]string{
		0: "LOG_ERROR_VERBOSITY_UNSPECIFIED",
		1: "LOG_ERROR_VERBOSITY_TERSE",
		2: "LOG_ERROR_VERBOSITY_DEFAULT",
		3: "LOG_ERROR_VERBOSITY_VERBOSE",
	}
	PostgresqlConfig10_LogErrorVerbosity_value = map[string]int32{
		"LOG_ERROR_VERBOSITY_UNSPECIFIED": 0,
		"LOG_ERROR_VERBOSITY_TERSE":       1,
		"LOG_ERROR_VERBOSITY_DEFAULT":     2,
		"LOG_ERROR_VERBOSITY_VERBOSE":     3,
	}
)

func (x PostgresqlConfig10_LogErrorVerbosity) Enum() *PostgresqlConfig10_LogErrorVerbosity {
	p := new(PostgresqlConfig10_LogErrorVerbosity)
	*p = x
	return p
}

func (x PostgresqlConfig10_LogErrorVerbosity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_LogErrorVerbosity) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[5].Descriptor()
}

func (PostgresqlConfig10_LogErrorVerbosity) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[5]
}

func (x PostgresqlConfig10_LogErrorVerbosity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_LogErrorVerbosity.Descriptor instead.
func (PostgresqlConfig10_LogErrorVerbosity) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 5}
}

type PostgresqlConfig10_LogStatement int32

const (
	PostgresqlConfig10_LOG_STATEMENT_UNSPECIFIED PostgresqlConfig10_LogStatement = 0
	PostgresqlConfig10_LOG_STATEMENT_NONE        PostgresqlConfig10_LogStatement = 1
	PostgresqlConfig10_LOG_STATEMENT_DDL         PostgresqlConfig10_LogStatement = 2
	PostgresqlConfig10_LOG_STATEMENT_MOD         PostgresqlConfig10_LogStatement = 3
	PostgresqlConfig10_LOG_STATEMENT_ALL         PostgresqlConfig10_LogStatement = 4
)

// Enum value maps for PostgresqlConfig10_LogStatement.
var (
	PostgresqlConfig10_LogStatement_name = map[int32]string{
		0: "LOG_STATEMENT_UNSPECIFIED",
		1: "LOG_STATEMENT_NONE",
		2: "LOG_STATEMENT_DDL",
		3: "LOG_STATEMENT_MOD",
		4: "LOG_STATEMENT_ALL",
	}
	PostgresqlConfig10_LogStatement_value = map[string]int32{
		"LOG_STATEMENT_UNSPECIFIED": 0,
		"LOG_STATEMENT_NONE":        1,
		"LOG_STATEMENT_DDL":         2,
		"LOG_STATEMENT_MOD":         3,
		"LOG_STATEMENT_ALL":         4,
	}
)

func (x PostgresqlConfig10_LogStatement) Enum() *PostgresqlConfig10_LogStatement {
	p := new(PostgresqlConfig10_LogStatement)
	*p = x
	return p
}

func (x PostgresqlConfig10_LogStatement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_LogStatement) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[6].Descriptor()
}

func (PostgresqlConfig10_LogStatement) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[6]
}

func (x PostgresqlConfig10_LogStatement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_LogStatement.Descriptor instead.
func (PostgresqlConfig10_LogStatement) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 6}
}

type PostgresqlConfig10_TransactionIsolation int32

const (
	PostgresqlConfig10_TRANSACTION_ISOLATION_UNSPECIFIED      PostgresqlConfig10_TransactionIsolation = 0
	PostgresqlConfig10_TRANSACTION_ISOLATION_READ_UNCOMMITTED PostgresqlConfig10_TransactionIsolation = 1
	PostgresqlConfig10_TRANSACTION_ISOLATION_READ_COMMITTED   PostgresqlConfig10_TransactionIsolation = 2
	PostgresqlConfig10_TRANSACTION_ISOLATION_REPEATABLE_READ  PostgresqlConfig10_TransactionIsolation = 3
	PostgresqlConfig10_TRANSACTION_ISOLATION_SERIALIZABLE     PostgresqlConfig10_TransactionIsolation = 4
)

// Enum value maps for PostgresqlConfig10_TransactionIsolation.
var (
	PostgresqlConfig10_TransactionIsolation_name = map[int32]string{
		0: "TRANSACTION_ISOLATION_UNSPECIFIED",
		1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED",
		2: "TRANSACTION_ISOLATION_READ_COMMITTED",
		3: "TRANSACTION_ISOLATION_REPEATABLE_READ",
		4: "TRANSACTION_ISOLATION_SERIALIZABLE",
	}
	PostgresqlConfig10_TransactionIsolation_value = map[string]int32{
		"TRANSACTION_ISOLATION_UNSPECIFIED":      0,
		"TRANSACTION_ISOLATION_READ_UNCOMMITTED": 1,
		"TRANSACTION_ISOLATION_READ_COMMITTED":   2,
		"TRANSACTION_ISOLATION_REPEATABLE_READ":  3,
		"TRANSACTION_ISOLATION_SERIALIZABLE":     4,
	}
)

func (x PostgresqlConfig10_TransactionIsolation) Enum() *PostgresqlConfig10_TransactionIsolation {
	p := new(PostgresqlConfig10_TransactionIsolation)
	*p = x
	return p
}

func (x PostgresqlConfig10_TransactionIsolation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_TransactionIsolation) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[7].Descriptor()
}

func (PostgresqlConfig10_TransactionIsolation) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[7]
}

func (x PostgresqlConfig10_TransactionIsolation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_TransactionIsolation.Descriptor instead.
func (PostgresqlConfig10_TransactionIsolation) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 7}
}

type PostgresqlConfig10_ByteaOutput int32

const (
	PostgresqlConfig10_BYTEA_OUTPUT_UNSPECIFIED PostgresqlConfig10_ByteaOutput = 0
	PostgresqlConfig10_BYTEA_OUTPUT_HEX         PostgresqlConfig10_ByteaOutput = 1
	PostgresqlConfig10_BYTEA_OUTPUT_ESCAPED     PostgresqlConfig10_ByteaOutput = 2
)

// Enum value maps for PostgresqlConfig10_ByteaOutput.
var (
	PostgresqlConfig10_ByteaOutput_name = map[int32]string{
		0: "BYTEA_OUTPUT_UNSPECIFIED",
		1: "BYTEA_OUTPUT_HEX",
		2: "BYTEA_OUTPUT_ESCAPED",
	}
	PostgresqlConfig10_ByteaOutput_value = map[string]int32{
		"BYTEA_OUTPUT_UNSPECIFIED": 0,
		"BYTEA_OUTPUT_HEX":         1,
		"BYTEA_OUTPUT_ESCAPED":     2,
	}
)

func (x PostgresqlConfig10_ByteaOutput) Enum() *PostgresqlConfig10_ByteaOutput {
	p := new(PostgresqlConfig10_ByteaOutput)
	*p = x
	return p
}

func (x PostgresqlConfig10_ByteaOutput) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_ByteaOutput) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[8].Descriptor()
}

func (PostgresqlConfig10_ByteaOutput) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[8]
}

func (x PostgresqlConfig10_ByteaOutput) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_ByteaOutput.Descriptor instead.
func (PostgresqlConfig10_ByteaOutput) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 8}
}

type PostgresqlConfig10_XmlBinary int32

const (
	PostgresqlConfig10_XML_BINARY_UNSPECIFIED PostgresqlConfig10_XmlBinary = 0
	PostgresqlConfig10_XML_BINARY_BASE64      PostgresqlConfig10_XmlBinary = 1
	PostgresqlConfig10_XML_BINARY_HEX         PostgresqlConfig10_XmlBinary = 2
)

// Enum value maps for PostgresqlConfig10_XmlBinary.
var (
	PostgresqlConfig10_XmlBinary_name = map[int32]string{
		0: "XML_BINARY_UNSPECIFIED",
		1: "XML_BINARY_BASE64",
		2: "XML_BINARY_HEX",
	}
	PostgresqlConfig10_XmlBinary_value = map[string]int32{
		"XML_BINARY_UNSPECIFIED": 0,
		"XML_BINARY_BASE64":      1,
		"XML_BINARY_HEX":         2,
	}
)

func (x PostgresqlConfig10_XmlBinary) Enum() *PostgresqlConfig10_XmlBinary {
	p := new(PostgresqlConfig10_XmlBinary)
	*p = x
	return p
}

func (x PostgresqlConfig10_XmlBinary) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_XmlBinary) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[9].Descriptor()
}

func (PostgresqlConfig10_XmlBinary) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[9]
}

func (x PostgresqlConfig10_XmlBinary) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_XmlBinary.Descriptor instead.
func (PostgresqlConfig10_XmlBinary) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 9}
}

type PostgresqlConfig10_XmlOption int32

const (
	PostgresqlConfig10_XML_OPTION_UNSPECIFIED PostgresqlConfig10_XmlOption = 0
	PostgresqlConfig10_XML_OPTION_DOCUMENT    PostgresqlConfig10_XmlOption = 1
	PostgresqlConfig10_XML_OPTION_CONTENT     PostgresqlConfig10_XmlOption = 2
)

// Enum value maps for PostgresqlConfig10_XmlOption.
var (
	PostgresqlConfig10_XmlOption_name = map[int32]string{
		0: "XML_OPTION_UNSPECIFIED",
		1: "XML_OPTION_DOCUMENT",
		2: "XML_OPTION_CONTENT",
	}
	PostgresqlConfig10_XmlOption_value = map[string]int32{
		"XML_OPTION_UNSPECIFIED": 0,
		"XML_OPTION_DOCUMENT":    1,
		"XML_OPTION_CONTENT":     2,
	}
)

func (x PostgresqlConfig10_XmlOption) Enum() *PostgresqlConfig10_XmlOption {
	p := new(PostgresqlConfig10_XmlOption)
	*p = x
	return p
}

func (x PostgresqlConfig10_XmlOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_XmlOption) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[10].Descriptor()
}

func (PostgresqlConfig10_XmlOption) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[10]
}

func (x PostgresqlConfig10_XmlOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_XmlOption.Descriptor instead.
func (PostgresqlConfig10_XmlOption) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 10}
}

type PostgresqlConfig10_BackslashQuote int32

const (
	PostgresqlConfig10_BACKSLASH_QUOTE_UNSPECIFIED   PostgresqlConfig10_BackslashQuote = 0
	PostgresqlConfig10_BACKSLASH_QUOTE               PostgresqlConfig10_BackslashQuote = 1
	PostgresqlConfig10_BACKSLASH_QUOTE_ON            PostgresqlConfig10_BackslashQuote = 2
	PostgresqlConfig10_BACKSLASH_QUOTE_OFF           PostgresqlConfig10_BackslashQuote = 3
	PostgresqlConfig10_BACKSLASH_QUOTE_SAFE_ENCODING PostgresqlConfig10_BackslashQuote = 4
)

// Enum value maps for PostgresqlConfig10_BackslashQuote.
var (
	PostgresqlConfig10_BackslashQuote_name = map[int32]string{
		0: "BACKSLASH_QUOTE_UNSPECIFIED",
		1: "BACKSLASH_QUOTE",
		2: "BACKSLASH_QUOTE_ON",
		3: "BACKSLASH_QUOTE_OFF",
		4: "BACKSLASH_QUOTE_SAFE_ENCODING",
	}
	PostgresqlConfig10_BackslashQuote_value = map[string]int32{
		"BACKSLASH_QUOTE_UNSPECIFIED":   0,
		"BACKSLASH_QUOTE":               1,
		"BACKSLASH_QUOTE_ON":            2,
		"BACKSLASH_QUOTE_OFF":           3,
		"BACKSLASH_QUOTE_SAFE_ENCODING": 4,
	}
)

func (x PostgresqlConfig10_BackslashQuote) Enum() *PostgresqlConfig10_BackslashQuote {
	p := new(PostgresqlConfig10_BackslashQuote)
	*p = x
	return p
}

func (x PostgresqlConfig10_BackslashQuote) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_BackslashQuote) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[11].Descriptor()
}

func (PostgresqlConfig10_BackslashQuote) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[11]
}

func (x PostgresqlConfig10_BackslashQuote) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_BackslashQuote.Descriptor instead.
func (PostgresqlConfig10_BackslashQuote) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 11}
}

type PostgresqlConfig10_PgHintPlanDebugPrint int32

const (
	PostgresqlConfig10_PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED PostgresqlConfig10_PgHintPlanDebugPrint = 0
	PostgresqlConfig10_PG_HINT_PLAN_DEBUG_PRINT_OFF         PostgresqlConfig10_PgHintPlanDebugPrint = 1
	PostgresqlConfig10_PG_HINT_PLAN_DEBUG_PRINT_ON          PostgresqlConfig10_PgHintPlanDebugPrint = 2
	PostgresqlConfig10_PG_HINT_PLAN_DEBUG_PRINT_DETAILED    PostgresqlConfig10_PgHintPlanDebugPrint = 3
	PostgresqlConfig10_PG_HINT_PLAN_DEBUG_PRINT_VERBOSE     PostgresqlConfig10_PgHintPlanDebugPrint = 4
)

// Enum value maps for PostgresqlConfig10_PgHintPlanDebugPrint.
var (
	PostgresqlConfig10_PgHintPlanDebugPrint_name = map[int32]string{
		0: "PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED",
		1: "PG_HINT_PLAN_DEBUG_PRINT_OFF",
		2: "PG_HINT_PLAN_DEBUG_PRINT_ON",
		3: "PG_HINT_PLAN_DEBUG_PRINT_DETAILED",
		4: "PG_HINT_PLAN_DEBUG_PRINT_VERBOSE",
	}
	PostgresqlConfig10_PgHintPlanDebugPrint_value = map[string]int32{
		"PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED": 0,
		"PG_HINT_PLAN_DEBUG_PRINT_OFF":         1,
		"PG_HINT_PLAN_DEBUG_PRINT_ON":          2,
		"PG_HINT_PLAN_DEBUG_PRINT_DETAILED":    3,
		"PG_HINT_PLAN_DEBUG_PRINT_VERBOSE":     4,
	}
)

func (x PostgresqlConfig10_PgHintPlanDebugPrint) Enum() *PostgresqlConfig10_PgHintPlanDebugPrint {
	p := new(PostgresqlConfig10_PgHintPlanDebugPrint)
	*p = x
	return p
}

func (x PostgresqlConfig10_PgHintPlanDebugPrint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_PgHintPlanDebugPrint) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[12].Descriptor()
}

func (PostgresqlConfig10_PgHintPlanDebugPrint) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[12]
}

func (x PostgresqlConfig10_PgHintPlanDebugPrint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_PgHintPlanDebugPrint.Descriptor instead.
func (PostgresqlConfig10_PgHintPlanDebugPrint) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 12}
}

type PostgresqlConfig10_SharedPreloadLibraries int32

const (
	PostgresqlConfig10_SHARED_PRELOAD_LIBRARIES_UNSPECIFIED  PostgresqlConfig10_SharedPreloadLibraries = 0
	PostgresqlConfig10_SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN PostgresqlConfig10_SharedPreloadLibraries = 1
	PostgresqlConfig10_SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN PostgresqlConfig10_SharedPreloadLibraries = 2
	PostgresqlConfig10_SHARED_PRELOAD_LIBRARIES_TIMESCALEDB  PostgresqlConfig10_SharedPreloadLibraries = 3
	PostgresqlConfig10_SHARED_PRELOAD_LIBRARIES_PG_QUALSTATS PostgresqlConfig10_SharedPreloadLibraries = 4
	PostgresqlConfig10_SHARED_PRELOAD_LIBRARIES_PG_CRON      PostgresqlConfig10_SharedPreloadLibraries = 5
)

// Enum value maps for PostgresqlConfig10_SharedPreloadLibraries.
var (
	PostgresqlConfig10_SharedPreloadLibraries_name = map[int32]string{
		0: "SHARED_PRELOAD_LIBRARIES_UNSPECIFIED",
		1: "SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN",
		2: "SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN",
		3: "SHARED_PRELOAD_LIBRARIES_TIMESCALEDB",
		4: "SHARED_PRELOAD_LIBRARIES_PG_QUALSTATS",
		5: "SHARED_PRELOAD_LIBRARIES_PG_CRON",
	}
	PostgresqlConfig10_SharedPreloadLibraries_value = map[string]int32{
		"SHARED_PRELOAD_LIBRARIES_UNSPECIFIED":  0,
		"SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN": 1,
		"SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN": 2,
		"SHARED_PRELOAD_LIBRARIES_TIMESCALEDB":  3,
		"SHARED_PRELOAD_LIBRARIES_PG_QUALSTATS": 4,
		"SHARED_PRELOAD_LIBRARIES_PG_CRON":      5,
	}
)

func (x PostgresqlConfig10_SharedPreloadLibraries) Enum() *PostgresqlConfig10_SharedPreloadLibraries {
	p := new(PostgresqlConfig10_SharedPreloadLibraries)
	*p = x
	return p
}

func (x PostgresqlConfig10_SharedPreloadLibraries) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlConfig10_SharedPreloadLibraries) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[13].Descriptor()
}

func (PostgresqlConfig10_SharedPreloadLibraries) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes[13]
}

func (x PostgresqlConfig10_SharedPreloadLibraries) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlConfig10_SharedPreloadLibraries.Descriptor instead.
func (PostgresqlConfig10_SharedPreloadLibraries) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0, 13}
}

// Options and structure of `PostgresqlConfig` reflects PostgreSQL configuration file
// parameters whose detailed description is available in
// [PostgreSQL documentation](https://www.postgresql.org/docs/10/runtime-config.html).
type PostgresqlConfig10 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxConnections                  *wrapperspb.Int64Value                      `protobuf:"bytes,1,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	SharedBuffers                   *wrapperspb.Int64Value                      `protobuf:"bytes,2,opt,name=shared_buffers,json=sharedBuffers,proto3" json:"shared_buffers,omitempty"` // in bytes.
	TempBuffers                     *wrapperspb.Int64Value                      `protobuf:"bytes,3,opt,name=temp_buffers,json=tempBuffers,proto3" json:"temp_buffers,omitempty"`       // in bytes.
	MaxPreparedTransactions         *wrapperspb.Int64Value                      `protobuf:"bytes,4,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	WorkMem                         *wrapperspb.Int64Value                      `protobuf:"bytes,5,opt,name=work_mem,json=workMem,proto3" json:"work_mem,omitempty"`                                    // in bytes.
	MaintenanceWorkMem              *wrapperspb.Int64Value                      `protobuf:"bytes,6,opt,name=maintenance_work_mem,json=maintenanceWorkMem,proto3" json:"maintenance_work_mem,omitempty"` // in bytes.
	ReplacementSortTuples           *wrapperspb.Int64Value                      `protobuf:"bytes,7,opt,name=replacement_sort_tuples,json=replacementSortTuples,proto3" json:"replacement_sort_tuples,omitempty"`
	AutovacuumWorkMem               *wrapperspb.Int64Value                      `protobuf:"bytes,8,opt,name=autovacuum_work_mem,json=autovacuumWorkMem,proto3" json:"autovacuum_work_mem,omitempty"` // in bytes.
	TempFileLimit                   *wrapperspb.Int64Value                      `protobuf:"bytes,9,opt,name=temp_file_limit,json=tempFileLimit,proto3" json:"temp_file_limit,omitempty"`             // in bytes.
	VacuumCostDelay                 *wrapperspb.Int64Value                      `protobuf:"bytes,10,opt,name=vacuum_cost_delay,json=vacuumCostDelay,proto3" json:"vacuum_cost_delay,omitempty"`      // in milliseconds.
	VacuumCostPageHit               *wrapperspb.Int64Value                      `protobuf:"bytes,11,opt,name=vacuum_cost_page_hit,json=vacuumCostPageHit,proto3" json:"vacuum_cost_page_hit,omitempty"`
	VacuumCostPageMiss              *wrapperspb.Int64Value                      `protobuf:"bytes,12,opt,name=vacuum_cost_page_miss,json=vacuumCostPageMiss,proto3" json:"vacuum_cost_page_miss,omitempty"`
	VacuumCostPageDirty             *wrapperspb.Int64Value                      `protobuf:"bytes,13,opt,name=vacuum_cost_page_dirty,json=vacuumCostPageDirty,proto3" json:"vacuum_cost_page_dirty,omitempty"`
	VacuumCostLimit                 *wrapperspb.Int64Value                      `protobuf:"bytes,14,opt,name=vacuum_cost_limit,json=vacuumCostLimit,proto3" json:"vacuum_cost_limit,omitempty"`
	BgwriterDelay                   *wrapperspb.Int64Value                      `protobuf:"bytes,15,opt,name=bgwriter_delay,json=bgwriterDelay,proto3" json:"bgwriter_delay,omitempty"` // in milliseconds.
	BgwriterLruMaxpages             *wrapperspb.Int64Value                      `protobuf:"bytes,16,opt,name=bgwriter_lru_maxpages,json=bgwriterLruMaxpages,proto3" json:"bgwriter_lru_maxpages,omitempty"`
	BgwriterLruMultiplier           *wrapperspb.DoubleValue                     `protobuf:"bytes,17,opt,name=bgwriter_lru_multiplier,json=bgwriterLruMultiplier,proto3" json:"bgwriter_lru_multiplier,omitempty"`
	BgwriterFlushAfter              *wrapperspb.Int64Value                      `protobuf:"bytes,18,opt,name=bgwriter_flush_after,json=bgwriterFlushAfter,proto3" json:"bgwriter_flush_after,omitempty"`
	BackendFlushAfter               *wrapperspb.Int64Value                      `protobuf:"bytes,19,opt,name=backend_flush_after,json=backendFlushAfter,proto3" json:"backend_flush_after,omitempty"`
	OldSnapshotThreshold            *wrapperspb.Int64Value                      `protobuf:"bytes,20,opt,name=old_snapshot_threshold,json=oldSnapshotThreshold,proto3" json:"old_snapshot_threshold,omitempty"`
	WalLevel                        PostgresqlConfig10_WalLevel                 `protobuf:"varint,21,opt,name=wal_level,json=walLevel,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_WalLevel" json:"wal_level,omitempty"`
	SynchronousCommit               PostgresqlConfig10_SynchronousCommit        `protobuf:"varint,22,opt,name=synchronous_commit,json=synchronousCommit,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_SynchronousCommit" json:"synchronous_commit,omitempty"`
	CheckpointTimeout               *wrapperspb.Int64Value                      `protobuf:"bytes,23,opt,name=checkpoint_timeout,json=checkpointTimeout,proto3" json:"checkpoint_timeout,omitempty"` // in milliseconds.
	CheckpointCompletionTarget      *wrapperspb.DoubleValue                     `protobuf:"bytes,24,opt,name=checkpoint_completion_target,json=checkpointCompletionTarget,proto3" json:"checkpoint_completion_target,omitempty"`
	CheckpointFlushAfter            *wrapperspb.Int64Value                      `protobuf:"bytes,25,opt,name=checkpoint_flush_after,json=checkpointFlushAfter,proto3" json:"checkpoint_flush_after,omitempty"`
	MaxWalSize                      *wrapperspb.Int64Value                      `protobuf:"bytes,26,opt,name=max_wal_size,json=maxWalSize,proto3" json:"max_wal_size,omitempty"`                                             // in bytes.
	MinWalSize                      *wrapperspb.Int64Value                      `protobuf:"bytes,27,opt,name=min_wal_size,json=minWalSize,proto3" json:"min_wal_size,omitempty"`                                             // in bytes.
	MaxStandbyStreamingDelay        *wrapperspb.Int64Value                      `protobuf:"bytes,28,opt,name=max_standby_streaming_delay,json=maxStandbyStreamingDelay,proto3" json:"max_standby_streaming_delay,omitempty"` // in milliseconds.
	DefaultStatisticsTarget         *wrapperspb.Int64Value                      `protobuf:"bytes,29,opt,name=default_statistics_target,json=defaultStatisticsTarget,proto3" json:"default_statistics_target,omitempty"`
	ConstraintExclusion             PostgresqlConfig10_ConstraintExclusion      `protobuf:"varint,30,opt,name=constraint_exclusion,json=constraintExclusion,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_ConstraintExclusion" json:"constraint_exclusion,omitempty"`
	CursorTupleFraction             *wrapperspb.DoubleValue                     `protobuf:"bytes,31,opt,name=cursor_tuple_fraction,json=cursorTupleFraction,proto3" json:"cursor_tuple_fraction,omitempty"`
	FromCollapseLimit               *wrapperspb.Int64Value                      `protobuf:"bytes,32,opt,name=from_collapse_limit,json=fromCollapseLimit,proto3" json:"from_collapse_limit,omitempty"`
	JoinCollapseLimit               *wrapperspb.Int64Value                      `protobuf:"bytes,33,opt,name=join_collapse_limit,json=joinCollapseLimit,proto3" json:"join_collapse_limit,omitempty"`
	ForceParallelMode               PostgresqlConfig10_ForceParallelMode        `protobuf:"varint,34,opt,name=force_parallel_mode,json=forceParallelMode,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_ForceParallelMode" json:"force_parallel_mode,omitempty"`
	ClientMinMessages               PostgresqlConfig10_LogLevel                 `protobuf:"varint,35,opt,name=client_min_messages,json=clientMinMessages,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_LogLevel" json:"client_min_messages,omitempty"`
	LogMinMessages                  PostgresqlConfig10_LogLevel                 `protobuf:"varint,36,opt,name=log_min_messages,json=logMinMessages,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_LogLevel" json:"log_min_messages,omitempty"`
	LogMinErrorStatement            PostgresqlConfig10_LogLevel                 `protobuf:"varint,37,opt,name=log_min_error_statement,json=logMinErrorStatement,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_LogLevel" json:"log_min_error_statement,omitempty"`
	LogMinDurationStatement         *wrapperspb.Int64Value                      `protobuf:"bytes,38,opt,name=log_min_duration_statement,json=logMinDurationStatement,proto3" json:"log_min_duration_statement,omitempty"` // in milliseconds.
	LogCheckpoints                  *wrapperspb.BoolValue                       `protobuf:"bytes,39,opt,name=log_checkpoints,json=logCheckpoints,proto3" json:"log_checkpoints,omitempty"`
	LogConnections                  *wrapperspb.BoolValue                       `protobuf:"bytes,40,opt,name=log_connections,json=logConnections,proto3" json:"log_connections,omitempty"`
	LogDisconnections               *wrapperspb.BoolValue                       `protobuf:"bytes,41,opt,name=log_disconnections,json=logDisconnections,proto3" json:"log_disconnections,omitempty"`
	LogDuration                     *wrapperspb.BoolValue                       `protobuf:"bytes,42,opt,name=log_duration,json=logDuration,proto3" json:"log_duration,omitempty"`
	LogErrorVerbosity               PostgresqlConfig10_LogErrorVerbosity        `protobuf:"varint,43,opt,name=log_error_verbosity,json=logErrorVerbosity,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_LogErrorVerbosity" json:"log_error_verbosity,omitempty"`
	LogLockWaits                    *wrapperspb.BoolValue                       `protobuf:"bytes,44,opt,name=log_lock_waits,json=logLockWaits,proto3" json:"log_lock_waits,omitempty"`
	LogStatement                    PostgresqlConfig10_LogStatement             `protobuf:"varint,45,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_LogStatement" json:"log_statement,omitempty"`
	LogTempFiles                    *wrapperspb.Int64Value                      `protobuf:"bytes,46,opt,name=log_temp_files,json=logTempFiles,proto3" json:"log_temp_files,omitempty"`
	SearchPath                      string                                      `protobuf:"bytes,47,opt,name=search_path,json=searchPath,proto3" json:"search_path,omitempty"`
	RowSecurity                     *wrapperspb.BoolValue                       `protobuf:"bytes,48,opt,name=row_security,json=rowSecurity,proto3" json:"row_security,omitempty"`
	DefaultTransactionIsolation     PostgresqlConfig10_TransactionIsolation     `protobuf:"varint,49,opt,name=default_transaction_isolation,json=defaultTransactionIsolation,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_TransactionIsolation" json:"default_transaction_isolation,omitempty"`
	StatementTimeout                *wrapperspb.Int64Value                      `protobuf:"bytes,50,opt,name=statement_timeout,json=statementTimeout,proto3" json:"statement_timeout,omitempty"`                                                    // in milliseconds.
	LockTimeout                     *wrapperspb.Int64Value                      `protobuf:"bytes,51,opt,name=lock_timeout,json=lockTimeout,proto3" json:"lock_timeout,omitempty"`                                                                   // in milliseconds.
	IdleInTransactionSessionTimeout *wrapperspb.Int64Value                      `protobuf:"bytes,52,opt,name=idle_in_transaction_session_timeout,json=idleInTransactionSessionTimeout,proto3" json:"idle_in_transaction_session_timeout,omitempty"` // in milliseconds.
	ByteaOutput                     PostgresqlConfig10_ByteaOutput              `protobuf:"varint,53,opt,name=bytea_output,json=byteaOutput,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_ByteaOutput" json:"bytea_output,omitempty"`
	Xmlbinary                       PostgresqlConfig10_XmlBinary                `protobuf:"varint,54,opt,name=xmlbinary,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_XmlBinary" json:"xmlbinary,omitempty"`
	Xmloption                       PostgresqlConfig10_XmlOption                `protobuf:"varint,55,opt,name=xmloption,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_XmlOption" json:"xmloption,omitempty"`
	GinPendingListLimit             *wrapperspb.Int64Value                      `protobuf:"bytes,56,opt,name=gin_pending_list_limit,json=ginPendingListLimit,proto3" json:"gin_pending_list_limit,omitempty"` // in bytes.
	DeadlockTimeout                 *wrapperspb.Int64Value                      `protobuf:"bytes,57,opt,name=deadlock_timeout,json=deadlockTimeout,proto3" json:"deadlock_timeout,omitempty"`                 // in milliseconds.
	MaxLocksPerTransaction          *wrapperspb.Int64Value                      `protobuf:"bytes,58,opt,name=max_locks_per_transaction,json=maxLocksPerTransaction,proto3" json:"max_locks_per_transaction,omitempty"`
	MaxPredLocksPerTransaction      *wrapperspb.Int64Value                      `protobuf:"bytes,59,opt,name=max_pred_locks_per_transaction,json=maxPredLocksPerTransaction,proto3" json:"max_pred_locks_per_transaction,omitempty"`
	ArrayNulls                      *wrapperspb.BoolValue                       `protobuf:"bytes,60,opt,name=array_nulls,json=arrayNulls,proto3" json:"array_nulls,omitempty"`
	BackslashQuote                  PostgresqlConfig10_BackslashQuote           `protobuf:"varint,61,opt,name=backslash_quote,json=backslashQuote,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_BackslashQuote" json:"backslash_quote,omitempty"`
	DefaultWithOids                 *wrapperspb.BoolValue                       `protobuf:"bytes,62,opt,name=default_with_oids,json=defaultWithOids,proto3" json:"default_with_oids,omitempty"`
	EscapeStringWarning             *wrapperspb.BoolValue                       `protobuf:"bytes,63,opt,name=escape_string_warning,json=escapeStringWarning,proto3" json:"escape_string_warning,omitempty"`
	LoCompatPrivileges              *wrapperspb.BoolValue                       `protobuf:"bytes,64,opt,name=lo_compat_privileges,json=loCompatPrivileges,proto3" json:"lo_compat_privileges,omitempty"`
	OperatorPrecedenceWarning       *wrapperspb.BoolValue                       `protobuf:"bytes,65,opt,name=operator_precedence_warning,json=operatorPrecedenceWarning,proto3" json:"operator_precedence_warning,omitempty"`
	QuoteAllIdentifiers             *wrapperspb.BoolValue                       `protobuf:"bytes,66,opt,name=quote_all_identifiers,json=quoteAllIdentifiers,proto3" json:"quote_all_identifiers,omitempty"`
	StandardConformingStrings       *wrapperspb.BoolValue                       `protobuf:"bytes,67,opt,name=standard_conforming_strings,json=standardConformingStrings,proto3" json:"standard_conforming_strings,omitempty"`
	SynchronizeSeqscans             *wrapperspb.BoolValue                       `protobuf:"bytes,68,opt,name=synchronize_seqscans,json=synchronizeSeqscans,proto3" json:"synchronize_seqscans,omitempty"`
	TransformNullEquals             *wrapperspb.BoolValue                       `protobuf:"bytes,69,opt,name=transform_null_equals,json=transformNullEquals,proto3" json:"transform_null_equals,omitempty"`
	ExitOnError                     *wrapperspb.BoolValue                       `protobuf:"bytes,70,opt,name=exit_on_error,json=exitOnError,proto3" json:"exit_on_error,omitempty"`
	SeqPageCost                     *wrapperspb.DoubleValue                     `protobuf:"bytes,71,opt,name=seq_page_cost,json=seqPageCost,proto3" json:"seq_page_cost,omitempty"`
	RandomPageCost                  *wrapperspb.DoubleValue                     `protobuf:"bytes,72,opt,name=random_page_cost,json=randomPageCost,proto3" json:"random_page_cost,omitempty"`
	AutovacuumMaxWorkers            *wrapperspb.Int64Value                      `protobuf:"bytes,73,opt,name=autovacuum_max_workers,json=autovacuumMaxWorkers,proto3" json:"autovacuum_max_workers,omitempty"`
	AutovacuumVacuumCostDelay       *wrapperspb.Int64Value                      `protobuf:"bytes,74,opt,name=autovacuum_vacuum_cost_delay,json=autovacuumVacuumCostDelay,proto3" json:"autovacuum_vacuum_cost_delay,omitempty"`
	AutovacuumVacuumCostLimit       *wrapperspb.Int64Value                      `protobuf:"bytes,75,opt,name=autovacuum_vacuum_cost_limit,json=autovacuumVacuumCostLimit,proto3" json:"autovacuum_vacuum_cost_limit,omitempty"`
	AutovacuumNaptime               *wrapperspb.Int64Value                      `protobuf:"bytes,76,opt,name=autovacuum_naptime,json=autovacuumNaptime,proto3" json:"autovacuum_naptime,omitempty"` // in milliseconds.
	ArchiveTimeout                  *wrapperspb.Int64Value                      `protobuf:"bytes,77,opt,name=archive_timeout,json=archiveTimeout,proto3" json:"archive_timeout,omitempty"`          // in milliseconds.
	TrackActivityQuerySize          *wrapperspb.Int64Value                      `protobuf:"bytes,78,opt,name=track_activity_query_size,json=trackActivityQuerySize,proto3" json:"track_activity_query_size,omitempty"`
	EnableBitmapscan                *wrapperspb.BoolValue                       `protobuf:"bytes,80,opt,name=enable_bitmapscan,json=enableBitmapscan,proto3" json:"enable_bitmapscan,omitempty"`
	EnableHashagg                   *wrapperspb.BoolValue                       `protobuf:"bytes,81,opt,name=enable_hashagg,json=enableHashagg,proto3" json:"enable_hashagg,omitempty"`
	EnableHashjoin                  *wrapperspb.BoolValue                       `protobuf:"bytes,82,opt,name=enable_hashjoin,json=enableHashjoin,proto3" json:"enable_hashjoin,omitempty"`
	EnableIndexscan                 *wrapperspb.BoolValue                       `protobuf:"bytes,83,opt,name=enable_indexscan,json=enableIndexscan,proto3" json:"enable_indexscan,omitempty"`
	EnableIndexonlyscan             *wrapperspb.BoolValue                       `protobuf:"bytes,84,opt,name=enable_indexonlyscan,json=enableIndexonlyscan,proto3" json:"enable_indexonlyscan,omitempty"`
	EnableMaterial                  *wrapperspb.BoolValue                       `protobuf:"bytes,85,opt,name=enable_material,json=enableMaterial,proto3" json:"enable_material,omitempty"`
	EnableMergejoin                 *wrapperspb.BoolValue                       `protobuf:"bytes,86,opt,name=enable_mergejoin,json=enableMergejoin,proto3" json:"enable_mergejoin,omitempty"`
	EnableNestloop                  *wrapperspb.BoolValue                       `protobuf:"bytes,87,opt,name=enable_nestloop,json=enableNestloop,proto3" json:"enable_nestloop,omitempty"`
	EnableSeqscan                   *wrapperspb.BoolValue                       `protobuf:"bytes,88,opt,name=enable_seqscan,json=enableSeqscan,proto3" json:"enable_seqscan,omitempty"`
	EnableSort                      *wrapperspb.BoolValue                       `protobuf:"bytes,89,opt,name=enable_sort,json=enableSort,proto3" json:"enable_sort,omitempty"`
	EnableTidscan                   *wrapperspb.BoolValue                       `protobuf:"bytes,90,opt,name=enable_tidscan,json=enableTidscan,proto3" json:"enable_tidscan,omitempty"`
	MaxWorkerProcesses              *wrapperspb.Int64Value                      `protobuf:"bytes,91,opt,name=max_worker_processes,json=maxWorkerProcesses,proto3" json:"max_worker_processes,omitempty"`
	MaxParallelWorkers              *wrapperspb.Int64Value                      `protobuf:"bytes,92,opt,name=max_parallel_workers,json=maxParallelWorkers,proto3" json:"max_parallel_workers,omitempty"`
	MaxParallelWorkersPerGather     *wrapperspb.Int64Value                      `protobuf:"bytes,93,opt,name=max_parallel_workers_per_gather,json=maxParallelWorkersPerGather,proto3" json:"max_parallel_workers_per_gather,omitempty"`
	AutovacuumVacuumScaleFactor     *wrapperspb.DoubleValue                     `protobuf:"bytes,94,opt,name=autovacuum_vacuum_scale_factor,json=autovacuumVacuumScaleFactor,proto3" json:"autovacuum_vacuum_scale_factor,omitempty"`
	AutovacuumAnalyzeScaleFactor    *wrapperspb.DoubleValue                     `protobuf:"bytes,95,opt,name=autovacuum_analyze_scale_factor,json=autovacuumAnalyzeScaleFactor,proto3" json:"autovacuum_analyze_scale_factor,omitempty"`
	DefaultTransactionReadOnly      *wrapperspb.BoolValue                       `protobuf:"bytes,96,opt,name=default_transaction_read_only,json=defaultTransactionReadOnly,proto3" json:"default_transaction_read_only,omitempty"`
	Timezone                        string                                      `protobuf:"bytes,97,opt,name=timezone,proto3" json:"timezone,omitempty"`
	EffectiveIoConcurrency          *wrapperspb.Int64Value                      `protobuf:"bytes,98,opt,name=effective_io_concurrency,json=effectiveIoConcurrency,proto3" json:"effective_io_concurrency,omitempty"`
	EffectiveCacheSize              *wrapperspb.Int64Value                      `protobuf:"bytes,99,opt,name=effective_cache_size,json=effectiveCacheSize,proto3" json:"effective_cache_size,omitempty"`
	SharedPreloadLibraries          []PostgresqlConfig10_SharedPreloadLibraries `protobuf:"varint,100,rep,packed,name=shared_preload_libraries,json=sharedPreloadLibraries,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_SharedPreloadLibraries" json:"shared_preload_libraries,omitempty"`
	AutoExplainLogMinDuration       *wrapperspb.Int64Value                      `protobuf:"bytes,101,opt,name=auto_explain_log_min_duration,json=autoExplainLogMinDuration,proto3" json:"auto_explain_log_min_duration,omitempty"` // in milliseconds.
	AutoExplainLogAnalyze           *wrapperspb.BoolValue                       `protobuf:"bytes,102,opt,name=auto_explain_log_analyze,json=autoExplainLogAnalyze,proto3" json:"auto_explain_log_analyze,omitempty"`
	AutoExplainLogBuffers           *wrapperspb.BoolValue                       `protobuf:"bytes,103,opt,name=auto_explain_log_buffers,json=autoExplainLogBuffers,proto3" json:"auto_explain_log_buffers,omitempty"`
	AutoExplainLogTiming            *wrapperspb.BoolValue                       `protobuf:"bytes,104,opt,name=auto_explain_log_timing,json=autoExplainLogTiming,proto3" json:"auto_explain_log_timing,omitempty"`
	AutoExplainLogTriggers          *wrapperspb.BoolValue                       `protobuf:"bytes,105,opt,name=auto_explain_log_triggers,json=autoExplainLogTriggers,proto3" json:"auto_explain_log_triggers,omitempty"`
	AutoExplainLogVerbose           *wrapperspb.BoolValue                       `protobuf:"bytes,106,opt,name=auto_explain_log_verbose,json=autoExplainLogVerbose,proto3" json:"auto_explain_log_verbose,omitempty"`
	AutoExplainLogNestedStatements  *wrapperspb.BoolValue                       `protobuf:"bytes,107,opt,name=auto_explain_log_nested_statements,json=autoExplainLogNestedStatements,proto3" json:"auto_explain_log_nested_statements,omitempty"`
	AutoExplainSampleRate           *wrapperspb.DoubleValue                     `protobuf:"bytes,108,opt,name=auto_explain_sample_rate,json=autoExplainSampleRate,proto3" json:"auto_explain_sample_rate,omitempty"`
	PgHintPlanEnableHint            *wrapperspb.BoolValue                       `protobuf:"bytes,109,opt,name=pg_hint_plan_enable_hint,json=pgHintPlanEnableHint,proto3" json:"pg_hint_plan_enable_hint,omitempty"`
	PgHintPlanEnableHintTable       *wrapperspb.BoolValue                       `protobuf:"bytes,110,opt,name=pg_hint_plan_enable_hint_table,json=pgHintPlanEnableHintTable,proto3" json:"pg_hint_plan_enable_hint_table,omitempty"`
	PgHintPlanDebugPrint            PostgresqlConfig10_PgHintPlanDebugPrint     `protobuf:"varint,111,opt,name=pg_hint_plan_debug_print,json=pgHintPlanDebugPrint,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_PgHintPlanDebugPrint" json:"pg_hint_plan_debug_print,omitempty"`
	PgHintPlanMessageLevel          PostgresqlConfig10_LogLevel                 `protobuf:"varint,112,opt,name=pg_hint_plan_message_level,json=pgHintPlanMessageLevel,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10_LogLevel" json:"pg_hint_plan_message_level,omitempty"`
	PgQualstatsEnabled              *wrapperspb.BoolValue                       `protobuf:"bytes,113,opt,name=pg_qualstats_enabled,json=pgQualstatsEnabled,proto3" json:"pg_qualstats_enabled,omitempty"`
	PgQualstatsTrackConstants       *wrapperspb.BoolValue                       `protobuf:"bytes,114,opt,name=pg_qualstats_track_constants,json=pgQualstatsTrackConstants,proto3" json:"pg_qualstats_track_constants,omitempty"`
	PgQualstatsMax                  *wrapperspb.Int64Value                      `protobuf:"bytes,115,opt,name=pg_qualstats_max,json=pgQualstatsMax,proto3" json:"pg_qualstats_max,omitempty"`
	PgQualstatsResolveOids          *wrapperspb.BoolValue                       `protobuf:"bytes,116,opt,name=pg_qualstats_resolve_oids,json=pgQualstatsResolveOids,proto3" json:"pg_qualstats_resolve_oids,omitempty"`
	PgQualstatsSampleRate           *wrapperspb.DoubleValue                     `protobuf:"bytes,117,opt,name=pg_qualstats_sample_rate,json=pgQualstatsSampleRate,proto3" json:"pg_qualstats_sample_rate,omitempty"`
}

func (x *PostgresqlConfig10) Reset() {
	*x = PostgresqlConfig10{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresqlConfig10) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresqlConfig10) ProtoMessage() {}

func (x *PostgresqlConfig10) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresqlConfig10.ProtoReflect.Descriptor instead.
func (*PostgresqlConfig10) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{0}
}

func (x *PostgresqlConfig10) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *PostgresqlConfig10) GetSharedBuffers() *wrapperspb.Int64Value {
	if x != nil {
		return x.SharedBuffers
	}
	return nil
}

func (x *PostgresqlConfig10) GetTempBuffers() *wrapperspb.Int64Value {
	if x != nil {
		return x.TempBuffers
	}
	return nil
}

func (x *PostgresqlConfig10) GetMaxPreparedTransactions() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedTransactions
	}
	return nil
}

func (x *PostgresqlConfig10) GetWorkMem() *wrapperspb.Int64Value {
	if x != nil {
		return x.WorkMem
	}
	return nil
}

func (x *PostgresqlConfig10) GetMaintenanceWorkMem() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaintenanceWorkMem
	}
	return nil
}

func (x *PostgresqlConfig10) GetReplacementSortTuples() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplacementSortTuples
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutovacuumWorkMem() *wrapperspb.Int64Value {
	if x != nil {
		return x.AutovacuumWorkMem
	}
	return nil
}

func (x *PostgresqlConfig10) GetTempFileLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.TempFileLimit
	}
	return nil
}

func (x *PostgresqlConfig10) GetVacuumCostDelay() *wrapperspb.Int64Value {
	if x != nil {
		return x.VacuumCostDelay
	}
	return nil
}

func (x *PostgresqlConfig10) GetVacuumCostPageHit() *wrapperspb.Int64Value {
	if x != nil {
		return x.VacuumCostPageHit
	}
	return nil
}

func (x *PostgresqlConfig10) GetVacuumCostPageMiss() *wrapperspb.Int64Value {
	if x != nil {
		return x.VacuumCostPageMiss
	}
	return nil
}

func (x *PostgresqlConfig10) GetVacuumCostPageDirty() *wrapperspb.Int64Value {
	if x != nil {
		return x.VacuumCostPageDirty
	}
	return nil
}

func (x *PostgresqlConfig10) GetVacuumCostLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.VacuumCostLimit
	}
	return nil
}

func (x *PostgresqlConfig10) GetBgwriterDelay() *wrapperspb.Int64Value {
	if x != nil {
		return x.BgwriterDelay
	}
	return nil
}

func (x *PostgresqlConfig10) GetBgwriterLruMaxpages() *wrapperspb.Int64Value {
	if x != nil {
		return x.BgwriterLruMaxpages
	}
	return nil
}

func (x *PostgresqlConfig10) GetBgwriterLruMultiplier() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BgwriterLruMultiplier
	}
	return nil
}

func (x *PostgresqlConfig10) GetBgwriterFlushAfter() *wrapperspb.Int64Value {
	if x != nil {
		return x.BgwriterFlushAfter
	}
	return nil
}

func (x *PostgresqlConfig10) GetBackendFlushAfter() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackendFlushAfter
	}
	return nil
}

func (x *PostgresqlConfig10) GetOldSnapshotThreshold() *wrapperspb.Int64Value {
	if x != nil {
		return x.OldSnapshotThreshold
	}
	return nil
}

func (x *PostgresqlConfig10) GetWalLevel() PostgresqlConfig10_WalLevel {
	if x != nil {
		return x.WalLevel
	}
	return PostgresqlConfig10_WAL_LEVEL_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetSynchronousCommit() PostgresqlConfig10_SynchronousCommit {
	if x != nil {
		return x.SynchronousCommit
	}
	return PostgresqlConfig10_SYNCHRONOUS_COMMIT_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetCheckpointTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.CheckpointTimeout
	}
	return nil
}

func (x *PostgresqlConfig10) GetCheckpointCompletionTarget() *wrapperspb.DoubleValue {
	if x != nil {
		return x.CheckpointCompletionTarget
	}
	return nil
}

func (x *PostgresqlConfig10) GetCheckpointFlushAfter() *wrapperspb.Int64Value {
	if x != nil {
		return x.CheckpointFlushAfter
	}
	return nil
}

func (x *PostgresqlConfig10) GetMaxWalSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxWalSize
	}
	return nil
}

func (x *PostgresqlConfig10) GetMinWalSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinWalSize
	}
	return nil
}

func (x *PostgresqlConfig10) GetMaxStandbyStreamingDelay() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxStandbyStreamingDelay
	}
	return nil
}

func (x *PostgresqlConfig10) GetDefaultStatisticsTarget() *wrapperspb.Int64Value {
	if x != nil {
		return x.DefaultStatisticsTarget
	}
	return nil
}

func (x *PostgresqlConfig10) GetConstraintExclusion() PostgresqlConfig10_ConstraintExclusion {
	if x != nil {
		return x.ConstraintExclusion
	}
	return PostgresqlConfig10_CONSTRAINT_EXCLUSION_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetCursorTupleFraction() *wrapperspb.DoubleValue {
	if x != nil {
		return x.CursorTupleFraction
	}
	return nil
}

func (x *PostgresqlConfig10) GetFromCollapseLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.FromCollapseLimit
	}
	return nil
}

func (x *PostgresqlConfig10) GetJoinCollapseLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.JoinCollapseLimit
	}
	return nil
}

func (x *PostgresqlConfig10) GetForceParallelMode() PostgresqlConfig10_ForceParallelMode {
	if x != nil {
		return x.ForceParallelMode
	}
	return PostgresqlConfig10_FORCE_PARALLEL_MODE_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetClientMinMessages() PostgresqlConfig10_LogLevel {
	if x != nil {
		return x.ClientMinMessages
	}
	return PostgresqlConfig10_LOG_LEVEL_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetLogMinMessages() PostgresqlConfig10_LogLevel {
	if x != nil {
		return x.LogMinMessages
	}
	return PostgresqlConfig10_LOG_LEVEL_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetLogMinErrorStatement() PostgresqlConfig10_LogLevel {
	if x != nil {
		return x.LogMinErrorStatement
	}
	return PostgresqlConfig10_LOG_LEVEL_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetLogMinDurationStatement() *wrapperspb.Int64Value {
	if x != nil {
		return x.LogMinDurationStatement
	}
	return nil
}

func (x *PostgresqlConfig10) GetLogCheckpoints() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogCheckpoints
	}
	return nil
}

func (x *PostgresqlConfig10) GetLogConnections() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogConnections
	}
	return nil
}

func (x *PostgresqlConfig10) GetLogDisconnections() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogDisconnections
	}
	return nil
}

func (x *PostgresqlConfig10) GetLogDuration() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogDuration
	}
	return nil
}

func (x *PostgresqlConfig10) GetLogErrorVerbosity() PostgresqlConfig10_LogErrorVerbosity {
	if x != nil {
		return x.LogErrorVerbosity
	}
	return PostgresqlConfig10_LOG_ERROR_VERBOSITY_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetLogLockWaits() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogLockWaits
	}
	return nil
}

func (x *PostgresqlConfig10) GetLogStatement() PostgresqlConfig10_LogStatement {
	if x != nil {
		return x.LogStatement
	}
	return PostgresqlConfig10_LOG_STATEMENT_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetLogTempFiles() *wrapperspb.Int64Value {
	if x != nil {
		return x.LogTempFiles
	}
	return nil
}

func (x *PostgresqlConfig10) GetSearchPath() string {
	if x != nil {
		return x.SearchPath
	}
	return ""
}

func (x *PostgresqlConfig10) GetRowSecurity() *wrapperspb.BoolValue {
	if x != nil {
		return x.RowSecurity
	}
	return nil
}

func (x *PostgresqlConfig10) GetDefaultTransactionIsolation() PostgresqlConfig10_TransactionIsolation {
	if x != nil {
		return x.DefaultTransactionIsolation
	}
	return PostgresqlConfig10_TRANSACTION_ISOLATION_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetStatementTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.StatementTimeout
	}
	return nil
}

func (x *PostgresqlConfig10) GetLockTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.LockTimeout
	}
	return nil
}

func (x *PostgresqlConfig10) GetIdleInTransactionSessionTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.IdleInTransactionSessionTimeout
	}
	return nil
}

func (x *PostgresqlConfig10) GetByteaOutput() PostgresqlConfig10_ByteaOutput {
	if x != nil {
		return x.ByteaOutput
	}
	return PostgresqlConfig10_BYTEA_OUTPUT_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetXmlbinary() PostgresqlConfig10_XmlBinary {
	if x != nil {
		return x.Xmlbinary
	}
	return PostgresqlConfig10_XML_BINARY_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetXmloption() PostgresqlConfig10_XmlOption {
	if x != nil {
		return x.Xmloption
	}
	return PostgresqlConfig10_XML_OPTION_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetGinPendingListLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.GinPendingListLimit
	}
	return nil
}

func (x *PostgresqlConfig10) GetDeadlockTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.DeadlockTimeout
	}
	return nil
}

func (x *PostgresqlConfig10) GetMaxLocksPerTransaction() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxLocksPerTransaction
	}
	return nil
}

func (x *PostgresqlConfig10) GetMaxPredLocksPerTransaction() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPredLocksPerTransaction
	}
	return nil
}

func (x *PostgresqlConfig10) GetArrayNulls() *wrapperspb.BoolValue {
	if x != nil {
		return x.ArrayNulls
	}
	return nil
}

func (x *PostgresqlConfig10) GetBackslashQuote() PostgresqlConfig10_BackslashQuote {
	if x != nil {
		return x.BackslashQuote
	}
	return PostgresqlConfig10_BACKSLASH_QUOTE_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetDefaultWithOids() *wrapperspb.BoolValue {
	if x != nil {
		return x.DefaultWithOids
	}
	return nil
}

func (x *PostgresqlConfig10) GetEscapeStringWarning() *wrapperspb.BoolValue {
	if x != nil {
		return x.EscapeStringWarning
	}
	return nil
}

func (x *PostgresqlConfig10) GetLoCompatPrivileges() *wrapperspb.BoolValue {
	if x != nil {
		return x.LoCompatPrivileges
	}
	return nil
}

func (x *PostgresqlConfig10) GetOperatorPrecedenceWarning() *wrapperspb.BoolValue {
	if x != nil {
		return x.OperatorPrecedenceWarning
	}
	return nil
}

func (x *PostgresqlConfig10) GetQuoteAllIdentifiers() *wrapperspb.BoolValue {
	if x != nil {
		return x.QuoteAllIdentifiers
	}
	return nil
}

func (x *PostgresqlConfig10) GetStandardConformingStrings() *wrapperspb.BoolValue {
	if x != nil {
		return x.StandardConformingStrings
	}
	return nil
}

func (x *PostgresqlConfig10) GetSynchronizeSeqscans() *wrapperspb.BoolValue {
	if x != nil {
		return x.SynchronizeSeqscans
	}
	return nil
}

func (x *PostgresqlConfig10) GetTransformNullEquals() *wrapperspb.BoolValue {
	if x != nil {
		return x.TransformNullEquals
	}
	return nil
}

func (x *PostgresqlConfig10) GetExitOnError() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExitOnError
	}
	return nil
}

func (x *PostgresqlConfig10) GetSeqPageCost() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SeqPageCost
	}
	return nil
}

func (x *PostgresqlConfig10) GetRandomPageCost() *wrapperspb.DoubleValue {
	if x != nil {
		return x.RandomPageCost
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutovacuumMaxWorkers() *wrapperspb.Int64Value {
	if x != nil {
		return x.AutovacuumMaxWorkers
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutovacuumVacuumCostDelay() *wrapperspb.Int64Value {
	if x != nil {
		return x.AutovacuumVacuumCostDelay
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutovacuumVacuumCostLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.AutovacuumVacuumCostLimit
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutovacuumNaptime() *wrapperspb.Int64Value {
	if x != nil {
		return x.AutovacuumNaptime
	}
	return nil
}

func (x *PostgresqlConfig10) GetArchiveTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.ArchiveTimeout
	}
	return nil
}

func (x *PostgresqlConfig10) GetTrackActivityQuerySize() *wrapperspb.Int64Value {
	if x != nil {
		return x.TrackActivityQuerySize
	}
	return nil
}

func (x *PostgresqlConfig10) GetEnableBitmapscan() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableBitmapscan
	}
	return nil
}

func (x *PostgresqlConfig10) GetEnableHashagg() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableHashagg
	}
	return nil
}

func (x *PostgresqlConfig10) GetEnableHashjoin() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableHashjoin
	}
	return nil
}

func (x *PostgresqlConfig10) GetEnableIndexscan() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableIndexscan
	}
	return nil
}

func (x *PostgresqlConfig10) GetEnableIndexonlyscan() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableIndexonlyscan
	}
	return nil
}

func (x *PostgresqlConfig10) GetEnableMaterial() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableMaterial
	}
	return nil
}

func (x *PostgresqlConfig10) GetEnableMergejoin() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableMergejoin
	}
	return nil
}

func (x *PostgresqlConfig10) GetEnableNestloop() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableNestloop
	}
	return nil
}

func (x *PostgresqlConfig10) GetEnableSeqscan() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableSeqscan
	}
	return nil
}

func (x *PostgresqlConfig10) GetEnableSort() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableSort
	}
	return nil
}

func (x *PostgresqlConfig10) GetEnableTidscan() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableTidscan
	}
	return nil
}

func (x *PostgresqlConfig10) GetMaxWorkerProcesses() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxWorkerProcesses
	}
	return nil
}

func (x *PostgresqlConfig10) GetMaxParallelWorkers() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxParallelWorkers
	}
	return nil
}

func (x *PostgresqlConfig10) GetMaxParallelWorkersPerGather() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxParallelWorkersPerGather
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutovacuumVacuumScaleFactor() *wrapperspb.DoubleValue {
	if x != nil {
		return x.AutovacuumVacuumScaleFactor
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutovacuumAnalyzeScaleFactor() *wrapperspb.DoubleValue {
	if x != nil {
		return x.AutovacuumAnalyzeScaleFactor
	}
	return nil
}

func (x *PostgresqlConfig10) GetDefaultTransactionReadOnly() *wrapperspb.BoolValue {
	if x != nil {
		return x.DefaultTransactionReadOnly
	}
	return nil
}

func (x *PostgresqlConfig10) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *PostgresqlConfig10) GetEffectiveIoConcurrency() *wrapperspb.Int64Value {
	if x != nil {
		return x.EffectiveIoConcurrency
	}
	return nil
}

func (x *PostgresqlConfig10) GetEffectiveCacheSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.EffectiveCacheSize
	}
	return nil
}

func (x *PostgresqlConfig10) GetSharedPreloadLibraries() []PostgresqlConfig10_SharedPreloadLibraries {
	if x != nil {
		return x.SharedPreloadLibraries
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutoExplainLogMinDuration() *wrapperspb.Int64Value {
	if x != nil {
		return x.AutoExplainLogMinDuration
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutoExplainLogAnalyze() *wrapperspb.BoolValue {
	if x != nil {
		return x.AutoExplainLogAnalyze
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutoExplainLogBuffers() *wrapperspb.BoolValue {
	if x != nil {
		return x.AutoExplainLogBuffers
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutoExplainLogTiming() *wrapperspb.BoolValue {
	if x != nil {
		return x.AutoExplainLogTiming
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutoExplainLogTriggers() *wrapperspb.BoolValue {
	if x != nil {
		return x.AutoExplainLogTriggers
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutoExplainLogVerbose() *wrapperspb.BoolValue {
	if x != nil {
		return x.AutoExplainLogVerbose
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutoExplainLogNestedStatements() *wrapperspb.BoolValue {
	if x != nil {
		return x.AutoExplainLogNestedStatements
	}
	return nil
}

func (x *PostgresqlConfig10) GetAutoExplainSampleRate() *wrapperspb.DoubleValue {
	if x != nil {
		return x.AutoExplainSampleRate
	}
	return nil
}

func (x *PostgresqlConfig10) GetPgHintPlanEnableHint() *wrapperspb.BoolValue {
	if x != nil {
		return x.PgHintPlanEnableHint
	}
	return nil
}

func (x *PostgresqlConfig10) GetPgHintPlanEnableHintTable() *wrapperspb.BoolValue {
	if x != nil {
		return x.PgHintPlanEnableHintTable
	}
	return nil
}

func (x *PostgresqlConfig10) GetPgHintPlanDebugPrint() PostgresqlConfig10_PgHintPlanDebugPrint {
	if x != nil {
		return x.PgHintPlanDebugPrint
	}
	return PostgresqlConfig10_PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetPgHintPlanMessageLevel() PostgresqlConfig10_LogLevel {
	if x != nil {
		return x.PgHintPlanMessageLevel
	}
	return PostgresqlConfig10_LOG_LEVEL_UNSPECIFIED
}

func (x *PostgresqlConfig10) GetPgQualstatsEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.PgQualstatsEnabled
	}
	return nil
}

func (x *PostgresqlConfig10) GetPgQualstatsTrackConstants() *wrapperspb.BoolValue {
	if x != nil {
		return x.PgQualstatsTrackConstants
	}
	return nil
}

func (x *PostgresqlConfig10) GetPgQualstatsMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.PgQualstatsMax
	}
	return nil
}

func (x *PostgresqlConfig10) GetPgQualstatsResolveOids() *wrapperspb.BoolValue {
	if x != nil {
		return x.PgQualstatsResolveOids
	}
	return nil
}

func (x *PostgresqlConfig10) GetPgQualstatsSampleRate() *wrapperspb.DoubleValue {
	if x != nil {
		return x.PgQualstatsSampleRate
	}
	return nil
}

type PostgresqlConfigSet10 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for a PostgreSQL 10 cluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *PostgresqlConfig10 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a PostgreSQL 10 cluster.
	UserConfig *PostgresqlConfig10 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a PostgreSQL 10 cluster.
	DefaultConfig *PostgresqlConfig10 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *PostgresqlConfigSet10) Reset() {
	*x = PostgresqlConfigSet10{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresqlConfigSet10) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresqlConfigSet10) ProtoMessage() {}

func (x *PostgresqlConfigSet10) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresqlConfigSet10.ProtoReflect.Descriptor instead.
func (*PostgresqlConfigSet10) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP(), []int{1}
}

func (x *PostgresqlConfigSet10) GetEffectiveConfig() *PostgresqlConfig10 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *PostgresqlConfigSet10) GetUserConfig() *PostgresqlConfig10 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *PostgresqlConfigSet10) GetDefaultConfig() *PostgresqlConfig10 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

var File_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDesc = []byte{
	0x0a, 0x38, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x71, 0x6c, 0x31, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa4, 0x61, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a,
	0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x12, 0x57, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x65, 0x6d, 0x12, 0x4d, 0x0a, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4d, 0x65,
	0x6d, 0x12, 0x53, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x72, 0x74,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61,
	0x63, 0x75, 0x75, 0x6d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x57, 0x6f, 0x72, 0x6b,
	0x4d, 0x65, 0x6d, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x76, 0x61, 0x63, 0x75,
	0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x4c, 0x0a, 0x14, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x76, 0x61,
	0x63, 0x75, 0x75, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x48, 0x69, 0x74, 0x12,
	0x4e, 0x0a, 0x15, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x76, 0x61, 0x63,
	0x75, 0x75, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x12,
	0x50, 0x0a, 0x16, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x76, 0x61,
	0x63, 0x75, 0x75, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x44, 0x69, 0x72, 0x74,
	0x79, 0x12, 0x47, 0x0a, 0x11, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x76, 0x61, 0x63, 0x75, 0x75,
	0x6d, 0x43, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x62, 0x67,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0c, 0xfa, 0xc7, 0x31, 0x08, 0x31, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0d, 0x62,
	0x67, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x4f, 0x0a, 0x15,
	0x62, 0x67, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x72, 0x75, 0x5f, 0x6d, 0x61, 0x78,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x62, 0x67, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x4c, 0x72, 0x75, 0x4d, 0x61, 0x78, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x54, 0x0a,
	0x17, 0x62, 0x67, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x72, 0x75, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x62, 0x67,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x4c, 0x72, 0x75, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x14, 0x62, 0x67, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f,
	0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a,
	0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x32, 0x30, 0x34, 0x38, 0x52, 0x12, 0x62, 0x67, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x57,
	0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d,
	0x32, 0x30, 0x34, 0x38, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x16, 0x6f, 0x6c, 0x64, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0xfa, 0xc7, 0x31, 0x0b, 0x2d, 0x31, 0x2d, 0x38, 0x36, 0x34,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x14, 0x6f, 0x6c, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5f, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x2e, 0x57, 0x61, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x7a, 0x0a, 0x12,
	0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x31, 0x30, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f,
	0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x5e, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x12, 0xfa, 0xc7, 0x31, 0x0e, 0x33, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x38, 0x36, 0x34,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x1c, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x5d, 0x0a, 0x16, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x32, 0x30, 0x34,
	0x38, 0x52, 0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x77,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x57,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x57, 0x61,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5a, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x62, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x57, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x31, 0x30, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x15, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5d, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0xfa, 0xc7, 0x31, 0x0c, 0x31,
	0x2d, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x33, 0x36, 0x34, 0x37, 0x52, 0x11, 0x66, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5d,
	0x0a, 0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0xfa, 0xc7, 0x31, 0x0c, 0x31, 0x2d,
	0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x33, 0x36, 0x34, 0x37, 0x52, 0x11, 0x6a, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x7b, 0x0a,
	0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x31, 0x30, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x72, 0x0a, 0x13, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x31, 0x30, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x11, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x6c,
	0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x31, 0x30, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0e, 0x6c, 0x6f,
	0x67, 0x4d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x17,
	0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x14, 0x6c, 0x6f, 0x67, 0x4d, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x1a, 0x6c, 0x6f, 0x67, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x6c, 0x6f, 0x67, 0x4d, 0x69, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x43, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x6c,
	0x6f, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x2e, 0x4c, 0x6f,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x52,
	0x11, 0x6c, 0x6f, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69,
	0x74, 0x79, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x57,
	0x61, 0x69, 0x74, 0x73, 0x12, 0x6b, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x92, 0x01, 0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x69, 0x0a, 0x23, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x69,
	0x64, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x68,
	0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x61, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x61, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x61, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x61, 0x0a, 0x09, 0x78, 0x6d, 0x6c, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x2e, 0x58, 0x6d, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x52, 0x09, 0x78, 0x6d, 0x6c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x61, 0x0a, 0x09, 0x78,
	0x6d, 0x6c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x2e, 0x58, 0x6d, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x78, 0x6d, 0x6c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x16, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x67, 0x69, 0x6e,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x46, 0x0a, 0x10, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x63,
	0x6b, 0x73, 0x50, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5f, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x64, 0x4c, 0x6f,
	0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x73,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x71,
	0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x31, 0x30, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x6f, 0x69, 0x64, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x69, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x65, 0x73, 0x63,
	0x61, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x6f, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x6c, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x1b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x15, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x4d, 0x0a, 0x14, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x73,
	0x65, 0x71, 0x73, 0x63, 0x61, 0x6e, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x71, 0x73, 0x63, 0x61, 0x6e, 0x73, 0x12, 0x4e,
	0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6c, 0x6c, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x3e,
	0x0a, 0x0d, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x65, 0x78, 0x69, 0x74, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40,
	0x0a, 0x0d, 0x73, 0x65, 0x71, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f,
	0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x31, 0x2d, 0x33, 0x32, 0x52,
	0x14, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x4d, 0x61, 0x78, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x68, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63,
	0x75, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x2d, 0x31,
	0x2d, 0x31, 0x30, 0x30, 0x52, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d,
	0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x6a, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x76, 0x61,
	0x63, 0x75, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0c, 0xfa, 0xc7, 0x31, 0x08, 0x2d, 0x31, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x30,
	0x52, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x56, 0x61, 0x63, 0x75,
	0x75, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5d, 0x0a, 0x12, 0x61,
	0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0xfa, 0xc7, 0x31, 0x0d, 0x31, 0x30, 0x30, 0x30, 0x2d, 0x38,
	0x36, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63,
	0x75, 0x75, 0x6d, 0x4e, 0x61, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x4d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x12, 0xfa, 0xc7, 0x31, 0x0e, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x38, 0x36, 0x34, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x52, 0x0e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x66, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xfa, 0xc7, 0x31, 0x0a, 0x31, 0x30, 0x30, 0x2d, 0x31, 0x30,
	0x32, 0x34, 0x30, 0x30, 0x52, 0x16, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x47, 0x0a, 0x11,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x63, 0x61,
	0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x61, 0x67, 0x67, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x61, 0x67, 0x67, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x52, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x45, 0x0a,
	0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x73, 0x63, 0x61,
	0x6e, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x73, 0x63, 0x61, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x6f, 0x6e, 0x6c, 0x79, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x6f, 0x6e, 0x6c, 0x79, 0x73,
	0x63, 0x61, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x12,
	0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x6c, 0x6f,
	0x6f, 0x70, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x73, 0x74,
	0x6c, 0x6f, 0x6f, 0x70, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x71, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x71, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x64, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x69, 0x64, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x59, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa,
	0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a,
	0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52,
	0x1b, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x1e,
	0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x63, 0x75, 0x75,
	0x6d, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x5e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x30, 0x2e, 0x30, 0x2d, 0x31, 0x2e, 0x30, 0x52,
	0x1b, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x56, 0x61, 0x63, 0x75, 0x75,
	0x6d, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x70, 0x0a, 0x1f,
	0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x30, 0x2e, 0x30, 0x2d, 0x31, 0x2e, 0x30,
	0x52, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5d,
	0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x61, 0x0a, 0x18, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d,
	0x31, 0x30, 0x30, 0x30, 0x52, 0x16, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6f, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x61, 0x0a, 0x14,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0xfa, 0xc7, 0x31, 0x0e, 0x30, 0x2d, 0x35,
	0x34, 0x39, 0x37, 0x35, 0x35, 0x38, 0x31, 0x33, 0x38, 0x38, 0x38, 0x52, 0x12, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x8a, 0x01, 0x0a, 0x18, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x64, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x50, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x1d,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x11, 0xfa, 0xc7, 0x31, 0x0d, 0x2d, 0x31, 0x2d, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x33,
	0x36, 0x34, 0x37, 0x52, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x4d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x61, 0x75,
	0x74, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x19, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x12, 0x53, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x6a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x22, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1e, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x62, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x30, 0x2e, 0x30, 0x2d, 0x31, 0x2e, 0x30, 0x52, 0x15, 0x61, 0x75,
	0x74, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x18, 0x70, 0x67, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18,
	0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x14, 0x70, 0x67, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x1e, 0x70, 0x67, 0x5f, 0x68, 0x69,
	0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68,
	0x69, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x70, 0x67, 0x48,
	0x69, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x69, 0x6e,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x18, 0x70, 0x67, 0x5f, 0x68, 0x69,
	0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x31, 0x30, 0x2e, 0x50, 0x67, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x14, 0x70, 0x67, 0x48, 0x69, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12,
	0x7e, 0x0a, 0x1a, 0x70, 0x67, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x2e, 0x4c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x16, 0x70, 0x67, 0x48, 0x69, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x4c, 0x0a, 0x14, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x70, 0x67, 0x51, 0x75, 0x61,
	0x6c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5b, 0x0a,
	0x1c, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x72, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x19, 0x70, 0x67, 0x51, 0x75, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x73,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x70, 0x67, 0x51, 0x75, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61,
	0x78, 0x12, 0x55, 0x0a, 0x19, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x73, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x16, 0x70, 0x67, 0x51, 0x75, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x4f, 0x69, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x18, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x70, 0x67, 0x51, 0x75, 0x61, 0x6c,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22,
	0x53, 0x0a, 0x08, 0x57, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x57,
	0x41, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x41, 0x4c, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x57, 0x41, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x02, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x59,
	0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x59, 0x4e,
	0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f,
	0x4e, 0x4f, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x59, 0x4e, 0x43,
	0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x05, 0x22, 0x9a, 0x01,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41,
	0x49, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x41, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x1f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c,
	0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c,
	0x4c, 0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x22,
	0x92, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15,
	0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x35, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47,
	0x34, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x32, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x31, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x15,
	0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f,
	0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x0a, 0x12,
	0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x50, 0x41, 0x4e,
	0x49, 0x43, 0x10, 0x0b, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x4f,
	0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52,
	0x42, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x45, 0x52, 0x53, 0x45, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x42,
	0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52,
	0x42, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x45, 0x10, 0x03,
	0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x44, 0x4c, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x22, 0xe6, 0x01,
	0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a,
	0x26, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50,
	0x45, 0x41, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x26,
	0x0a, 0x22, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53,
	0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x22, 0x5b, 0x0a, 0x0b, 0x42, 0x79, 0x74, 0x65, 0x61, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x59, 0x54, 0x45, 0x41, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x59, 0x54, 0x45, 0x41, 0x5f, 0x4f, 0x55, 0x54,
	0x50, 0x55, 0x54, 0x5f, 0x48, 0x45, 0x58, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x59, 0x54,
	0x45, 0x41, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x53, 0x43, 0x41, 0x50, 0x45,
	0x44, 0x10, 0x02, 0x22, 0x52, 0x0a, 0x09, 0x58, 0x6d, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x16, 0x58, 0x4d, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x58, 0x4d, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x36,
	0x34, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x58, 0x4d, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52,
	0x59, 0x5f, 0x48, 0x45, 0x58, 0x10, 0x02, 0x22, 0x58, 0x0a, 0x09, 0x58, 0x6d, 0x6c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x58, 0x4d, 0x4c, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x58, 0x4d, 0x4c, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x58, 0x4d, 0x4c,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x41, 0x53,
	0x48, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x41,
	0x53, 0x48, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41,
	0x43, 0x4b, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f,
	0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x42,
	0x41, 0x43, 0x4b, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x53,
	0x41, 0x46, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x22, 0xd0,
	0x01, 0x0a, 0x14, 0x50, 0x67, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x47, 0x5f, 0x48, 0x49,
	0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x50, 0x52,
	0x49, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x47, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x47, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x50,
	0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x47, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f,
	0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54,
	0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x50,
	0x47, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x55,
	0x47, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x45, 0x10,
	0x04, 0x22, 0x93, 0x02, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x24,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4c,
	0x49, 0x42, 0x52, 0x41, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x49,
	0x45, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x47,
	0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4c,
	0x49, 0x42, 0x52, 0x41, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x43, 0x41,
	0x4c, 0x45, 0x44, 0x42, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x49,
	0x45, 0x53, 0x5f, 0x50, 0x47, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10,
	0x04, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x50, 0x47,
	0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x10, 0x05, 0x22, 0xc1, 0x02, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x31,
	0x30, 0x12, 0x6a, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x0e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x30, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x81, 0x01, 0x0a, 0x29,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x64, 0x62, 0x2f,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x3b, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescData = file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDesc
)

func file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDescData
}

var file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_goTypes = []interface{}{
	(PostgresqlConfig10_WalLevel)(0),               // 0: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.WalLevel
	(PostgresqlConfig10_SynchronousCommit)(0),      // 1: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.SynchronousCommit
	(PostgresqlConfig10_ConstraintExclusion)(0),    // 2: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.ConstraintExclusion
	(PostgresqlConfig10_ForceParallelMode)(0),      // 3: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.ForceParallelMode
	(PostgresqlConfig10_LogLevel)(0),               // 4: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.LogLevel
	(PostgresqlConfig10_LogErrorVerbosity)(0),      // 5: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.LogErrorVerbosity
	(PostgresqlConfig10_LogStatement)(0),           // 6: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.LogStatement
	(PostgresqlConfig10_TransactionIsolation)(0),   // 7: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.TransactionIsolation
	(PostgresqlConfig10_ByteaOutput)(0),            // 8: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.ByteaOutput
	(PostgresqlConfig10_XmlBinary)(0),              // 9: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.XmlBinary
	(PostgresqlConfig10_XmlOption)(0),              // 10: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.XmlOption
	(PostgresqlConfig10_BackslashQuote)(0),         // 11: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.BackslashQuote
	(PostgresqlConfig10_PgHintPlanDebugPrint)(0),   // 12: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.PgHintPlanDebugPrint
	(PostgresqlConfig10_SharedPreloadLibraries)(0), // 13: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.SharedPreloadLibraries
	(*PostgresqlConfig10)(nil),                     // 14: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10
	(*PostgresqlConfigSet10)(nil),                  // 15: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfigSet10
	(*wrapperspb.Int64Value)(nil),                  // 16: google.protobuf.Int64Value
	(*wrapperspb.DoubleValue)(nil),                 // 17: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),                   // 18: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_depIdxs = []int32{
	16,  // 0: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.max_connections:type_name -> google.protobuf.Int64Value
	16,  // 1: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.shared_buffers:type_name -> google.protobuf.Int64Value
	16,  // 2: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.temp_buffers:type_name -> google.protobuf.Int64Value
	16,  // 3: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.max_prepared_transactions:type_name -> google.protobuf.Int64Value
	16,  // 4: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.work_mem:type_name -> google.protobuf.Int64Value
	16,  // 5: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.maintenance_work_mem:type_name -> google.protobuf.Int64Value
	16,  // 6: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.replacement_sort_tuples:type_name -> google.protobuf.Int64Value
	16,  // 7: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.autovacuum_work_mem:type_name -> google.protobuf.Int64Value
	16,  // 8: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.temp_file_limit:type_name -> google.protobuf.Int64Value
	16,  // 9: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.vacuum_cost_delay:type_name -> google.protobuf.Int64Value
	16,  // 10: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.vacuum_cost_page_hit:type_name -> google.protobuf.Int64Value
	16,  // 11: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.vacuum_cost_page_miss:type_name -> google.protobuf.Int64Value
	16,  // 12: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.vacuum_cost_page_dirty:type_name -> google.protobuf.Int64Value
	16,  // 13: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.vacuum_cost_limit:type_name -> google.protobuf.Int64Value
	16,  // 14: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.bgwriter_delay:type_name -> google.protobuf.Int64Value
	16,  // 15: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.bgwriter_lru_maxpages:type_name -> google.protobuf.Int64Value
	17,  // 16: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.bgwriter_lru_multiplier:type_name -> google.protobuf.DoubleValue
	16,  // 17: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.bgwriter_flush_after:type_name -> google.protobuf.Int64Value
	16,  // 18: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.backend_flush_after:type_name -> google.protobuf.Int64Value
	16,  // 19: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.old_snapshot_threshold:type_name -> google.protobuf.Int64Value
	0,   // 20: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.wal_level:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.WalLevel
	1,   // 21: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.synchronous_commit:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.SynchronousCommit
	16,  // 22: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.checkpoint_timeout:type_name -> google.protobuf.Int64Value
	17,  // 23: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.checkpoint_completion_target:type_name -> google.protobuf.DoubleValue
	16,  // 24: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.checkpoint_flush_after:type_name -> google.protobuf.Int64Value
	16,  // 25: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.max_wal_size:type_name -> google.protobuf.Int64Value
	16,  // 26: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.min_wal_size:type_name -> google.protobuf.Int64Value
	16,  // 27: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.max_standby_streaming_delay:type_name -> google.protobuf.Int64Value
	16,  // 28: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.default_statistics_target:type_name -> google.protobuf.Int64Value
	2,   // 29: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.constraint_exclusion:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.ConstraintExclusion
	17,  // 30: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.cursor_tuple_fraction:type_name -> google.protobuf.DoubleValue
	16,  // 31: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.from_collapse_limit:type_name -> google.protobuf.Int64Value
	16,  // 32: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.join_collapse_limit:type_name -> google.protobuf.Int64Value
	3,   // 33: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.force_parallel_mode:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.ForceParallelMode
	4,   // 34: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.client_min_messages:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.LogLevel
	4,   // 35: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.log_min_messages:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.LogLevel
	4,   // 36: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.log_min_error_statement:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.LogLevel
	16,  // 37: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.log_min_duration_statement:type_name -> google.protobuf.Int64Value
	18,  // 38: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.log_checkpoints:type_name -> google.protobuf.BoolValue
	18,  // 39: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.log_connections:type_name -> google.protobuf.BoolValue
	18,  // 40: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.log_disconnections:type_name -> google.protobuf.BoolValue
	18,  // 41: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.log_duration:type_name -> google.protobuf.BoolValue
	5,   // 42: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.log_error_verbosity:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.LogErrorVerbosity
	18,  // 43: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.log_lock_waits:type_name -> google.protobuf.BoolValue
	6,   // 44: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.log_statement:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.LogStatement
	16,  // 45: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.log_temp_files:type_name -> google.protobuf.Int64Value
	18,  // 46: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.row_security:type_name -> google.protobuf.BoolValue
	7,   // 47: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.default_transaction_isolation:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.TransactionIsolation
	16,  // 48: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.statement_timeout:type_name -> google.protobuf.Int64Value
	16,  // 49: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.lock_timeout:type_name -> google.protobuf.Int64Value
	16,  // 50: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.idle_in_transaction_session_timeout:type_name -> google.protobuf.Int64Value
	8,   // 51: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.bytea_output:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.ByteaOutput
	9,   // 52: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.xmlbinary:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.XmlBinary
	10,  // 53: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.xmloption:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.XmlOption
	16,  // 54: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.gin_pending_list_limit:type_name -> google.protobuf.Int64Value
	16,  // 55: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.deadlock_timeout:type_name -> google.protobuf.Int64Value
	16,  // 56: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.max_locks_per_transaction:type_name -> google.protobuf.Int64Value
	16,  // 57: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.max_pred_locks_per_transaction:type_name -> google.protobuf.Int64Value
	18,  // 58: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.array_nulls:type_name -> google.protobuf.BoolValue
	11,  // 59: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.backslash_quote:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.BackslashQuote
	18,  // 60: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.default_with_oids:type_name -> google.protobuf.BoolValue
	18,  // 61: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.escape_string_warning:type_name -> google.protobuf.BoolValue
	18,  // 62: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.lo_compat_privileges:type_name -> google.protobuf.BoolValue
	18,  // 63: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.operator_precedence_warning:type_name -> google.protobuf.BoolValue
	18,  // 64: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.quote_all_identifiers:type_name -> google.protobuf.BoolValue
	18,  // 65: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.standard_conforming_strings:type_name -> google.protobuf.BoolValue
	18,  // 66: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.synchronize_seqscans:type_name -> google.protobuf.BoolValue
	18,  // 67: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.transform_null_equals:type_name -> google.protobuf.BoolValue
	18,  // 68: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.exit_on_error:type_name -> google.protobuf.BoolValue
	17,  // 69: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.seq_page_cost:type_name -> google.protobuf.DoubleValue
	17,  // 70: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.random_page_cost:type_name -> google.protobuf.DoubleValue
	16,  // 71: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.autovacuum_max_workers:type_name -> google.protobuf.Int64Value
	16,  // 72: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.autovacuum_vacuum_cost_delay:type_name -> google.protobuf.Int64Value
	16,  // 73: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.autovacuum_vacuum_cost_limit:type_name -> google.protobuf.Int64Value
	16,  // 74: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.autovacuum_naptime:type_name -> google.protobuf.Int64Value
	16,  // 75: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.archive_timeout:type_name -> google.protobuf.Int64Value
	16,  // 76: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.track_activity_query_size:type_name -> google.protobuf.Int64Value
	18,  // 77: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.enable_bitmapscan:type_name -> google.protobuf.BoolValue
	18,  // 78: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.enable_hashagg:type_name -> google.protobuf.BoolValue
	18,  // 79: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.enable_hashjoin:type_name -> google.protobuf.BoolValue
	18,  // 80: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.enable_indexscan:type_name -> google.protobuf.BoolValue
	18,  // 81: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.enable_indexonlyscan:type_name -> google.protobuf.BoolValue
	18,  // 82: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.enable_material:type_name -> google.protobuf.BoolValue
	18,  // 83: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.enable_mergejoin:type_name -> google.protobuf.BoolValue
	18,  // 84: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.enable_nestloop:type_name -> google.protobuf.BoolValue
	18,  // 85: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.enable_seqscan:type_name -> google.protobuf.BoolValue
	18,  // 86: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.enable_sort:type_name -> google.protobuf.BoolValue
	18,  // 87: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.enable_tidscan:type_name -> google.protobuf.BoolValue
	16,  // 88: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.max_worker_processes:type_name -> google.protobuf.Int64Value
	16,  // 89: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.max_parallel_workers:type_name -> google.protobuf.Int64Value
	16,  // 90: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.max_parallel_workers_per_gather:type_name -> google.protobuf.Int64Value
	17,  // 91: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.autovacuum_vacuum_scale_factor:type_name -> google.protobuf.DoubleValue
	17,  // 92: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.autovacuum_analyze_scale_factor:type_name -> google.protobuf.DoubleValue
	18,  // 93: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.default_transaction_read_only:type_name -> google.protobuf.BoolValue
	16,  // 94: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.effective_io_concurrency:type_name -> google.protobuf.Int64Value
	16,  // 95: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.effective_cache_size:type_name -> google.protobuf.Int64Value
	13,  // 96: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.shared_preload_libraries:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.SharedPreloadLibraries
	16,  // 97: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.auto_explain_log_min_duration:type_name -> google.protobuf.Int64Value
	18,  // 98: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.auto_explain_log_analyze:type_name -> google.protobuf.BoolValue
	18,  // 99: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.auto_explain_log_buffers:type_name -> google.protobuf.BoolValue
	18,  // 100: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.auto_explain_log_timing:type_name -> google.protobuf.BoolValue
	18,  // 101: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.auto_explain_log_triggers:type_name -> google.protobuf.BoolValue
	18,  // 102: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.auto_explain_log_verbose:type_name -> google.protobuf.BoolValue
	18,  // 103: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.auto_explain_log_nested_statements:type_name -> google.protobuf.BoolValue
	17,  // 104: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.auto_explain_sample_rate:type_name -> google.protobuf.DoubleValue
	18,  // 105: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.pg_hint_plan_enable_hint:type_name -> google.protobuf.BoolValue
	18,  // 106: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.pg_hint_plan_enable_hint_table:type_name -> google.protobuf.BoolValue
	12,  // 107: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.pg_hint_plan_debug_print:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.PgHintPlanDebugPrint
	4,   // 108: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.pg_hint_plan_message_level:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.LogLevel
	18,  // 109: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.pg_qualstats_enabled:type_name -> google.protobuf.BoolValue
	18,  // 110: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.pg_qualstats_track_constants:type_name -> google.protobuf.BoolValue
	16,  // 111: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.pg_qualstats_max:type_name -> google.protobuf.Int64Value
	18,  // 112: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.pg_qualstats_resolve_oids:type_name -> google.protobuf.BoolValue
	17,  // 113: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10.pg_qualstats_sample_rate:type_name -> google.protobuf.DoubleValue
	14,  // 114: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfigSet10.effective_config:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10
	14,  // 115: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfigSet10.user_config:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10
	14,  // 116: yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfigSet10.default_config:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlConfig10
	117, // [117:117] is the sub-list for method output_type
	117, // [117:117] is the sub-list for method input_type
	117, // [117:117] is the sub-list for extension type_name
	117, // [117:117] is the sub-list for extension extendee
	0,   // [0:117] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_init() }
func file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_init() {
	if File_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresqlConfig10); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresqlConfigSet10); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto = out.File
	file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_rawDesc = nil
	file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_goTypes = nil
	file_yandex_cloud_mdb_postgresql_v1_config_postgresql10_proto_depIdxs = nil
}
