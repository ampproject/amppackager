// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: yandex/cloud/mdb/postgresql/v1/config/host11_1c.proto

package postgresql

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PostgresqlHostConfig11_1C_ConstraintExclusion int32

const (
	PostgresqlHostConfig11_1C_CONSTRAINT_EXCLUSION_UNSPECIFIED PostgresqlHostConfig11_1C_ConstraintExclusion = 0
	PostgresqlHostConfig11_1C_CONSTRAINT_EXCLUSION_ON          PostgresqlHostConfig11_1C_ConstraintExclusion = 1
	PostgresqlHostConfig11_1C_CONSTRAINT_EXCLUSION_OFF         PostgresqlHostConfig11_1C_ConstraintExclusion = 2
	PostgresqlHostConfig11_1C_CONSTRAINT_EXCLUSION_PARTITION   PostgresqlHostConfig11_1C_ConstraintExclusion = 3
)

// Enum value maps for PostgresqlHostConfig11_1C_ConstraintExclusion.
var (
	PostgresqlHostConfig11_1C_ConstraintExclusion_name = map[int32]string{
		0: "CONSTRAINT_EXCLUSION_UNSPECIFIED",
		1: "CONSTRAINT_EXCLUSION_ON",
		2: "CONSTRAINT_EXCLUSION_OFF",
		3: "CONSTRAINT_EXCLUSION_PARTITION",
	}
	PostgresqlHostConfig11_1C_ConstraintExclusion_value = map[string]int32{
		"CONSTRAINT_EXCLUSION_UNSPECIFIED": 0,
		"CONSTRAINT_EXCLUSION_ON":          1,
		"CONSTRAINT_EXCLUSION_OFF":         2,
		"CONSTRAINT_EXCLUSION_PARTITION":   3,
	}
)

func (x PostgresqlHostConfig11_1C_ConstraintExclusion) Enum() *PostgresqlHostConfig11_1C_ConstraintExclusion {
	p := new(PostgresqlHostConfig11_1C_ConstraintExclusion)
	*p = x
	return p
}

func (x PostgresqlHostConfig11_1C_ConstraintExclusion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlHostConfig11_1C_ConstraintExclusion) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[0].Descriptor()
}

func (PostgresqlHostConfig11_1C_ConstraintExclusion) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[0]
}

func (x PostgresqlHostConfig11_1C_ConstraintExclusion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlHostConfig11_1C_ConstraintExclusion.Descriptor instead.
func (PostgresqlHostConfig11_1C_ConstraintExclusion) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescGZIP(), []int{0, 0}
}

type PostgresqlHostConfig11_1C_ForceParallelMode int32

const (
	PostgresqlHostConfig11_1C_FORCE_PARALLEL_MODE_UNSPECIFIED PostgresqlHostConfig11_1C_ForceParallelMode = 0
	PostgresqlHostConfig11_1C_FORCE_PARALLEL_MODE_ON          PostgresqlHostConfig11_1C_ForceParallelMode = 1
	PostgresqlHostConfig11_1C_FORCE_PARALLEL_MODE_OFF         PostgresqlHostConfig11_1C_ForceParallelMode = 2
	PostgresqlHostConfig11_1C_FORCE_PARALLEL_MODE_REGRESS     PostgresqlHostConfig11_1C_ForceParallelMode = 3
)

// Enum value maps for PostgresqlHostConfig11_1C_ForceParallelMode.
var (
	PostgresqlHostConfig11_1C_ForceParallelMode_name = map[int32]string{
		0: "FORCE_PARALLEL_MODE_UNSPECIFIED",
		1: "FORCE_PARALLEL_MODE_ON",
		2: "FORCE_PARALLEL_MODE_OFF",
		3: "FORCE_PARALLEL_MODE_REGRESS",
	}
	PostgresqlHostConfig11_1C_ForceParallelMode_value = map[string]int32{
		"FORCE_PARALLEL_MODE_UNSPECIFIED": 0,
		"FORCE_PARALLEL_MODE_ON":          1,
		"FORCE_PARALLEL_MODE_OFF":         2,
		"FORCE_PARALLEL_MODE_REGRESS":     3,
	}
)

func (x PostgresqlHostConfig11_1C_ForceParallelMode) Enum() *PostgresqlHostConfig11_1C_ForceParallelMode {
	p := new(PostgresqlHostConfig11_1C_ForceParallelMode)
	*p = x
	return p
}

func (x PostgresqlHostConfig11_1C_ForceParallelMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlHostConfig11_1C_ForceParallelMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[1].Descriptor()
}

func (PostgresqlHostConfig11_1C_ForceParallelMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[1]
}

func (x PostgresqlHostConfig11_1C_ForceParallelMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlHostConfig11_1C_ForceParallelMode.Descriptor instead.
func (PostgresqlHostConfig11_1C_ForceParallelMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescGZIP(), []int{0, 1}
}

type PostgresqlHostConfig11_1C_LogLevel int32

const (
	PostgresqlHostConfig11_1C_LOG_LEVEL_UNSPECIFIED PostgresqlHostConfig11_1C_LogLevel = 0
	PostgresqlHostConfig11_1C_LOG_LEVEL_DEBUG5      PostgresqlHostConfig11_1C_LogLevel = 1
	PostgresqlHostConfig11_1C_LOG_LEVEL_DEBUG4      PostgresqlHostConfig11_1C_LogLevel = 2
	PostgresqlHostConfig11_1C_LOG_LEVEL_DEBUG3      PostgresqlHostConfig11_1C_LogLevel = 3
	PostgresqlHostConfig11_1C_LOG_LEVEL_DEBUG2      PostgresqlHostConfig11_1C_LogLevel = 4
	PostgresqlHostConfig11_1C_LOG_LEVEL_DEBUG1      PostgresqlHostConfig11_1C_LogLevel = 5
	PostgresqlHostConfig11_1C_LOG_LEVEL_LOG         PostgresqlHostConfig11_1C_LogLevel = 6
	PostgresqlHostConfig11_1C_LOG_LEVEL_NOTICE      PostgresqlHostConfig11_1C_LogLevel = 7
	PostgresqlHostConfig11_1C_LOG_LEVEL_WARNING     PostgresqlHostConfig11_1C_LogLevel = 8
	PostgresqlHostConfig11_1C_LOG_LEVEL_ERROR       PostgresqlHostConfig11_1C_LogLevel = 9
	PostgresqlHostConfig11_1C_LOG_LEVEL_FATAL       PostgresqlHostConfig11_1C_LogLevel = 10
	PostgresqlHostConfig11_1C_LOG_LEVEL_PANIC       PostgresqlHostConfig11_1C_LogLevel = 11
)

// Enum value maps for PostgresqlHostConfig11_1C_LogLevel.
var (
	PostgresqlHostConfig11_1C_LogLevel_name = map[int32]string{
		0:  "LOG_LEVEL_UNSPECIFIED",
		1:  "LOG_LEVEL_DEBUG5",
		2:  "LOG_LEVEL_DEBUG4",
		3:  "LOG_LEVEL_DEBUG3",
		4:  "LOG_LEVEL_DEBUG2",
		5:  "LOG_LEVEL_DEBUG1",
		6:  "LOG_LEVEL_LOG",
		7:  "LOG_LEVEL_NOTICE",
		8:  "LOG_LEVEL_WARNING",
		9:  "LOG_LEVEL_ERROR",
		10: "LOG_LEVEL_FATAL",
		11: "LOG_LEVEL_PANIC",
	}
	PostgresqlHostConfig11_1C_LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"LOG_LEVEL_DEBUG5":      1,
		"LOG_LEVEL_DEBUG4":      2,
		"LOG_LEVEL_DEBUG3":      3,
		"LOG_LEVEL_DEBUG2":      4,
		"LOG_LEVEL_DEBUG1":      5,
		"LOG_LEVEL_LOG":         6,
		"LOG_LEVEL_NOTICE":      7,
		"LOG_LEVEL_WARNING":     8,
		"LOG_LEVEL_ERROR":       9,
		"LOG_LEVEL_FATAL":       10,
		"LOG_LEVEL_PANIC":       11,
	}
)

func (x PostgresqlHostConfig11_1C_LogLevel) Enum() *PostgresqlHostConfig11_1C_LogLevel {
	p := new(PostgresqlHostConfig11_1C_LogLevel)
	*p = x
	return p
}

func (x PostgresqlHostConfig11_1C_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlHostConfig11_1C_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[2].Descriptor()
}

func (PostgresqlHostConfig11_1C_LogLevel) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[2]
}

func (x PostgresqlHostConfig11_1C_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlHostConfig11_1C_LogLevel.Descriptor instead.
func (PostgresqlHostConfig11_1C_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescGZIP(), []int{0, 2}
}

type PostgresqlHostConfig11_1C_LogErrorVerbosity int32

const (
	PostgresqlHostConfig11_1C_LOG_ERROR_VERBOSITY_UNSPECIFIED PostgresqlHostConfig11_1C_LogErrorVerbosity = 0
	PostgresqlHostConfig11_1C_LOG_ERROR_VERBOSITY_TERSE       PostgresqlHostConfig11_1C_LogErrorVerbosity = 1
	PostgresqlHostConfig11_1C_LOG_ERROR_VERBOSITY_DEFAULT     PostgresqlHostConfig11_1C_LogErrorVerbosity = 2
	PostgresqlHostConfig11_1C_LOG_ERROR_VERBOSITY_VERBOSE     PostgresqlHostConfig11_1C_LogErrorVerbosity = 3
)

// Enum value maps for PostgresqlHostConfig11_1C_LogErrorVerbosity.
var (
	PostgresqlHostConfig11_1C_LogErrorVerbosity_name = map[int32]string{
		0: "LOG_ERROR_VERBOSITY_UNSPECIFIED",
		1: "LOG_ERROR_VERBOSITY_TERSE",
		2: "LOG_ERROR_VERBOSITY_DEFAULT",
		3: "LOG_ERROR_VERBOSITY_VERBOSE",
	}
	PostgresqlHostConfig11_1C_LogErrorVerbosity_value = map[string]int32{
		"LOG_ERROR_VERBOSITY_UNSPECIFIED": 0,
		"LOG_ERROR_VERBOSITY_TERSE":       1,
		"LOG_ERROR_VERBOSITY_DEFAULT":     2,
		"LOG_ERROR_VERBOSITY_VERBOSE":     3,
	}
)

func (x PostgresqlHostConfig11_1C_LogErrorVerbosity) Enum() *PostgresqlHostConfig11_1C_LogErrorVerbosity {
	p := new(PostgresqlHostConfig11_1C_LogErrorVerbosity)
	*p = x
	return p
}

func (x PostgresqlHostConfig11_1C_LogErrorVerbosity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlHostConfig11_1C_LogErrorVerbosity) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[3].Descriptor()
}

func (PostgresqlHostConfig11_1C_LogErrorVerbosity) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[3]
}

func (x PostgresqlHostConfig11_1C_LogErrorVerbosity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlHostConfig11_1C_LogErrorVerbosity.Descriptor instead.
func (PostgresqlHostConfig11_1C_LogErrorVerbosity) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescGZIP(), []int{0, 3}
}

type PostgresqlHostConfig11_1C_LogStatement int32

const (
	PostgresqlHostConfig11_1C_LOG_STATEMENT_UNSPECIFIED PostgresqlHostConfig11_1C_LogStatement = 0
	PostgresqlHostConfig11_1C_LOG_STATEMENT_NONE        PostgresqlHostConfig11_1C_LogStatement = 1
	PostgresqlHostConfig11_1C_LOG_STATEMENT_DDL         PostgresqlHostConfig11_1C_LogStatement = 2
	PostgresqlHostConfig11_1C_LOG_STATEMENT_MOD         PostgresqlHostConfig11_1C_LogStatement = 3
	PostgresqlHostConfig11_1C_LOG_STATEMENT_ALL         PostgresqlHostConfig11_1C_LogStatement = 4
)

// Enum value maps for PostgresqlHostConfig11_1C_LogStatement.
var (
	PostgresqlHostConfig11_1C_LogStatement_name = map[int32]string{
		0: "LOG_STATEMENT_UNSPECIFIED",
		1: "LOG_STATEMENT_NONE",
		2: "LOG_STATEMENT_DDL",
		3: "LOG_STATEMENT_MOD",
		4: "LOG_STATEMENT_ALL",
	}
	PostgresqlHostConfig11_1C_LogStatement_value = map[string]int32{
		"LOG_STATEMENT_UNSPECIFIED": 0,
		"LOG_STATEMENT_NONE":        1,
		"LOG_STATEMENT_DDL":         2,
		"LOG_STATEMENT_MOD":         3,
		"LOG_STATEMENT_ALL":         4,
	}
)

func (x PostgresqlHostConfig11_1C_LogStatement) Enum() *PostgresqlHostConfig11_1C_LogStatement {
	p := new(PostgresqlHostConfig11_1C_LogStatement)
	*p = x
	return p
}

func (x PostgresqlHostConfig11_1C_LogStatement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlHostConfig11_1C_LogStatement) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[4].Descriptor()
}

func (PostgresqlHostConfig11_1C_LogStatement) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[4]
}

func (x PostgresqlHostConfig11_1C_LogStatement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlHostConfig11_1C_LogStatement.Descriptor instead.
func (PostgresqlHostConfig11_1C_LogStatement) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescGZIP(), []int{0, 4}
}

type PostgresqlHostConfig11_1C_TransactionIsolation int32

const (
	PostgresqlHostConfig11_1C_TRANSACTION_ISOLATION_UNSPECIFIED      PostgresqlHostConfig11_1C_TransactionIsolation = 0
	PostgresqlHostConfig11_1C_TRANSACTION_ISOLATION_READ_UNCOMMITTED PostgresqlHostConfig11_1C_TransactionIsolation = 1
	PostgresqlHostConfig11_1C_TRANSACTION_ISOLATION_READ_COMMITTED   PostgresqlHostConfig11_1C_TransactionIsolation = 2
	PostgresqlHostConfig11_1C_TRANSACTION_ISOLATION_REPEATABLE_READ  PostgresqlHostConfig11_1C_TransactionIsolation = 3
	PostgresqlHostConfig11_1C_TRANSACTION_ISOLATION_SERIALIZABLE     PostgresqlHostConfig11_1C_TransactionIsolation = 4
)

// Enum value maps for PostgresqlHostConfig11_1C_TransactionIsolation.
var (
	PostgresqlHostConfig11_1C_TransactionIsolation_name = map[int32]string{
		0: "TRANSACTION_ISOLATION_UNSPECIFIED",
		1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED",
		2: "TRANSACTION_ISOLATION_READ_COMMITTED",
		3: "TRANSACTION_ISOLATION_REPEATABLE_READ",
		4: "TRANSACTION_ISOLATION_SERIALIZABLE",
	}
	PostgresqlHostConfig11_1C_TransactionIsolation_value = map[string]int32{
		"TRANSACTION_ISOLATION_UNSPECIFIED":      0,
		"TRANSACTION_ISOLATION_READ_UNCOMMITTED": 1,
		"TRANSACTION_ISOLATION_READ_COMMITTED":   2,
		"TRANSACTION_ISOLATION_REPEATABLE_READ":  3,
		"TRANSACTION_ISOLATION_SERIALIZABLE":     4,
	}
)

func (x PostgresqlHostConfig11_1C_TransactionIsolation) Enum() *PostgresqlHostConfig11_1C_TransactionIsolation {
	p := new(PostgresqlHostConfig11_1C_TransactionIsolation)
	*p = x
	return p
}

func (x PostgresqlHostConfig11_1C_TransactionIsolation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlHostConfig11_1C_TransactionIsolation) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[5].Descriptor()
}

func (PostgresqlHostConfig11_1C_TransactionIsolation) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[5]
}

func (x PostgresqlHostConfig11_1C_TransactionIsolation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlHostConfig11_1C_TransactionIsolation.Descriptor instead.
func (PostgresqlHostConfig11_1C_TransactionIsolation) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescGZIP(), []int{0, 5}
}

type PostgresqlHostConfig11_1C_ByteaOutput int32

const (
	PostgresqlHostConfig11_1C_BYTEA_OUTPUT_UNSPECIFIED PostgresqlHostConfig11_1C_ByteaOutput = 0
	PostgresqlHostConfig11_1C_BYTEA_OUTPUT_HEX         PostgresqlHostConfig11_1C_ByteaOutput = 1
	PostgresqlHostConfig11_1C_BYTEA_OUTPUT_ESCAPED     PostgresqlHostConfig11_1C_ByteaOutput = 2
)

// Enum value maps for PostgresqlHostConfig11_1C_ByteaOutput.
var (
	PostgresqlHostConfig11_1C_ByteaOutput_name = map[int32]string{
		0: "BYTEA_OUTPUT_UNSPECIFIED",
		1: "BYTEA_OUTPUT_HEX",
		2: "BYTEA_OUTPUT_ESCAPED",
	}
	PostgresqlHostConfig11_1C_ByteaOutput_value = map[string]int32{
		"BYTEA_OUTPUT_UNSPECIFIED": 0,
		"BYTEA_OUTPUT_HEX":         1,
		"BYTEA_OUTPUT_ESCAPED":     2,
	}
)

func (x PostgresqlHostConfig11_1C_ByteaOutput) Enum() *PostgresqlHostConfig11_1C_ByteaOutput {
	p := new(PostgresqlHostConfig11_1C_ByteaOutput)
	*p = x
	return p
}

func (x PostgresqlHostConfig11_1C_ByteaOutput) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlHostConfig11_1C_ByteaOutput) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[6].Descriptor()
}

func (PostgresqlHostConfig11_1C_ByteaOutput) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[6]
}

func (x PostgresqlHostConfig11_1C_ByteaOutput) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlHostConfig11_1C_ByteaOutput.Descriptor instead.
func (PostgresqlHostConfig11_1C_ByteaOutput) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescGZIP(), []int{0, 6}
}

type PostgresqlHostConfig11_1C_XmlBinary int32

const (
	PostgresqlHostConfig11_1C_XML_BINARY_UNSPECIFIED PostgresqlHostConfig11_1C_XmlBinary = 0
	PostgresqlHostConfig11_1C_XML_BINARY_BASE64      PostgresqlHostConfig11_1C_XmlBinary = 1
	PostgresqlHostConfig11_1C_XML_BINARY_HEX         PostgresqlHostConfig11_1C_XmlBinary = 2
)

// Enum value maps for PostgresqlHostConfig11_1C_XmlBinary.
var (
	PostgresqlHostConfig11_1C_XmlBinary_name = map[int32]string{
		0: "XML_BINARY_UNSPECIFIED",
		1: "XML_BINARY_BASE64",
		2: "XML_BINARY_HEX",
	}
	PostgresqlHostConfig11_1C_XmlBinary_value = map[string]int32{
		"XML_BINARY_UNSPECIFIED": 0,
		"XML_BINARY_BASE64":      1,
		"XML_BINARY_HEX":         2,
	}
)

func (x PostgresqlHostConfig11_1C_XmlBinary) Enum() *PostgresqlHostConfig11_1C_XmlBinary {
	p := new(PostgresqlHostConfig11_1C_XmlBinary)
	*p = x
	return p
}

func (x PostgresqlHostConfig11_1C_XmlBinary) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlHostConfig11_1C_XmlBinary) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[7].Descriptor()
}

func (PostgresqlHostConfig11_1C_XmlBinary) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[7]
}

func (x PostgresqlHostConfig11_1C_XmlBinary) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlHostConfig11_1C_XmlBinary.Descriptor instead.
func (PostgresqlHostConfig11_1C_XmlBinary) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescGZIP(), []int{0, 7}
}

type PostgresqlHostConfig11_1C_XmlOption int32

const (
	PostgresqlHostConfig11_1C_XML_OPTION_UNSPECIFIED PostgresqlHostConfig11_1C_XmlOption = 0
	PostgresqlHostConfig11_1C_XML_OPTION_DOCUMENT    PostgresqlHostConfig11_1C_XmlOption = 1
	PostgresqlHostConfig11_1C_XML_OPTION_CONTENT     PostgresqlHostConfig11_1C_XmlOption = 2
)

// Enum value maps for PostgresqlHostConfig11_1C_XmlOption.
var (
	PostgresqlHostConfig11_1C_XmlOption_name = map[int32]string{
		0: "XML_OPTION_UNSPECIFIED",
		1: "XML_OPTION_DOCUMENT",
		2: "XML_OPTION_CONTENT",
	}
	PostgresqlHostConfig11_1C_XmlOption_value = map[string]int32{
		"XML_OPTION_UNSPECIFIED": 0,
		"XML_OPTION_DOCUMENT":    1,
		"XML_OPTION_CONTENT":     2,
	}
)

func (x PostgresqlHostConfig11_1C_XmlOption) Enum() *PostgresqlHostConfig11_1C_XmlOption {
	p := new(PostgresqlHostConfig11_1C_XmlOption)
	*p = x
	return p
}

func (x PostgresqlHostConfig11_1C_XmlOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlHostConfig11_1C_XmlOption) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[8].Descriptor()
}

func (PostgresqlHostConfig11_1C_XmlOption) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[8]
}

func (x PostgresqlHostConfig11_1C_XmlOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlHostConfig11_1C_XmlOption.Descriptor instead.
func (PostgresqlHostConfig11_1C_XmlOption) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescGZIP(), []int{0, 8}
}

type PostgresqlHostConfig11_1C_BackslashQuote int32

const (
	PostgresqlHostConfig11_1C_BACKSLASH_QUOTE_UNSPECIFIED   PostgresqlHostConfig11_1C_BackslashQuote = 0
	PostgresqlHostConfig11_1C_BACKSLASH_QUOTE               PostgresqlHostConfig11_1C_BackslashQuote = 1
	PostgresqlHostConfig11_1C_BACKSLASH_QUOTE_ON            PostgresqlHostConfig11_1C_BackslashQuote = 2
	PostgresqlHostConfig11_1C_BACKSLASH_QUOTE_OFF           PostgresqlHostConfig11_1C_BackslashQuote = 3
	PostgresqlHostConfig11_1C_BACKSLASH_QUOTE_SAFE_ENCODING PostgresqlHostConfig11_1C_BackslashQuote = 4
)

// Enum value maps for PostgresqlHostConfig11_1C_BackslashQuote.
var (
	PostgresqlHostConfig11_1C_BackslashQuote_name = map[int32]string{
		0: "BACKSLASH_QUOTE_UNSPECIFIED",
		1: "BACKSLASH_QUOTE",
		2: "BACKSLASH_QUOTE_ON",
		3: "BACKSLASH_QUOTE_OFF",
		4: "BACKSLASH_QUOTE_SAFE_ENCODING",
	}
	PostgresqlHostConfig11_1C_BackslashQuote_value = map[string]int32{
		"BACKSLASH_QUOTE_UNSPECIFIED":   0,
		"BACKSLASH_QUOTE":               1,
		"BACKSLASH_QUOTE_ON":            2,
		"BACKSLASH_QUOTE_OFF":           3,
		"BACKSLASH_QUOTE_SAFE_ENCODING": 4,
	}
)

func (x PostgresqlHostConfig11_1C_BackslashQuote) Enum() *PostgresqlHostConfig11_1C_BackslashQuote {
	p := new(PostgresqlHostConfig11_1C_BackslashQuote)
	*p = x
	return p
}

func (x PostgresqlHostConfig11_1C_BackslashQuote) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostgresqlHostConfig11_1C_BackslashQuote) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[9].Descriptor()
}

func (PostgresqlHostConfig11_1C_BackslashQuote) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes[9]
}

func (x PostgresqlHostConfig11_1C_BackslashQuote) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostgresqlHostConfig11_1C_BackslashQuote.Descriptor instead.
func (PostgresqlHostConfig11_1C_BackslashQuote) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescGZIP(), []int{0, 9}
}

// Options and structure of `PostgresqlConfig` reflects PostgreSQL configuration file
// parameters which detailed description is available in
// [PostgreSQL documentation](https://www.postgresql.org/docs/11/runtime-config.html).
type PostgresqlHostConfig11_1C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoveryMinApplyDelay           *wrapperspb.Int64Value                         `protobuf:"bytes,1,opt,name=recovery_min_apply_delay,json=recoveryMinApplyDelay,proto3" json:"recovery_min_apply_delay,omitempty"` // in milliseconds.
	SharedBuffers                   *wrapperspb.Int64Value                         `protobuf:"bytes,2,opt,name=shared_buffers,json=sharedBuffers,proto3" json:"shared_buffers,omitempty"`                             // in bytes.
	TempBuffers                     *wrapperspb.Int64Value                         `protobuf:"bytes,3,opt,name=temp_buffers,json=tempBuffers,proto3" json:"temp_buffers,omitempty"`                                   // in bytes.
	WorkMem                         *wrapperspb.Int64Value                         `protobuf:"bytes,4,opt,name=work_mem,json=workMem,proto3" json:"work_mem,omitempty"`                                               // in bytes.
	TempFileLimit                   *wrapperspb.Int64Value                         `protobuf:"bytes,5,opt,name=temp_file_limit,json=tempFileLimit,proto3" json:"temp_file_limit,omitempty"`                           // in bytes.
	BackendFlushAfter               *wrapperspb.Int64Value                         `protobuf:"bytes,6,opt,name=backend_flush_after,json=backendFlushAfter,proto3" json:"backend_flush_after,omitempty"`
	OldSnapshotThreshold            *wrapperspb.Int64Value                         `protobuf:"bytes,7,opt,name=old_snapshot_threshold,json=oldSnapshotThreshold,proto3" json:"old_snapshot_threshold,omitempty"`
	MaxStandbyStreamingDelay        *wrapperspb.Int64Value                         `protobuf:"bytes,8,opt,name=max_standby_streaming_delay,json=maxStandbyStreamingDelay,proto3" json:"max_standby_streaming_delay,omitempty"` // in milliseconds.
	ConstraintExclusion             PostgresqlHostConfig11_1C_ConstraintExclusion  `protobuf:"varint,9,opt,name=constraint_exclusion,json=constraintExclusion,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C_ConstraintExclusion" json:"constraint_exclusion,omitempty"`
	CursorTupleFraction             *wrapperspb.DoubleValue                        `protobuf:"bytes,10,opt,name=cursor_tuple_fraction,json=cursorTupleFraction,proto3" json:"cursor_tuple_fraction,omitempty"`
	FromCollapseLimit               *wrapperspb.Int64Value                         `protobuf:"bytes,11,opt,name=from_collapse_limit,json=fromCollapseLimit,proto3" json:"from_collapse_limit,omitempty"`
	JoinCollapseLimit               *wrapperspb.Int64Value                         `protobuf:"bytes,12,opt,name=join_collapse_limit,json=joinCollapseLimit,proto3" json:"join_collapse_limit,omitempty"`
	ForceParallelMode               PostgresqlHostConfig11_1C_ForceParallelMode    `protobuf:"varint,13,opt,name=force_parallel_mode,json=forceParallelMode,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C_ForceParallelMode" json:"force_parallel_mode,omitempty"`
	ClientMinMessages               PostgresqlHostConfig11_1C_LogLevel             `protobuf:"varint,14,opt,name=client_min_messages,json=clientMinMessages,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C_LogLevel" json:"client_min_messages,omitempty"`
	LogMinMessages                  PostgresqlHostConfig11_1C_LogLevel             `protobuf:"varint,15,opt,name=log_min_messages,json=logMinMessages,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C_LogLevel" json:"log_min_messages,omitempty"`
	LogMinErrorStatement            PostgresqlHostConfig11_1C_LogLevel             `protobuf:"varint,16,opt,name=log_min_error_statement,json=logMinErrorStatement,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C_LogLevel" json:"log_min_error_statement,omitempty"`
	LogMinDurationStatement         *wrapperspb.Int64Value                         `protobuf:"bytes,17,opt,name=log_min_duration_statement,json=logMinDurationStatement,proto3" json:"log_min_duration_statement,omitempty"` // in milliseconds.
	LogCheckpoints                  *wrapperspb.BoolValue                          `protobuf:"bytes,18,opt,name=log_checkpoints,json=logCheckpoints,proto3" json:"log_checkpoints,omitempty"`
	LogConnections                  *wrapperspb.BoolValue                          `protobuf:"bytes,19,opt,name=log_connections,json=logConnections,proto3" json:"log_connections,omitempty"`
	LogDisconnections               *wrapperspb.BoolValue                          `protobuf:"bytes,20,opt,name=log_disconnections,json=logDisconnections,proto3" json:"log_disconnections,omitempty"`
	LogDuration                     *wrapperspb.BoolValue                          `protobuf:"bytes,21,opt,name=log_duration,json=logDuration,proto3" json:"log_duration,omitempty"`
	LogErrorVerbosity               PostgresqlHostConfig11_1C_LogErrorVerbosity    `protobuf:"varint,22,opt,name=log_error_verbosity,json=logErrorVerbosity,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C_LogErrorVerbosity" json:"log_error_verbosity,omitempty"`
	LogLockWaits                    *wrapperspb.BoolValue                          `protobuf:"bytes,23,opt,name=log_lock_waits,json=logLockWaits,proto3" json:"log_lock_waits,omitempty"`
	LogStatement                    PostgresqlHostConfig11_1C_LogStatement         `protobuf:"varint,24,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C_LogStatement" json:"log_statement,omitempty"`
	LogTempFiles                    *wrapperspb.Int64Value                         `protobuf:"bytes,25,opt,name=log_temp_files,json=logTempFiles,proto3" json:"log_temp_files,omitempty"`
	SearchPath                      string                                         `protobuf:"bytes,26,opt,name=search_path,json=searchPath,proto3" json:"search_path,omitempty"`
	RowSecurity                     *wrapperspb.BoolValue                          `protobuf:"bytes,27,opt,name=row_security,json=rowSecurity,proto3" json:"row_security,omitempty"`
	DefaultTransactionIsolation     PostgresqlHostConfig11_1C_TransactionIsolation `protobuf:"varint,28,opt,name=default_transaction_isolation,json=defaultTransactionIsolation,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C_TransactionIsolation" json:"default_transaction_isolation,omitempty"`
	StatementTimeout                *wrapperspb.Int64Value                         `protobuf:"bytes,29,opt,name=statement_timeout,json=statementTimeout,proto3" json:"statement_timeout,omitempty"`                                                    // in milliseconds.
	LockTimeout                     *wrapperspb.Int64Value                         `protobuf:"bytes,30,opt,name=lock_timeout,json=lockTimeout,proto3" json:"lock_timeout,omitempty"`                                                                   // in milliseconds.
	IdleInTransactionSessionTimeout *wrapperspb.Int64Value                         `protobuf:"bytes,31,opt,name=idle_in_transaction_session_timeout,json=idleInTransactionSessionTimeout,proto3" json:"idle_in_transaction_session_timeout,omitempty"` // in milliseconds.
	ByteaOutput                     PostgresqlHostConfig11_1C_ByteaOutput          `protobuf:"varint,32,opt,name=bytea_output,json=byteaOutput,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C_ByteaOutput" json:"bytea_output,omitempty"`
	Xmlbinary                       PostgresqlHostConfig11_1C_XmlBinary            `protobuf:"varint,33,opt,name=xmlbinary,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C_XmlBinary" json:"xmlbinary,omitempty"`
	Xmloption                       PostgresqlHostConfig11_1C_XmlOption            `protobuf:"varint,34,opt,name=xmloption,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C_XmlOption" json:"xmloption,omitempty"`
	GinPendingListLimit             *wrapperspb.Int64Value                         `protobuf:"bytes,35,opt,name=gin_pending_list_limit,json=ginPendingListLimit,proto3" json:"gin_pending_list_limit,omitempty"` // in bytes.
	DeadlockTimeout                 *wrapperspb.Int64Value                         `protobuf:"bytes,36,opt,name=deadlock_timeout,json=deadlockTimeout,proto3" json:"deadlock_timeout,omitempty"`                 // in milliseconds.
	MaxLocksPerTransaction          *wrapperspb.Int64Value                         `protobuf:"bytes,37,opt,name=max_locks_per_transaction,json=maxLocksPerTransaction,proto3" json:"max_locks_per_transaction,omitempty"`
	MaxPredLocksPerTransaction      *wrapperspb.Int64Value                         `protobuf:"bytes,38,opt,name=max_pred_locks_per_transaction,json=maxPredLocksPerTransaction,proto3" json:"max_pred_locks_per_transaction,omitempty"`
	ArrayNulls                      *wrapperspb.BoolValue                          `protobuf:"bytes,39,opt,name=array_nulls,json=arrayNulls,proto3" json:"array_nulls,omitempty"`
	BackslashQuote                  PostgresqlHostConfig11_1C_BackslashQuote       `protobuf:"varint,40,opt,name=backslash_quote,json=backslashQuote,proto3,enum=yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C_BackslashQuote" json:"backslash_quote,omitempty"`
	DefaultWithOids                 *wrapperspb.BoolValue                          `protobuf:"bytes,41,opt,name=default_with_oids,json=defaultWithOids,proto3" json:"default_with_oids,omitempty"`
	EscapeStringWarning             *wrapperspb.BoolValue                          `protobuf:"bytes,42,opt,name=escape_string_warning,json=escapeStringWarning,proto3" json:"escape_string_warning,omitempty"`
	LoCompatPrivileges              *wrapperspb.BoolValue                          `protobuf:"bytes,43,opt,name=lo_compat_privileges,json=loCompatPrivileges,proto3" json:"lo_compat_privileges,omitempty"`
	OperatorPrecedenceWarning       *wrapperspb.BoolValue                          `protobuf:"bytes,44,opt,name=operator_precedence_warning,json=operatorPrecedenceWarning,proto3" json:"operator_precedence_warning,omitempty"`
	QuoteAllIdentifiers             *wrapperspb.BoolValue                          `protobuf:"bytes,45,opt,name=quote_all_identifiers,json=quoteAllIdentifiers,proto3" json:"quote_all_identifiers,omitempty"`
	StandardConformingStrings       *wrapperspb.BoolValue                          `protobuf:"bytes,46,opt,name=standard_conforming_strings,json=standardConformingStrings,proto3" json:"standard_conforming_strings,omitempty"`
	SynchronizeSeqscans             *wrapperspb.BoolValue                          `protobuf:"bytes,47,opt,name=synchronize_seqscans,json=synchronizeSeqscans,proto3" json:"synchronize_seqscans,omitempty"`
	TransformNullEquals             *wrapperspb.BoolValue                          `protobuf:"bytes,48,opt,name=transform_null_equals,json=transformNullEquals,proto3" json:"transform_null_equals,omitempty"`
	ExitOnError                     *wrapperspb.BoolValue                          `protobuf:"bytes,49,opt,name=exit_on_error,json=exitOnError,proto3" json:"exit_on_error,omitempty"`
	SeqPageCost                     *wrapperspb.DoubleValue                        `protobuf:"bytes,50,opt,name=seq_page_cost,json=seqPageCost,proto3" json:"seq_page_cost,omitempty"`
	RandomPageCost                  *wrapperspb.DoubleValue                        `protobuf:"bytes,51,opt,name=random_page_cost,json=randomPageCost,proto3" json:"random_page_cost,omitempty"`
	EnableBitmapscan                *wrapperspb.BoolValue                          `protobuf:"bytes,54,opt,name=enable_bitmapscan,json=enableBitmapscan,proto3" json:"enable_bitmapscan,omitempty"`
	EnableHashagg                   *wrapperspb.BoolValue                          `protobuf:"bytes,55,opt,name=enable_hashagg,json=enableHashagg,proto3" json:"enable_hashagg,omitempty"`
	EnableHashjoin                  *wrapperspb.BoolValue                          `protobuf:"bytes,56,opt,name=enable_hashjoin,json=enableHashjoin,proto3" json:"enable_hashjoin,omitempty"`
	EnableIndexscan                 *wrapperspb.BoolValue                          `protobuf:"bytes,57,opt,name=enable_indexscan,json=enableIndexscan,proto3" json:"enable_indexscan,omitempty"`
	EnableIndexonlyscan             *wrapperspb.BoolValue                          `protobuf:"bytes,58,opt,name=enable_indexonlyscan,json=enableIndexonlyscan,proto3" json:"enable_indexonlyscan,omitempty"`
	EnableMaterial                  *wrapperspb.BoolValue                          `protobuf:"bytes,59,opt,name=enable_material,json=enableMaterial,proto3" json:"enable_material,omitempty"`
	EnableMergejoin                 *wrapperspb.BoolValue                          `protobuf:"bytes,60,opt,name=enable_mergejoin,json=enableMergejoin,proto3" json:"enable_mergejoin,omitempty"`
	EnableNestloop                  *wrapperspb.BoolValue                          `protobuf:"bytes,61,opt,name=enable_nestloop,json=enableNestloop,proto3" json:"enable_nestloop,omitempty"`
	EnableSeqscan                   *wrapperspb.BoolValue                          `protobuf:"bytes,62,opt,name=enable_seqscan,json=enableSeqscan,proto3" json:"enable_seqscan,omitempty"`
	EnableSort                      *wrapperspb.BoolValue                          `protobuf:"bytes,63,opt,name=enable_sort,json=enableSort,proto3" json:"enable_sort,omitempty"`
	EnableTidscan                   *wrapperspb.BoolValue                          `protobuf:"bytes,64,opt,name=enable_tidscan,json=enableTidscan,proto3" json:"enable_tidscan,omitempty"`
	MaxParallelWorkers              *wrapperspb.Int64Value                         `protobuf:"bytes,65,opt,name=max_parallel_workers,json=maxParallelWorkers,proto3" json:"max_parallel_workers,omitempty"`
	MaxParallelWorkersPerGather     *wrapperspb.Int64Value                         `protobuf:"bytes,66,opt,name=max_parallel_workers_per_gather,json=maxParallelWorkersPerGather,proto3" json:"max_parallel_workers_per_gather,omitempty"`
	Timezone                        string                                         `protobuf:"bytes,67,opt,name=timezone,proto3" json:"timezone,omitempty"`
	EffectiveIoConcurrency          *wrapperspb.Int64Value                         `protobuf:"bytes,68,opt,name=effective_io_concurrency,json=effectiveIoConcurrency,proto3" json:"effective_io_concurrency,omitempty"`
	EffectiveCacheSize              *wrapperspb.Int64Value                         `protobuf:"bytes,69,opt,name=effective_cache_size,json=effectiveCacheSize,proto3" json:"effective_cache_size,omitempty"`
}

func (x *PostgresqlHostConfig11_1C) Reset() {
	*x = PostgresqlHostConfig11_1C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresqlHostConfig11_1C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresqlHostConfig11_1C) ProtoMessage() {}

func (x *PostgresqlHostConfig11_1C) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresqlHostConfig11_1C.ProtoReflect.Descriptor instead.
func (*PostgresqlHostConfig11_1C) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescGZIP(), []int{0}
}

func (x *PostgresqlHostConfig11_1C) GetRecoveryMinApplyDelay() *wrapperspb.Int64Value {
	if x != nil {
		return x.RecoveryMinApplyDelay
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetSharedBuffers() *wrapperspb.Int64Value {
	if x != nil {
		return x.SharedBuffers
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetTempBuffers() *wrapperspb.Int64Value {
	if x != nil {
		return x.TempBuffers
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetWorkMem() *wrapperspb.Int64Value {
	if x != nil {
		return x.WorkMem
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetTempFileLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.TempFileLimit
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetBackendFlushAfter() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackendFlushAfter
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetOldSnapshotThreshold() *wrapperspb.Int64Value {
	if x != nil {
		return x.OldSnapshotThreshold
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetMaxStandbyStreamingDelay() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxStandbyStreamingDelay
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetConstraintExclusion() PostgresqlHostConfig11_1C_ConstraintExclusion {
	if x != nil {
		return x.ConstraintExclusion
	}
	return PostgresqlHostConfig11_1C_CONSTRAINT_EXCLUSION_UNSPECIFIED
}

func (x *PostgresqlHostConfig11_1C) GetCursorTupleFraction() *wrapperspb.DoubleValue {
	if x != nil {
		return x.CursorTupleFraction
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetFromCollapseLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.FromCollapseLimit
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetJoinCollapseLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.JoinCollapseLimit
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetForceParallelMode() PostgresqlHostConfig11_1C_ForceParallelMode {
	if x != nil {
		return x.ForceParallelMode
	}
	return PostgresqlHostConfig11_1C_FORCE_PARALLEL_MODE_UNSPECIFIED
}

func (x *PostgresqlHostConfig11_1C) GetClientMinMessages() PostgresqlHostConfig11_1C_LogLevel {
	if x != nil {
		return x.ClientMinMessages
	}
	return PostgresqlHostConfig11_1C_LOG_LEVEL_UNSPECIFIED
}

func (x *PostgresqlHostConfig11_1C) GetLogMinMessages() PostgresqlHostConfig11_1C_LogLevel {
	if x != nil {
		return x.LogMinMessages
	}
	return PostgresqlHostConfig11_1C_LOG_LEVEL_UNSPECIFIED
}

func (x *PostgresqlHostConfig11_1C) GetLogMinErrorStatement() PostgresqlHostConfig11_1C_LogLevel {
	if x != nil {
		return x.LogMinErrorStatement
	}
	return PostgresqlHostConfig11_1C_LOG_LEVEL_UNSPECIFIED
}

func (x *PostgresqlHostConfig11_1C) GetLogMinDurationStatement() *wrapperspb.Int64Value {
	if x != nil {
		return x.LogMinDurationStatement
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetLogCheckpoints() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogCheckpoints
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetLogConnections() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogConnections
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetLogDisconnections() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogDisconnections
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetLogDuration() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogDuration
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetLogErrorVerbosity() PostgresqlHostConfig11_1C_LogErrorVerbosity {
	if x != nil {
		return x.LogErrorVerbosity
	}
	return PostgresqlHostConfig11_1C_LOG_ERROR_VERBOSITY_UNSPECIFIED
}

func (x *PostgresqlHostConfig11_1C) GetLogLockWaits() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogLockWaits
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetLogStatement() PostgresqlHostConfig11_1C_LogStatement {
	if x != nil {
		return x.LogStatement
	}
	return PostgresqlHostConfig11_1C_LOG_STATEMENT_UNSPECIFIED
}

func (x *PostgresqlHostConfig11_1C) GetLogTempFiles() *wrapperspb.Int64Value {
	if x != nil {
		return x.LogTempFiles
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetSearchPath() string {
	if x != nil {
		return x.SearchPath
	}
	return ""
}

func (x *PostgresqlHostConfig11_1C) GetRowSecurity() *wrapperspb.BoolValue {
	if x != nil {
		return x.RowSecurity
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetDefaultTransactionIsolation() PostgresqlHostConfig11_1C_TransactionIsolation {
	if x != nil {
		return x.DefaultTransactionIsolation
	}
	return PostgresqlHostConfig11_1C_TRANSACTION_ISOLATION_UNSPECIFIED
}

func (x *PostgresqlHostConfig11_1C) GetStatementTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.StatementTimeout
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetLockTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.LockTimeout
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetIdleInTransactionSessionTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.IdleInTransactionSessionTimeout
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetByteaOutput() PostgresqlHostConfig11_1C_ByteaOutput {
	if x != nil {
		return x.ByteaOutput
	}
	return PostgresqlHostConfig11_1C_BYTEA_OUTPUT_UNSPECIFIED
}

func (x *PostgresqlHostConfig11_1C) GetXmlbinary() PostgresqlHostConfig11_1C_XmlBinary {
	if x != nil {
		return x.Xmlbinary
	}
	return PostgresqlHostConfig11_1C_XML_BINARY_UNSPECIFIED
}

func (x *PostgresqlHostConfig11_1C) GetXmloption() PostgresqlHostConfig11_1C_XmlOption {
	if x != nil {
		return x.Xmloption
	}
	return PostgresqlHostConfig11_1C_XML_OPTION_UNSPECIFIED
}

func (x *PostgresqlHostConfig11_1C) GetGinPendingListLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.GinPendingListLimit
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetDeadlockTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.DeadlockTimeout
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetMaxLocksPerTransaction() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxLocksPerTransaction
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetMaxPredLocksPerTransaction() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPredLocksPerTransaction
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetArrayNulls() *wrapperspb.BoolValue {
	if x != nil {
		return x.ArrayNulls
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetBackslashQuote() PostgresqlHostConfig11_1C_BackslashQuote {
	if x != nil {
		return x.BackslashQuote
	}
	return PostgresqlHostConfig11_1C_BACKSLASH_QUOTE_UNSPECIFIED
}

func (x *PostgresqlHostConfig11_1C) GetDefaultWithOids() *wrapperspb.BoolValue {
	if x != nil {
		return x.DefaultWithOids
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEscapeStringWarning() *wrapperspb.BoolValue {
	if x != nil {
		return x.EscapeStringWarning
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetLoCompatPrivileges() *wrapperspb.BoolValue {
	if x != nil {
		return x.LoCompatPrivileges
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetOperatorPrecedenceWarning() *wrapperspb.BoolValue {
	if x != nil {
		return x.OperatorPrecedenceWarning
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetQuoteAllIdentifiers() *wrapperspb.BoolValue {
	if x != nil {
		return x.QuoteAllIdentifiers
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetStandardConformingStrings() *wrapperspb.BoolValue {
	if x != nil {
		return x.StandardConformingStrings
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetSynchronizeSeqscans() *wrapperspb.BoolValue {
	if x != nil {
		return x.SynchronizeSeqscans
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetTransformNullEquals() *wrapperspb.BoolValue {
	if x != nil {
		return x.TransformNullEquals
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetExitOnError() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExitOnError
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetSeqPageCost() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SeqPageCost
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetRandomPageCost() *wrapperspb.DoubleValue {
	if x != nil {
		return x.RandomPageCost
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEnableBitmapscan() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableBitmapscan
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEnableHashagg() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableHashagg
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEnableHashjoin() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableHashjoin
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEnableIndexscan() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableIndexscan
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEnableIndexonlyscan() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableIndexonlyscan
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEnableMaterial() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableMaterial
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEnableMergejoin() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableMergejoin
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEnableNestloop() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableNestloop
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEnableSeqscan() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableSeqscan
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEnableSort() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableSort
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEnableTidscan() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableTidscan
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetMaxParallelWorkers() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxParallelWorkers
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetMaxParallelWorkersPerGather() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxParallelWorkersPerGather
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *PostgresqlHostConfig11_1C) GetEffectiveIoConcurrency() *wrapperspb.Int64Value {
	if x != nil {
		return x.EffectiveIoConcurrency
	}
	return nil
}

func (x *PostgresqlHostConfig11_1C) GetEffectiveCacheSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.EffectiveCacheSize
	}
	return nil
}

var File_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDesc = []byte{
	0x0a, 0x35, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x31, 0x31, 0x5f, 0x31,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x38,
	0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x31, 0x5f, 0x31, 0x43, 0x12, 0x54, 0x0a, 0x18, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x65,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x6d, 0x12, 0x43, 0x0a,
	0x0f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x57, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7,
	0x31, 0x06, 0x30, 0x2d, 0x32, 0x30, 0x34, 0x38, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x16, 0x6f,
	0x6c, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0xfa, 0xc7, 0x31, 0x08, 0x2d, 0x31,
	0x2d, 0x38, 0x36, 0x34, 0x30, 0x30, 0x52, 0x14, 0x6f, 0x6c, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5a, 0x0a, 0x1b,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18,
	0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x31, 0x31, 0x5f, 0x31, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10,
	0xfa, 0xc7, 0x31, 0x0c, 0x31, 0x2d, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x33, 0x36, 0x34, 0x37,
	0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x5d, 0x0a, 0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0xfa,
	0xc7, 0x31, 0x0c, 0x31, 0x2d, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x33, 0x36, 0x34, 0x37, 0x52,
	0x11, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x52, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x31, 0x5f,
	0x31, 0x43, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x79, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x31, 0x31, 0x5f, 0x31, 0x43, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x73, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x48,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x31, 0x5f, 0x31, 0x43, 0x2e, 0x4c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x4d, 0x69, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x17, 0x6c, 0x6f, 0x67, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x31, 0x5f, 0x31, 0x43, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x14, 0x6c, 0x6f, 0x67, 0x4d, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x1a, 0x6c, 0x6f,
	0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x6c, 0x6f, 0x67,
	0x4d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x6c, 0x6f, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49,
	0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x6f, 0x67,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x67,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x13, 0x6c, 0x6f, 0x67,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x31, 0x31, 0x5f, 0x31, 0x43, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x73, 0x12,
	0x72, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x31, 0x31, 0x5f, 0x31, 0x43, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x54, 0x65, 0x6d,
	0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x77, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x99, 0x01, 0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71,
	0x6c, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x31, 0x5f, 0x31, 0x43,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0c,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x69, 0x0a, 0x23,
	0x69, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x69, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x6f, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x61,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x31, 0x5f, 0x31, 0x43, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x61, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x61, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x68, 0x0a, 0x09, 0x78, 0x6d, 0x6c, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x31, 0x5f, 0x31, 0x43, 0x2e, 0x58, 0x6d,
	0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x09, 0x78, 0x6d, 0x6c, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x68, 0x0a, 0x09, 0x78, 0x6d, 0x6c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x31, 0x31, 0x5f, 0x31, 0x43, 0x2e, 0x58, 0x6d, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x78, 0x6d, 0x6c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x16,
	0x67, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x67, 0x69, 0x6e, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x46,
	0x0a, 0x10, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x63, 0x6b, 0x73,
	0x50, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f,
	0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b,
	0x73, 0x50, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x78, 0x0a, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x31, 0x31, 0x5f, 0x31, 0x43, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x73, 0x6c, 0x61, 0x73,
	0x68, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x6c, 0x61, 0x73,
	0x68, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x69, 0x64, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x69, 0x64, 0x73, 0x12, 0x4e,
	0x0a, 0x15, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x65, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4c,
	0x0a, 0x14, 0x6c, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6c, 0x6f, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x1b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x15, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x13, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x7a, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x73, 0x63, 0x61, 0x6e, 0x73, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x71, 0x73, 0x63,
	0x61, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x75, 0x6c, 0x6c, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x69, 0x74, 0x4f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x50, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x63,
	0x61, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x61, 0x67, 0x67, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x61, 0x67, 0x67, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x45,
	0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x73, 0x63,
	0x61, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x6f, 0x6e, 0x6c, 0x79, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x6f, 0x6e, 0x6c, 0x79,
	0x73, 0x63, 0x61, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x10, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x6a, 0x6f, 0x69, 0x6e,
	0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x6c,
	0x6f, 0x6f, 0x70, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x73,
	0x74, 0x6c, 0x6f, 0x6f, 0x70, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x71, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x71, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x64, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x69, 0x64, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x59, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52,
	0x12, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30,
	0x2d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x47, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x61,
	0x0a, 0x18, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6f, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xfa,
	0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x16, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6f, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x61, 0x0a, 0x14, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0xfa, 0xc7,
	0x31, 0x0e, 0x30, 0x2d, 0x35, 0x34, 0x39, 0x37, 0x35, 0x35, 0x38, 0x31, 0x33, 0x38, 0x38, 0x38,
	0x52, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54,
	0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x58,
	0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x4c,
	0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x4f, 0x52, 0x43, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x22, 0x92, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55,
	0x47, 0x35, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x34, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f,
	0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x33, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45,
	0x42, 0x55, 0x47, 0x32, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x31, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x09, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x50, 0x41, 0x4e, 0x49, 0x43, 0x10, 0x0b, 0x22, 0x99, 0x01, 0x0a, 0x11,
	0x4c, 0x6f, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x56,
	0x45, 0x52, 0x42, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x45,
	0x52, 0x53, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x45,
	0x52, 0x42, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x44, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x04, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x28, 0x0a, 0x24, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x22, 0x5b, 0x0a,
	0x0b, 0x42, 0x79, 0x74, 0x65, 0x61, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x18,
	0x42, 0x59, 0x54, 0x45, 0x41, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x59,
	0x54, 0x45, 0x41, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x48, 0x45, 0x58, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x59, 0x54, 0x45, 0x41, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x5f, 0x45, 0x53, 0x43, 0x41, 0x50, 0x45, 0x44, 0x10, 0x02, 0x22, 0x52, 0x0a, 0x09, 0x58, 0x6d,
	0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x58, 0x4d, 0x4c, 0x5f, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x58, 0x4d, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52,
	0x59, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x36, 0x34, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x58, 0x4d,
	0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x58, 0x10, 0x02, 0x22, 0x58,
	0x0a, 0x09, 0x58, 0x6d, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x58,
	0x4d, 0x4c, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x58, 0x4d, 0x4c, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x58, 0x4d, 0x4c, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x63,
	0x6b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x42,
	0x41, 0x43, 0x4b, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x42, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x51,
	0x55, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x43,
	0x4b, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x5f,
	0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x42, 0x81, 0x01, 0x0a, 0x29, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescData = file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDesc
)

func file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDescData
}

var file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_goTypes = []interface{}{
	(PostgresqlHostConfig11_1C_ConstraintExclusion)(0),  // 0: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.ConstraintExclusion
	(PostgresqlHostConfig11_1C_ForceParallelMode)(0),    // 1: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.ForceParallelMode
	(PostgresqlHostConfig11_1C_LogLevel)(0),             // 2: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.LogLevel
	(PostgresqlHostConfig11_1C_LogErrorVerbosity)(0),    // 3: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.LogErrorVerbosity
	(PostgresqlHostConfig11_1C_LogStatement)(0),         // 4: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.LogStatement
	(PostgresqlHostConfig11_1C_TransactionIsolation)(0), // 5: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.TransactionIsolation
	(PostgresqlHostConfig11_1C_ByteaOutput)(0),          // 6: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.ByteaOutput
	(PostgresqlHostConfig11_1C_XmlBinary)(0),            // 7: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.XmlBinary
	(PostgresqlHostConfig11_1C_XmlOption)(0),            // 8: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.XmlOption
	(PostgresqlHostConfig11_1C_BackslashQuote)(0),       // 9: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.BackslashQuote
	(*PostgresqlHostConfig11_1C)(nil),                   // 10: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C
	(*wrapperspb.Int64Value)(nil),                       // 11: google.protobuf.Int64Value
	(*wrapperspb.DoubleValue)(nil),                      // 12: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),                        // 13: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_depIdxs = []int32{
	11, // 0: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.recovery_min_apply_delay:type_name -> google.protobuf.Int64Value
	11, // 1: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.shared_buffers:type_name -> google.protobuf.Int64Value
	11, // 2: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.temp_buffers:type_name -> google.protobuf.Int64Value
	11, // 3: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.work_mem:type_name -> google.protobuf.Int64Value
	11, // 4: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.temp_file_limit:type_name -> google.protobuf.Int64Value
	11, // 5: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.backend_flush_after:type_name -> google.protobuf.Int64Value
	11, // 6: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.old_snapshot_threshold:type_name -> google.protobuf.Int64Value
	11, // 7: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.max_standby_streaming_delay:type_name -> google.protobuf.Int64Value
	0,  // 8: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.constraint_exclusion:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.ConstraintExclusion
	12, // 9: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.cursor_tuple_fraction:type_name -> google.protobuf.DoubleValue
	11, // 10: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.from_collapse_limit:type_name -> google.protobuf.Int64Value
	11, // 11: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.join_collapse_limit:type_name -> google.protobuf.Int64Value
	1,  // 12: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.force_parallel_mode:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.ForceParallelMode
	2,  // 13: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.client_min_messages:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.LogLevel
	2,  // 14: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.log_min_messages:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.LogLevel
	2,  // 15: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.log_min_error_statement:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.LogLevel
	11, // 16: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.log_min_duration_statement:type_name -> google.protobuf.Int64Value
	13, // 17: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.log_checkpoints:type_name -> google.protobuf.BoolValue
	13, // 18: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.log_connections:type_name -> google.protobuf.BoolValue
	13, // 19: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.log_disconnections:type_name -> google.protobuf.BoolValue
	13, // 20: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.log_duration:type_name -> google.protobuf.BoolValue
	3,  // 21: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.log_error_verbosity:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.LogErrorVerbosity
	13, // 22: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.log_lock_waits:type_name -> google.protobuf.BoolValue
	4,  // 23: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.log_statement:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.LogStatement
	11, // 24: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.log_temp_files:type_name -> google.protobuf.Int64Value
	13, // 25: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.row_security:type_name -> google.protobuf.BoolValue
	5,  // 26: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.default_transaction_isolation:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.TransactionIsolation
	11, // 27: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.statement_timeout:type_name -> google.protobuf.Int64Value
	11, // 28: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.lock_timeout:type_name -> google.protobuf.Int64Value
	11, // 29: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.idle_in_transaction_session_timeout:type_name -> google.protobuf.Int64Value
	6,  // 30: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.bytea_output:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.ByteaOutput
	7,  // 31: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.xmlbinary:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.XmlBinary
	8,  // 32: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.xmloption:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.XmlOption
	11, // 33: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.gin_pending_list_limit:type_name -> google.protobuf.Int64Value
	11, // 34: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.deadlock_timeout:type_name -> google.protobuf.Int64Value
	11, // 35: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.max_locks_per_transaction:type_name -> google.protobuf.Int64Value
	11, // 36: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.max_pred_locks_per_transaction:type_name -> google.protobuf.Int64Value
	13, // 37: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.array_nulls:type_name -> google.protobuf.BoolValue
	9,  // 38: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.backslash_quote:type_name -> yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.BackslashQuote
	13, // 39: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.default_with_oids:type_name -> google.protobuf.BoolValue
	13, // 40: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.escape_string_warning:type_name -> google.protobuf.BoolValue
	13, // 41: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.lo_compat_privileges:type_name -> google.protobuf.BoolValue
	13, // 42: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.operator_precedence_warning:type_name -> google.protobuf.BoolValue
	13, // 43: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.quote_all_identifiers:type_name -> google.protobuf.BoolValue
	13, // 44: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.standard_conforming_strings:type_name -> google.protobuf.BoolValue
	13, // 45: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.synchronize_seqscans:type_name -> google.protobuf.BoolValue
	13, // 46: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.transform_null_equals:type_name -> google.protobuf.BoolValue
	13, // 47: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.exit_on_error:type_name -> google.protobuf.BoolValue
	12, // 48: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.seq_page_cost:type_name -> google.protobuf.DoubleValue
	12, // 49: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.random_page_cost:type_name -> google.protobuf.DoubleValue
	13, // 50: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.enable_bitmapscan:type_name -> google.protobuf.BoolValue
	13, // 51: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.enable_hashagg:type_name -> google.protobuf.BoolValue
	13, // 52: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.enable_hashjoin:type_name -> google.protobuf.BoolValue
	13, // 53: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.enable_indexscan:type_name -> google.protobuf.BoolValue
	13, // 54: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.enable_indexonlyscan:type_name -> google.protobuf.BoolValue
	13, // 55: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.enable_material:type_name -> google.protobuf.BoolValue
	13, // 56: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.enable_mergejoin:type_name -> google.protobuf.BoolValue
	13, // 57: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.enable_nestloop:type_name -> google.protobuf.BoolValue
	13, // 58: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.enable_seqscan:type_name -> google.protobuf.BoolValue
	13, // 59: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.enable_sort:type_name -> google.protobuf.BoolValue
	13, // 60: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.enable_tidscan:type_name -> google.protobuf.BoolValue
	11, // 61: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.max_parallel_workers:type_name -> google.protobuf.Int64Value
	11, // 62: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.max_parallel_workers_per_gather:type_name -> google.protobuf.Int64Value
	11, // 63: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.effective_io_concurrency:type_name -> google.protobuf.Int64Value
	11, // 64: yandex.cloud.mdb.postgresql.v1.config.PostgresqlHostConfig11_1C.effective_cache_size:type_name -> google.protobuf.Int64Value
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_init() }
func file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_init() {
	if File_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresqlHostConfig11_1C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto = out.File
	file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_rawDesc = nil
	file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_goTypes = nil
	file_yandex_cloud_mdb_postgresql_v1_config_host11_1c_proto_depIdxs = nil
}
