// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/mdb/postgresql/v1/user.proto

package postgresql

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserPasswordEncryption int32

const (
	UserPasswordEncryption_USER_PASSWORD_ENCRYPTION_UNSPECIFIED   UserPasswordEncryption = 0
	UserPasswordEncryption_USER_PASSWORD_ENCRYPTION_MD5           UserPasswordEncryption = 1
	UserPasswordEncryption_USER_PASSWORD_ENCRYPTION_SCRAM_SHA_256 UserPasswordEncryption = 2
)

// Enum value maps for UserPasswordEncryption.
var (
	UserPasswordEncryption_name = map[int32]string{
		0: "USER_PASSWORD_ENCRYPTION_UNSPECIFIED",
		1: "USER_PASSWORD_ENCRYPTION_MD5",
		2: "USER_PASSWORD_ENCRYPTION_SCRAM_SHA_256",
	}
	UserPasswordEncryption_value = map[string]int32{
		"USER_PASSWORD_ENCRYPTION_UNSPECIFIED":   0,
		"USER_PASSWORD_ENCRYPTION_MD5":           1,
		"USER_PASSWORD_ENCRYPTION_SCRAM_SHA_256": 2,
	}
)

func (x UserPasswordEncryption) Enum() *UserPasswordEncryption {
	p := new(UserPasswordEncryption)
	*p = x
	return p
}

func (x UserPasswordEncryption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserPasswordEncryption) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes[0].Descriptor()
}

func (UserPasswordEncryption) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes[0]
}

func (x UserPasswordEncryption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserPasswordEncryption.Descriptor instead.
func (UserPasswordEncryption) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescGZIP(), []int{0}
}

type PGAuditSettings_PGAuditSettingsLog int32

const (
	PGAuditSettings_PG_AUDIT_SETTINGS_LOG_UNSPECIFIED PGAuditSettings_PGAuditSettingsLog = 0
	PGAuditSettings_PG_AUDIT_SETTINGS_LOG_READ        PGAuditSettings_PGAuditSettingsLog = 1
	PGAuditSettings_PG_AUDIT_SETTINGS_LOG_WRITE       PGAuditSettings_PGAuditSettingsLog = 2
	PGAuditSettings_PG_AUDIT_SETTINGS_LOG_FUNCTION    PGAuditSettings_PGAuditSettingsLog = 3
	PGAuditSettings_PG_AUDIT_SETTINGS_LOG_ROLE        PGAuditSettings_PGAuditSettingsLog = 4
	PGAuditSettings_PG_AUDIT_SETTINGS_LOG_DDL         PGAuditSettings_PGAuditSettingsLog = 5
	PGAuditSettings_PG_AUDIT_SETTINGS_LOG_MISC        PGAuditSettings_PGAuditSettingsLog = 6
	PGAuditSettings_PG_AUDIT_SETTINGS_LOG_MISC_SET    PGAuditSettings_PGAuditSettingsLog = 7
)

// Enum value maps for PGAuditSettings_PGAuditSettingsLog.
var (
	PGAuditSettings_PGAuditSettingsLog_name = map[int32]string{
		0: "PG_AUDIT_SETTINGS_LOG_UNSPECIFIED",
		1: "PG_AUDIT_SETTINGS_LOG_READ",
		2: "PG_AUDIT_SETTINGS_LOG_WRITE",
		3: "PG_AUDIT_SETTINGS_LOG_FUNCTION",
		4: "PG_AUDIT_SETTINGS_LOG_ROLE",
		5: "PG_AUDIT_SETTINGS_LOG_DDL",
		6: "PG_AUDIT_SETTINGS_LOG_MISC",
		7: "PG_AUDIT_SETTINGS_LOG_MISC_SET",
	}
	PGAuditSettings_PGAuditSettingsLog_value = map[string]int32{
		"PG_AUDIT_SETTINGS_LOG_UNSPECIFIED": 0,
		"PG_AUDIT_SETTINGS_LOG_READ":        1,
		"PG_AUDIT_SETTINGS_LOG_WRITE":       2,
		"PG_AUDIT_SETTINGS_LOG_FUNCTION":    3,
		"PG_AUDIT_SETTINGS_LOG_ROLE":        4,
		"PG_AUDIT_SETTINGS_LOG_DDL":         5,
		"PG_AUDIT_SETTINGS_LOG_MISC":        6,
		"PG_AUDIT_SETTINGS_LOG_MISC_SET":    7,
	}
)

func (x PGAuditSettings_PGAuditSettingsLog) Enum() *PGAuditSettings_PGAuditSettingsLog {
	p := new(PGAuditSettings_PGAuditSettingsLog)
	*p = x
	return p
}

func (x PGAuditSettings_PGAuditSettingsLog) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PGAuditSettings_PGAuditSettingsLog) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes[1].Descriptor()
}

func (PGAuditSettings_PGAuditSettingsLog) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes[1]
}

func (x PGAuditSettings_PGAuditSettingsLog) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PGAuditSettings_PGAuditSettingsLog.Descriptor instead.
func (PGAuditSettings_PGAuditSettingsLog) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescGZIP(), []int{3, 0}
}

type UserSettings_SynchronousCommit int32

const (
	UserSettings_SYNCHRONOUS_COMMIT_UNSPECIFIED UserSettings_SynchronousCommit = 0
	// Success is reported to the client if the data is in WAL (Write-Ahead Log), and WAL is written to the storage of both the master and its synchronous standby server. Default value.
	UserSettings_SYNCHRONOUS_COMMIT_ON UserSettings_SynchronousCommit = 1
	// Success is reported to the client even if the data is not in WAL.
	// There is no synchronous write operation, data may be loss in case of storage subsystem failure.
	UserSettings_SYNCHRONOUS_COMMIT_OFF UserSettings_SynchronousCommit = 2
	// Success is reported to the client if the data is in WAL, and WAL is written to the storage of the master server.
	// The transaction may be lost due to storage subsystem failure on the master server.
	UserSettings_SYNCHRONOUS_COMMIT_LOCAL UserSettings_SynchronousCommit = 3
	// Success is reported to the client if the data is in WAL, WAL is written to the storage of the master server, and the server's synchronous standby indicates that it has received WAL and written it out to its operating system.
	// The transaction may be lost due to simultaneous storage subsystem failure on the master and operating system's failure on the synchronous standby.
	UserSettings_SYNCHRONOUS_COMMIT_REMOTE_WRITE UserSettings_SynchronousCommit = 4
	// Success is reported to the client if the data is in WAL (Write-Ahead Log), WAL is written to the storage of the master server, and its synchronous standby indicates that it has received WAL and applied it.
	// The transaction may be lost due to irrecoverably failure of both the master and its synchronous standby.
	UserSettings_SYNCHRONOUS_COMMIT_REMOTE_APPLY UserSettings_SynchronousCommit = 5
)

// Enum value maps for UserSettings_SynchronousCommit.
var (
	UserSettings_SynchronousCommit_name = map[int32]string{
		0: "SYNCHRONOUS_COMMIT_UNSPECIFIED",
		1: "SYNCHRONOUS_COMMIT_ON",
		2: "SYNCHRONOUS_COMMIT_OFF",
		3: "SYNCHRONOUS_COMMIT_LOCAL",
		4: "SYNCHRONOUS_COMMIT_REMOTE_WRITE",
		5: "SYNCHRONOUS_COMMIT_REMOTE_APPLY",
	}
	UserSettings_SynchronousCommit_value = map[string]int32{
		"SYNCHRONOUS_COMMIT_UNSPECIFIED":  0,
		"SYNCHRONOUS_COMMIT_ON":           1,
		"SYNCHRONOUS_COMMIT_OFF":          2,
		"SYNCHRONOUS_COMMIT_LOCAL":        3,
		"SYNCHRONOUS_COMMIT_REMOTE_WRITE": 4,
		"SYNCHRONOUS_COMMIT_REMOTE_APPLY": 5,
	}
)

func (x UserSettings_SynchronousCommit) Enum() *UserSettings_SynchronousCommit {
	p := new(UserSettings_SynchronousCommit)
	*p = x
	return p
}

func (x UserSettings_SynchronousCommit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSettings_SynchronousCommit) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes[2].Descriptor()
}

func (UserSettings_SynchronousCommit) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes[2]
}

func (x UserSettings_SynchronousCommit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSettings_SynchronousCommit.Descriptor instead.
func (UserSettings_SynchronousCommit) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescGZIP(), []int{4, 0}
}

type UserSettings_LogStatement int32

const (
	UserSettings_LOG_STATEMENT_UNSPECIFIED UserSettings_LogStatement = 0
	// Logs none of SQL statements. Default value.
	UserSettings_LOG_STATEMENT_NONE UserSettings_LogStatement = 1
	// Logs all data definition statements (such as `CREATE`, `ALTER`, `DROP` and others).
	UserSettings_LOG_STATEMENT_DDL UserSettings_LogStatement = 2
	// Logs all statements that fall in the `LOG_STATEMENT_DDL` category plus data-modifying statements (such as `INSERT`, `UPDATE` and others).
	UserSettings_LOG_STATEMENT_MOD UserSettings_LogStatement = 3
	// Logs all SQL statements.
	UserSettings_LOG_STATEMENT_ALL UserSettings_LogStatement = 4
)

// Enum value maps for UserSettings_LogStatement.
var (
	UserSettings_LogStatement_name = map[int32]string{
		0: "LOG_STATEMENT_UNSPECIFIED",
		1: "LOG_STATEMENT_NONE",
		2: "LOG_STATEMENT_DDL",
		3: "LOG_STATEMENT_MOD",
		4: "LOG_STATEMENT_ALL",
	}
	UserSettings_LogStatement_value = map[string]int32{
		"LOG_STATEMENT_UNSPECIFIED": 0,
		"LOG_STATEMENT_NONE":        1,
		"LOG_STATEMENT_DDL":         2,
		"LOG_STATEMENT_MOD":         3,
		"LOG_STATEMENT_ALL":         4,
	}
)

func (x UserSettings_LogStatement) Enum() *UserSettings_LogStatement {
	p := new(UserSettings_LogStatement)
	*p = x
	return p
}

func (x UserSettings_LogStatement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSettings_LogStatement) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes[3].Descriptor()
}

func (UserSettings_LogStatement) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes[3]
}

func (x UserSettings_LogStatement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSettings_LogStatement.Descriptor instead.
func (UserSettings_LogStatement) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescGZIP(), []int{4, 1}
}

type UserSettings_TransactionIsolation int32

const (
	UserSettings_TRANSACTION_ISOLATION_UNSPECIFIED UserSettings_TransactionIsolation = 0
	// This level behaves like `TRANSACTION_ISOLATION_READ_COMMITTED` in PostgreSQL.
	UserSettings_TRANSACTION_ISOLATION_READ_UNCOMMITTED UserSettings_TransactionIsolation = 1
	// On this level query sees only data committed before the query began. Default value.
	UserSettings_TRANSACTION_ISOLATION_READ_COMMITTED UserSettings_TransactionIsolation = 2
	// On this level all subsequent queries in a transaction will see the same rows, that were read by the first `SELECT` or `INSERT` query in this transaction, unchanged (these rows are locked during the first query).
	UserSettings_TRANSACTION_ISOLATION_REPEATABLE_READ UserSettings_TransactionIsolation = 3
	// This level provides the strictest transaction isolation.
	// All queries in the current transaction see only the rows that were fixed prior to execution of the first `SELECT` or `INSERT` query in this transaction.
	// If read and write operations in a concurrent set of serializable transactions overlap and this may cause an inconsistency that is not possible during the serial transaction execution, then one of the transaction will be rolled back, triggering a serialization failure.
	UserSettings_TRANSACTION_ISOLATION_SERIALIZABLE UserSettings_TransactionIsolation = 4
)

// Enum value maps for UserSettings_TransactionIsolation.
var (
	UserSettings_TransactionIsolation_name = map[int32]string{
		0: "TRANSACTION_ISOLATION_UNSPECIFIED",
		1: "TRANSACTION_ISOLATION_READ_UNCOMMITTED",
		2: "TRANSACTION_ISOLATION_READ_COMMITTED",
		3: "TRANSACTION_ISOLATION_REPEATABLE_READ",
		4: "TRANSACTION_ISOLATION_SERIALIZABLE",
	}
	UserSettings_TransactionIsolation_value = map[string]int32{
		"TRANSACTION_ISOLATION_UNSPECIFIED":      0,
		"TRANSACTION_ISOLATION_READ_UNCOMMITTED": 1,
		"TRANSACTION_ISOLATION_READ_COMMITTED":   2,
		"TRANSACTION_ISOLATION_REPEATABLE_READ":  3,
		"TRANSACTION_ISOLATION_SERIALIZABLE":     4,
	}
)

func (x UserSettings_TransactionIsolation) Enum() *UserSettings_TransactionIsolation {
	p := new(UserSettings_TransactionIsolation)
	*p = x
	return p
}

func (x UserSettings_TransactionIsolation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSettings_TransactionIsolation) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes[4].Descriptor()
}

func (UserSettings_TransactionIsolation) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes[4]
}

func (x UserSettings_TransactionIsolation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSettings_TransactionIsolation.Descriptor instead.
func (UserSettings_TransactionIsolation) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescGZIP(), []int{4, 2}
}

type UserSettings_PoolingMode int32

const (
	UserSettings_POOLING_MODE_UNSPECIFIED UserSettings_PoolingMode = 0
	// Server connection will be assigned to it for the whole duration the client stays connected. Default value.
	UserSettings_SESSION UserSettings_PoolingMode = 1
	// Server connection is assigned to a client only during a transaction.
	UserSettings_TRANSACTION UserSettings_PoolingMode = 2
	// Server connection will be put back into the pool immediately after a query completes.
	UserSettings_STATEMENT UserSettings_PoolingMode = 3
)

// Enum value maps for UserSettings_PoolingMode.
var (
	UserSettings_PoolingMode_name = map[int32]string{
		0: "POOLING_MODE_UNSPECIFIED",
		1: "SESSION",
		2: "TRANSACTION",
		3: "STATEMENT",
	}
	UserSettings_PoolingMode_value = map[string]int32{
		"POOLING_MODE_UNSPECIFIED": 0,
		"SESSION":                  1,
		"TRANSACTION":              2,
		"STATEMENT":                3,
	}
)

func (x UserSettings_PoolingMode) Enum() *UserSettings_PoolingMode {
	p := new(UserSettings_PoolingMode)
	*p = x
	return p
}

func (x UserSettings_PoolingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSettings_PoolingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes[5].Descriptor()
}

func (UserSettings_PoolingMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes[5]
}

func (x UserSettings_PoolingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSettings_PoolingMode.Descriptor instead.
func (UserSettings_PoolingMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescGZIP(), []int{4, 3}
}

// A PostgreSQL User resource. For more information, see
// the [Developer's Guide](/docs/managed-postgresql/concepts).
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the PostgreSQL user.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the PostgreSQL cluster the user belongs to.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Set of permissions granted to the user to access specific databases.
	Permissions []*Permission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// Maximum number of database connections available to the user.
	//
	// When used in session pooling, this setting limits the number of connections to every single host in PostgreSQL cluster. In this case, the setting's value must be greater than the total number of connections that backend services can open to access the PostgreSQL cluster. The setting's value should not exceed the value of the [Cluster.config.postgresql_config_12.effective_config.max_connections] setting.
	//
	// When used in transaction pooling, this setting limits the number of user's active transactions; therefore, in this mode user can open thousands of connections, but only `N` concurrent connections will be opened, where `N` is the value of the setting.
	//
	// Minimum value: `10` (default: `50`), when used in session pooling.
	ConnLimit int64         `protobuf:"varint,4,opt,name=conn_limit,json=connLimit,proto3" json:"conn_limit,omitempty"`
	Settings  *UserSettings `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
	// This flag defines whether the user can login to a PostgreSQL database.
	//
	// Default value: `true` (login is allowed).
	Login *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=login,proto3" json:"login,omitempty"`
	// A set of roles and privileges that are granted to the user.
	//
	// For more information, see [the documentation](/docs/managed-postgresql/operations/grant).
	Grants []string `protobuf:"bytes,7,rep,name=grants,proto3" json:"grants,omitempty"`
	// Determines whether the user deletion protection is enabled.
	//
	// The default value is `unspecified`. In this case, the user configuration inherits the cluster's deletion protection settings.
	DeletionProtection *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Password-based authentication method for user.
	// Possible values are “ USER_PASSWORD_ENCRYPTION_MD5 “ or “ USER_PASSWORD_ENCRYPTION_SCRAM_SHA_256 “.
	// The default is “ password_encryption “ setting for cluster.
	UserPasswordEncryption UserPasswordEncryption `protobuf:"varint,9,opt,name=user_password_encryption,json=userPasswordEncryption,proto3,enum=yandex.cloud.mdb.postgresql.v1.UserPasswordEncryption" json:"user_password_encryption,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *User) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *User) GetConnLimit() int64 {
	if x != nil {
		return x.ConnLimit
	}
	return 0
}

func (x *User) GetSettings() *UserSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *User) GetLogin() *wrapperspb.BoolValue {
	if x != nil {
		return x.Login
	}
	return nil
}

func (x *User) GetGrants() []string {
	if x != nil {
		return x.Grants
	}
	return nil
}

func (x *User) GetDeletionProtection() *wrapperspb.BoolValue {
	if x != nil {
		return x.DeletionProtection
	}
	return nil
}

func (x *User) GetUserPasswordEncryption() UserPasswordEncryption {
	if x != nil {
		return x.UserPasswordEncryption
	}
	return UserPasswordEncryption_USER_PASSWORD_ENCRYPTION_UNSPECIFIED
}

type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the database that the permission grants access to.
	DatabaseName string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescGZIP(), []int{1}
}

func (x *Permission) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

type UserSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the PostgreSQL user.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Password of the PostgreSQL user.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Set of permissions to grant to the user to access specific databases.
	Permissions []*Permission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// Maximum number of database connections that should be available to the user.
	//
	// When used in session pooling, this setting limits the number of connections to every single host in PostgreSQL cluster. In this case, the setting's value must be greater than the total number of connections that backend services can open to access the PostgreSQL cluster. The setting's value should not exceed the value of the [Cluster.config.postgresql_config_12.effective_config.max_connections] setting.
	//
	// When used in transaction pooling, this setting limits the number of user's active transactions; therefore, in this mode user can open thousands of connections, but only `N` concurrent connections will be opened, where `N` is the value of the setting.
	//
	// Minimum value: `10` (default: `50`), when used in session pooling.
	ConnLimit *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=conn_limit,json=connLimit,proto3" json:"conn_limit,omitempty"`
	// PostgreSQL settings for the user.
	Settings *UserSettings `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
	// This flag defines whether the user can login to a PostgreSQL database.
	//
	// Default value: `true` (login is allowed).
	Login *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=login,proto3" json:"login,omitempty"`
	// A set of roles and privileges that are granted to the user.
	//
	// For more information, see [the documentation](/docs/managed-postgresql/operations/grant).
	Grants []string `protobuf:"bytes,7,rep,name=grants,proto3" json:"grants,omitempty"`
	// Deletion Protection inhibits deletion of the user
	//
	// Default value: `unspecified` (inherits cluster's deletion_protection)
	DeletionProtection *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Password-based authentication method for user.
	// Possible values are “ USER_PASSWORD_ENCRYPTION_MD5 “ or “ USER_PASSWORD_ENCRYPTION_SCRAM_SHA_256 “.
	// The default is “ password_encryption “ setting for cluster.
	UserPasswordEncryption UserPasswordEncryption `protobuf:"varint,9,opt,name=user_password_encryption,json=userPasswordEncryption,proto3,enum=yandex.cloud.mdb.postgresql.v1.UserPasswordEncryption" json:"user_password_encryption,omitempty"`
}

func (x *UserSpec) Reset() {
	*x = UserSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSpec) ProtoMessage() {}

func (x *UserSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSpec.ProtoReflect.Descriptor instead.
func (*UserSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescGZIP(), []int{2}
}

func (x *UserSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserSpec) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserSpec) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *UserSpec) GetConnLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.ConnLimit
	}
	return nil
}

func (x *UserSpec) GetSettings() *UserSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *UserSpec) GetLogin() *wrapperspb.BoolValue {
	if x != nil {
		return x.Login
	}
	return nil
}

func (x *UserSpec) GetGrants() []string {
	if x != nil {
		return x.Grants
	}
	return nil
}

func (x *UserSpec) GetDeletionProtection() *wrapperspb.BoolValue {
	if x != nil {
		return x.DeletionProtection
	}
	return nil
}

func (x *UserSpec) GetUserPasswordEncryption() UserPasswordEncryption {
	if x != nil {
		return x.UserPasswordEncryption
	}
	return UserPasswordEncryption_USER_PASSWORD_ENCRYPTION_UNSPECIFIED
}

type PGAuditSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines which user queries will be written to the audit log. Corresponds to the [Pg audit log](https://yandex.cloud/en/docs/managed-postgresql/concepts/settings-list#setting-pg-audit-log) user setting.
	//
	// The possible values are the following:
	//
	// * PG_AUDIT_SETTINGS_LOG_READ: `SELECT` and `COPY` queries are logged if the data source is a relation or query.
	// * PG_AUDIT_SETTINGS_LOG_WRITE: `INSERT`, `UPDATE`, `DELETE`, `TRUNCATE`, and `COPY` queries are logged if the data target is a relation.
	// * PG_AUDIT_SETTINGS_LOG_FUNCTION: Function invocations and `DO` sections are logged.
	// * PG_AUDIT_SETTINGS_LOG_ROLE: Statements related to role and privilege management, such as `GRANT`, `REVOKE`, or `CREATE/ALTER/DROP ROLE`, are logged.
	// * PG_AUDIT_SETTINGS_LOG_DDL: Any `DDL` statements that do not belong to the `ROLE` class are logged.
	// * PG_AUDIT_SETTINGS_LOG_MISC: Miscellaneous commands, such as `DISCARD`, `FETCH`, `CHECKPOINT`, `VACUUM`, and `SET`, are logged.
	// * PG_AUDIT_SETTINGS_LOG_MISC_SET: Miscellaneous `SET` commands, e.g., `SET ROLE`, are logged.
	//
	// The default value is PG_AUDIT_SETTINGS_LOG_UNSPECIFIED. In this case, the parameter is not configured.
	Log []PGAuditSettings_PGAuditSettingsLog `protobuf:"varint,1,rep,packed,name=log,proto3,enum=yandex.cloud.mdb.postgresql.v1.PGAuditSettings_PGAuditSettingsLog" json:"log,omitempty"`
}

func (x *PGAuditSettings) Reset() {
	*x = PGAuditSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PGAuditSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PGAuditSettings) ProtoMessage() {}

func (x *PGAuditSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PGAuditSettings.ProtoReflect.Descriptor instead.
func (*PGAuditSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescGZIP(), []int{3}
}

func (x *PGAuditSettings) GetLog() []PGAuditSettings_PGAuditSettingsLog {
	if x != nil {
		return x.Log
	}
	return nil
}

// PostgreSQL user settings.
type UserSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SQL sets an isolation level for each transaction.
	// This setting defines the default isolation level to be set for all new SQL transactions.
	//
	// For more information, see the [PostgreSQL documentation](https://www.postgresql.org/docs/current/transaction-iso.html).
	DefaultTransactionIsolation UserSettings_TransactionIsolation `protobuf:"varint,1,opt,name=default_transaction_isolation,json=defaultTransactionIsolation,proto3,enum=yandex.cloud.mdb.postgresql.v1.UserSettings_TransactionIsolation" json:"default_transaction_isolation,omitempty"`
	// The maximum time (in milliseconds) for any statement to wait for acquiring a lock on an table, index, row or other database object.
	// If the wait time is longer than the specified amount, then this statement is aborted.
	//
	// Default value: `0` (no control is enforced, a statement waiting time is unlimited).
	LockTimeout *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=lock_timeout,json=lockTimeout,proto3" json:"lock_timeout,omitempty"`
	// This setting controls logging of the duration of statements.
	//
	// The duration of each completed statement will be logged if the statement ran for at least the specified amount of time (in milliseconds).
	// E.g., if this setting's value is set to `500`, a statement that took 300 milliseconds to complete will not be logged; on the other hand, the one that took 2000 milliseconds to complete, will be logged.
	//
	// Value of `0` forces PostgreSQL to log the duration of all statements.
	//
	// Value of `-1` (default) disables logging of the duration of statements.
	//
	// For more information, see the [PostgreSQL documentation](https://www.postgresql.org/docs/current/runtime-config-logging.html).
	LogMinDurationStatement *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=log_min_duration_statement,json=logMinDurationStatement,proto3" json:"log_min_duration_statement,omitempty"`
	// This setting defines whether DBMS will commit transaction in a synchronous way.
	//
	// When synchronization is enabled, cluster waits for the synchronous operations to be completed prior to reporting `success` to the client.
	// These operations guarantee different levels of the data safety and visibility in the cluster.
	//
	// For more information, see the [PostgreSQL documentation](https://www.postgresql.org/docs/current/runtime-config-wal.html#GUC-SYNCHRONOUS-COMMIT).
	SynchronousCommit UserSettings_SynchronousCommit `protobuf:"varint,4,opt,name=synchronous_commit,json=synchronousCommit,proto3,enum=yandex.cloud.mdb.postgresql.v1.UserSettings_SynchronousCommit" json:"synchronous_commit,omitempty"`
	// The maximum storage space size (in kilobytes) that a single process can use to create temporary files.
	// If a transaction exceeds this limit during execution, it will be aborted.
	//
	// A huge query may not fit into a server's RAM, therefore PostgreSQL will use some storage to store and execute such a query. Too big queries can make excessive use of the storage system, effectively making other quieries to run slow. This setting prevents execution of a big queries that can influence other queries by limiting size of temporary files.
	TempFileLimit *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=temp_file_limit,json=tempFileLimit,proto3" json:"temp_file_limit,omitempty"`
	// This setting specifies which SQL statements should be logged (on the user level).
	//
	// For more information, see the [PostgreSQL documentation](https://www.postgresql.org/docs/current/runtime-config-logging.html).
	LogStatement UserSettings_LogStatement `protobuf:"varint,6,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.postgresql.v1.UserSettings_LogStatement" json:"log_statement,omitempty"`
	// Mode that the connection pooler is working in with specified user.
	//
	// For more information, see the [Odyssey documentation](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string).
	PoolMode UserSettings_PoolingMode `protobuf:"varint,7,opt,name=pool_mode,json=poolMode,proto3,enum=yandex.cloud.mdb.postgresql.v1.UserSettings_PoolingMode" json:"pool_mode,omitempty"`
	// User can use prepared statements with transaction pooling.
	//
	// For more information, see the [PostgreSQL documentation](https://www.postgresql.org/docs/current/sql-prepare.html).
	PreparedStatementsPooling *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=prepared_statements_pooling,json=preparedStatementsPooling,proto3" json:"prepared_statements_pooling,omitempty"`
	// The connection pooler setting. It determines the maximum allowed replication lag (in seconds).
	// Pooler will reject connections to the replica with a lag above this threshold.
	// It can be useful to prevent application from reading stale data.
	//
	// Default value: 0
	//
	// Value of `0` disables this mechanism
	CatchupTimeout *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=catchup_timeout,json=catchupTimeout,proto3" json:"catchup_timeout,omitempty"`
	// The maximum time (in milliseconds) to wait for WAL replication (can be set only for PostgreSQL 12+)
	// Terminate replication connections that are inactive for longer than this amount of time.
	//
	// Default value: `60000` (60 seconds).
	//
	// Value of `0` disables the timeout mechanism.
	//
	// For more information, see the [PostgreSQL documentation](https://www.postgresql.org/docs/current/runtime-config-replication.html).
	WalSenderTimeout *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=wal_sender_timeout,json=walSenderTimeout,proto3" json:"wal_sender_timeout,omitempty"`
	// Sets the maximum allowed idle time, in milliseconds, between queries while in a transaction.
	//
	// The default value is `0`, which disables the timeout.
	//
	// For more information, see the [PostgreSQL documentation](https://www.postgresql.org/docs/current/runtime-config-client.html).
	IdleInTransactionSessionTimeout *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=idle_in_transaction_session_timeout,json=idleInTransactionSessionTimeout,proto3" json:"idle_in_transaction_session_timeout,omitempty"` // in milliseconds.
	// The maximum time (in milliseconds) to wait for statement.
	// The timeout is measured from the time a command arrives at the server until it is completed by the server.
	//
	// If `log_min_error_statement` is set to ERROR or lower, the statement that timed out will also be logged.
	//
	// # Value of `0` (default) disables the timeout
	//
	// For more information, see the [PostgreSQL documentation](https://www.postgresql.org/docs/current/runtime-config-client.html).
	StatementTimeout *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=statement_timeout,json=statementTimeout,proto3" json:"statement_timeout,omitempty"`
	// Settings of the [PostgreSQL Audit Extension](https://www.pgaudit.org/) (pgaudit).
	Pgaudit *PGAuditSettings `protobuf:"bytes,13,opt,name=pgaudit,proto3" json:"pgaudit,omitempty"`
}

func (x *UserSettings) Reset() {
	*x = UserSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettings) ProtoMessage() {}

func (x *UserSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettings.ProtoReflect.Descriptor instead.
func (*UserSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescGZIP(), []int{4}
}

func (x *UserSettings) GetDefaultTransactionIsolation() UserSettings_TransactionIsolation {
	if x != nil {
		return x.DefaultTransactionIsolation
	}
	return UserSettings_TRANSACTION_ISOLATION_UNSPECIFIED
}

func (x *UserSettings) GetLockTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.LockTimeout
	}
	return nil
}

func (x *UserSettings) GetLogMinDurationStatement() *wrapperspb.Int64Value {
	if x != nil {
		return x.LogMinDurationStatement
	}
	return nil
}

func (x *UserSettings) GetSynchronousCommit() UserSettings_SynchronousCommit {
	if x != nil {
		return x.SynchronousCommit
	}
	return UserSettings_SYNCHRONOUS_COMMIT_UNSPECIFIED
}

func (x *UserSettings) GetTempFileLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.TempFileLimit
	}
	return nil
}

func (x *UserSettings) GetLogStatement() UserSettings_LogStatement {
	if x != nil {
		return x.LogStatement
	}
	return UserSettings_LOG_STATEMENT_UNSPECIFIED
}

func (x *UserSettings) GetPoolMode() UserSettings_PoolingMode {
	if x != nil {
		return x.PoolMode
	}
	return UserSettings_POOLING_MODE_UNSPECIFIED
}

func (x *UserSettings) GetPreparedStatementsPooling() *wrapperspb.BoolValue {
	if x != nil {
		return x.PreparedStatementsPooling
	}
	return nil
}

func (x *UserSettings) GetCatchupTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.CatchupTimeout
	}
	return nil
}

func (x *UserSettings) GetWalSenderTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.WalSenderTimeout
	}
	return nil
}

func (x *UserSettings) GetIdleInTransactionSessionTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.IdleInTransactionSessionTimeout
	}
	return nil
}

func (x *UserSettings) GetStatementTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.StatementTimeout
	}
	return nil
}

func (x *UserSettings) GetPgaudit() *PGAuditSettings {
	if x != nil {
		return x.Pgaudit
	}
	return nil
}

var File_yandex_cloud_mdb_postgresql_v1_user_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDesc = []byte{
	0x0a, 0x29, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x04, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a,
	0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x31, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x19, 0xf2, 0xc7, 0x31, 0x0d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f,
	0x5d, 0x2a, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x06, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x70, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x31, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xeb, 0x04, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1e, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31, 0x0e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2a, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31,
	0x05, 0x38, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x08, 0xfa, 0xc7, 0x31, 0x04, 0x3e, 0x3d, 0x31, 0x30, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30,
	0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x31, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x19, 0xf2, 0xc7, 0x31, 0x0d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x5f, 0x5d, 0x2a, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x06, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x70, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x8d, 0x03, 0x0a, 0x0f, 0x50, 0x47, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x47, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x47, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0xa3, 0x02, 0x0a,
	0x12, 0x50, 0x47, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x4c, 0x6f, 0x67, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x47, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x47,
	0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x47,
	0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50,
	0x47, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12,
	0x1e, 0x0a, 0x1a, 0x50, 0x47, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x47, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x44, 0x4c, 0x10, 0x05, 0x12, 0x1e,
	0x0a, 0x1a, 0x50, 0x47, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x10, 0x06, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x47, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0x07, 0x22, 0xc3, 0x0e, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x58, 0x0a, 0x1a, 0x6c,
	0x6f, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x6c, 0x6f,
	0x67, 0x4d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5e, 0x0a, 0x0d, 0x6c, 0x6f, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4c,
	0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x09, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x5a, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x19, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x0f,
	0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x77, 0x61, 0x6c,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x7b, 0x0a,
	0x23, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0xfa, 0xc7, 0x31, 0x0c, 0x30, 0x2d, 0x32,
	0x31, 0x34, 0x37, 0x34, 0x38, 0x33, 0x36, 0x34, 0x37, 0x52, 0x1f, 0x69, 0x64, 0x6c, 0x65, 0x49,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x67, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x47, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x70, 0x67, 0x61, 0x75, 0x64, 0x69, 0x74, 0x22,
	0xd6, 0x01, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f,
	0x4e, 0x4f, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x4e,
	0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e,
	0x4f, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x59, 0x4e, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x05, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x44, 0x44, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x04, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53,
	0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x22, 0x58,
	0x0a, 0x0b, 0x50, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x4f, 0x4f, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x90, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x24, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45,
	0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x01, 0x12,
	0x2a, 0x0a, 0x26, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,
	0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x52, 0x41,
	0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x02, 0x42, 0x73, 0x0a, 0x22, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x71, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescData = file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDesc
)

func file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDescData
}

var file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_yandex_cloud_mdb_postgresql_v1_user_proto_goTypes = []interface{}{
	(UserPasswordEncryption)(0),             // 0: yandex.cloud.mdb.postgresql.v1.UserPasswordEncryption
	(PGAuditSettings_PGAuditSettingsLog)(0), // 1: yandex.cloud.mdb.postgresql.v1.PGAuditSettings.PGAuditSettingsLog
	(UserSettings_SynchronousCommit)(0),     // 2: yandex.cloud.mdb.postgresql.v1.UserSettings.SynchronousCommit
	(UserSettings_LogStatement)(0),          // 3: yandex.cloud.mdb.postgresql.v1.UserSettings.LogStatement
	(UserSettings_TransactionIsolation)(0),  // 4: yandex.cloud.mdb.postgresql.v1.UserSettings.TransactionIsolation
	(UserSettings_PoolingMode)(0),           // 5: yandex.cloud.mdb.postgresql.v1.UserSettings.PoolingMode
	(*User)(nil),                            // 6: yandex.cloud.mdb.postgresql.v1.User
	(*Permission)(nil),                      // 7: yandex.cloud.mdb.postgresql.v1.Permission
	(*UserSpec)(nil),                        // 8: yandex.cloud.mdb.postgresql.v1.UserSpec
	(*PGAuditSettings)(nil),                 // 9: yandex.cloud.mdb.postgresql.v1.PGAuditSettings
	(*UserSettings)(nil),                    // 10: yandex.cloud.mdb.postgresql.v1.UserSettings
	(*wrapperspb.BoolValue)(nil),            // 11: google.protobuf.BoolValue
	(*wrapperspb.Int64Value)(nil),           // 12: google.protobuf.Int64Value
}
var file_yandex_cloud_mdb_postgresql_v1_user_proto_depIdxs = []int32{
	7,  // 0: yandex.cloud.mdb.postgresql.v1.User.permissions:type_name -> yandex.cloud.mdb.postgresql.v1.Permission
	10, // 1: yandex.cloud.mdb.postgresql.v1.User.settings:type_name -> yandex.cloud.mdb.postgresql.v1.UserSettings
	11, // 2: yandex.cloud.mdb.postgresql.v1.User.login:type_name -> google.protobuf.BoolValue
	11, // 3: yandex.cloud.mdb.postgresql.v1.User.deletion_protection:type_name -> google.protobuf.BoolValue
	0,  // 4: yandex.cloud.mdb.postgresql.v1.User.user_password_encryption:type_name -> yandex.cloud.mdb.postgresql.v1.UserPasswordEncryption
	7,  // 5: yandex.cloud.mdb.postgresql.v1.UserSpec.permissions:type_name -> yandex.cloud.mdb.postgresql.v1.Permission
	12, // 6: yandex.cloud.mdb.postgresql.v1.UserSpec.conn_limit:type_name -> google.protobuf.Int64Value
	10, // 7: yandex.cloud.mdb.postgresql.v1.UserSpec.settings:type_name -> yandex.cloud.mdb.postgresql.v1.UserSettings
	11, // 8: yandex.cloud.mdb.postgresql.v1.UserSpec.login:type_name -> google.protobuf.BoolValue
	11, // 9: yandex.cloud.mdb.postgresql.v1.UserSpec.deletion_protection:type_name -> google.protobuf.BoolValue
	0,  // 10: yandex.cloud.mdb.postgresql.v1.UserSpec.user_password_encryption:type_name -> yandex.cloud.mdb.postgresql.v1.UserPasswordEncryption
	1,  // 11: yandex.cloud.mdb.postgresql.v1.PGAuditSettings.log:type_name -> yandex.cloud.mdb.postgresql.v1.PGAuditSettings.PGAuditSettingsLog
	4,  // 12: yandex.cloud.mdb.postgresql.v1.UserSettings.default_transaction_isolation:type_name -> yandex.cloud.mdb.postgresql.v1.UserSettings.TransactionIsolation
	12, // 13: yandex.cloud.mdb.postgresql.v1.UserSettings.lock_timeout:type_name -> google.protobuf.Int64Value
	12, // 14: yandex.cloud.mdb.postgresql.v1.UserSettings.log_min_duration_statement:type_name -> google.protobuf.Int64Value
	2,  // 15: yandex.cloud.mdb.postgresql.v1.UserSettings.synchronous_commit:type_name -> yandex.cloud.mdb.postgresql.v1.UserSettings.SynchronousCommit
	12, // 16: yandex.cloud.mdb.postgresql.v1.UserSettings.temp_file_limit:type_name -> google.protobuf.Int64Value
	3,  // 17: yandex.cloud.mdb.postgresql.v1.UserSettings.log_statement:type_name -> yandex.cloud.mdb.postgresql.v1.UserSettings.LogStatement
	5,  // 18: yandex.cloud.mdb.postgresql.v1.UserSettings.pool_mode:type_name -> yandex.cloud.mdb.postgresql.v1.UserSettings.PoolingMode
	11, // 19: yandex.cloud.mdb.postgresql.v1.UserSettings.prepared_statements_pooling:type_name -> google.protobuf.BoolValue
	12, // 20: yandex.cloud.mdb.postgresql.v1.UserSettings.catchup_timeout:type_name -> google.protobuf.Int64Value
	12, // 21: yandex.cloud.mdb.postgresql.v1.UserSettings.wal_sender_timeout:type_name -> google.protobuf.Int64Value
	12, // 22: yandex.cloud.mdb.postgresql.v1.UserSettings.idle_in_transaction_session_timeout:type_name -> google.protobuf.Int64Value
	12, // 23: yandex.cloud.mdb.postgresql.v1.UserSettings.statement_timeout:type_name -> google.protobuf.Int64Value
	9,  // 24: yandex.cloud.mdb.postgresql.v1.UserSettings.pgaudit:type_name -> yandex.cloud.mdb.postgresql.v1.PGAuditSettings
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_postgresql_v1_user_proto_init() }
func file_yandex_cloud_mdb_postgresql_v1_user_proto_init() {
	if File_yandex_cloud_mdb_postgresql_v1_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PGAuditSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_postgresql_v1_user_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_postgresql_v1_user_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_postgresql_v1_user_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_postgresql_v1_user_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_postgresql_v1_user_proto = out.File
	file_yandex_cloud_mdb_postgresql_v1_user_proto_rawDesc = nil
	file_yandex_cloud_mdb_postgresql_v1_user_proto_goTypes = nil
	file_yandex_cloud_mdb_postgresql_v1_user_proto_depIdxs = nil
}
