// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto

package clickhouse

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClickhouseConfig_LogLevel int32

const (
	ClickhouseConfig_LOG_LEVEL_UNSPECIFIED ClickhouseConfig_LogLevel = 0
	ClickhouseConfig_TRACE                 ClickhouseConfig_LogLevel = 1
	ClickhouseConfig_DEBUG                 ClickhouseConfig_LogLevel = 2
	ClickhouseConfig_INFORMATION           ClickhouseConfig_LogLevel = 3
	ClickhouseConfig_WARNING               ClickhouseConfig_LogLevel = 4
	ClickhouseConfig_ERROR                 ClickhouseConfig_LogLevel = 5
)

// Enum value maps for ClickhouseConfig_LogLevel.
var (
	ClickhouseConfig_LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_UNSPECIFIED",
		1: "TRACE",
		2: "DEBUG",
		3: "INFORMATION",
		4: "WARNING",
		5: "ERROR",
	}
	ClickhouseConfig_LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"TRACE":                 1,
		"DEBUG":                 2,
		"INFORMATION":           3,
		"WARNING":               4,
		"ERROR":                 5,
	}
)

func (x ClickhouseConfig_LogLevel) Enum() *ClickhouseConfig_LogLevel {
	p := new(ClickhouseConfig_LogLevel)
	*p = x
	return p
}

func (x ClickhouseConfig_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[0].Descriptor()
}

func (ClickhouseConfig_LogLevel) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[0]
}

func (x ClickhouseConfig_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_LogLevel.Descriptor instead.
func (ClickhouseConfig_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 0}
}

type ClickhouseConfig_Kafka_SecurityProtocol int32

const (
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_UNSPECIFIED    ClickhouseConfig_Kafka_SecurityProtocol = 0
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_PLAINTEXT      ClickhouseConfig_Kafka_SecurityProtocol = 1
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_SSL            ClickhouseConfig_Kafka_SecurityProtocol = 2
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_SASL_PLAINTEXT ClickhouseConfig_Kafka_SecurityProtocol = 3
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_SASL_SSL       ClickhouseConfig_Kafka_SecurityProtocol = 4
)

// Enum value maps for ClickhouseConfig_Kafka_SecurityProtocol.
var (
	ClickhouseConfig_Kafka_SecurityProtocol_name = map[int32]string{
		0: "SECURITY_PROTOCOL_UNSPECIFIED",
		1: "SECURITY_PROTOCOL_PLAINTEXT",
		2: "SECURITY_PROTOCOL_SSL",
		3: "SECURITY_PROTOCOL_SASL_PLAINTEXT",
		4: "SECURITY_PROTOCOL_SASL_SSL",
	}
	ClickhouseConfig_Kafka_SecurityProtocol_value = map[string]int32{
		"SECURITY_PROTOCOL_UNSPECIFIED":    0,
		"SECURITY_PROTOCOL_PLAINTEXT":      1,
		"SECURITY_PROTOCOL_SSL":            2,
		"SECURITY_PROTOCOL_SASL_PLAINTEXT": 3,
		"SECURITY_PROTOCOL_SASL_SSL":       4,
	}
)

func (x ClickhouseConfig_Kafka_SecurityProtocol) Enum() *ClickhouseConfig_Kafka_SecurityProtocol {
	p := new(ClickhouseConfig_Kafka_SecurityProtocol)
	*p = x
	return p
}

func (x ClickhouseConfig_Kafka_SecurityProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_Kafka_SecurityProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[1].Descriptor()
}

func (ClickhouseConfig_Kafka_SecurityProtocol) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[1]
}

func (x ClickhouseConfig_Kafka_SecurityProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_Kafka_SecurityProtocol.Descriptor instead.
func (ClickhouseConfig_Kafka_SecurityProtocol) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 1, 0}
}

type ClickhouseConfig_Kafka_SaslMechanism int32

const (
	ClickhouseConfig_Kafka_SASL_MECHANISM_UNSPECIFIED   ClickhouseConfig_Kafka_SaslMechanism = 0
	ClickhouseConfig_Kafka_SASL_MECHANISM_GSSAPI        ClickhouseConfig_Kafka_SaslMechanism = 1
	ClickhouseConfig_Kafka_SASL_MECHANISM_PLAIN         ClickhouseConfig_Kafka_SaslMechanism = 2
	ClickhouseConfig_Kafka_SASL_MECHANISM_SCRAM_SHA_256 ClickhouseConfig_Kafka_SaslMechanism = 3
	ClickhouseConfig_Kafka_SASL_MECHANISM_SCRAM_SHA_512 ClickhouseConfig_Kafka_SaslMechanism = 4
)

// Enum value maps for ClickhouseConfig_Kafka_SaslMechanism.
var (
	ClickhouseConfig_Kafka_SaslMechanism_name = map[int32]string{
		0: "SASL_MECHANISM_UNSPECIFIED",
		1: "SASL_MECHANISM_GSSAPI",
		2: "SASL_MECHANISM_PLAIN",
		3: "SASL_MECHANISM_SCRAM_SHA_256",
		4: "SASL_MECHANISM_SCRAM_SHA_512",
	}
	ClickhouseConfig_Kafka_SaslMechanism_value = map[string]int32{
		"SASL_MECHANISM_UNSPECIFIED":   0,
		"SASL_MECHANISM_GSSAPI":        1,
		"SASL_MECHANISM_PLAIN":         2,
		"SASL_MECHANISM_SCRAM_SHA_256": 3,
		"SASL_MECHANISM_SCRAM_SHA_512": 4,
	}
)

func (x ClickhouseConfig_Kafka_SaslMechanism) Enum() *ClickhouseConfig_Kafka_SaslMechanism {
	p := new(ClickhouseConfig_Kafka_SaslMechanism)
	*p = x
	return p
}

func (x ClickhouseConfig_Kafka_SaslMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_Kafka_SaslMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[2].Descriptor()
}

func (ClickhouseConfig_Kafka_SaslMechanism) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[2]
}

func (x ClickhouseConfig_Kafka_SaslMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_Kafka_SaslMechanism.Descriptor instead.
func (ClickhouseConfig_Kafka_SaslMechanism) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 1, 1}
}

type ClickhouseConfig_Compression_Method int32

const (
	ClickhouseConfig_Compression_METHOD_UNSPECIFIED ClickhouseConfig_Compression_Method = 0
	// [LZ4 compression algorithm](https://lz4.github.io/lz4/).
	ClickhouseConfig_Compression_LZ4 ClickhouseConfig_Compression_Method = 1
	// [Zstandard compression algorithm](https://facebook.github.io/zstd/).
	ClickhouseConfig_Compression_ZSTD ClickhouseConfig_Compression_Method = 2
)

// Enum value maps for ClickhouseConfig_Compression_Method.
var (
	ClickhouseConfig_Compression_Method_name = map[int32]string{
		0: "METHOD_UNSPECIFIED",
		1: "LZ4",
		2: "ZSTD",
	}
	ClickhouseConfig_Compression_Method_value = map[string]int32{
		"METHOD_UNSPECIFIED": 0,
		"LZ4":                1,
		"ZSTD":               2,
	}
)

func (x ClickhouseConfig_Compression_Method) Enum() *ClickhouseConfig_Compression_Method {
	p := new(ClickhouseConfig_Compression_Method)
	*p = x
	return p
}

func (x ClickhouseConfig_Compression_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_Compression_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[3].Descriptor()
}

func (ClickhouseConfig_Compression_Method) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[3]
}

func (x ClickhouseConfig_Compression_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_Compression_Method.Descriptor instead.
func (ClickhouseConfig_Compression_Method) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 4, 0}
}

type ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode int32

const (
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_SSL_MODE_UNSPECIFIED ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 0
	// Only try a non-SSL connection.
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_DISABLE ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 1
	// First try a non-SSL connection; if that fails, try an SSL connection.
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_ALLOW ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 2
	// First try an SSL connection; if that fails, try a non-SSL connection.
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_PREFER ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 3
	// Only try an SSL connection, and verify that the server certificate is issued by a trusted certificate authority (CA).
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_VERIFY_CA ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 4
	// Only try an SSL connection, verify that the server certificate is issued by a trusted CA and that the requested server host name matches that in the certificate.
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_VERIFY_FULL ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 5
)

// Enum value maps for ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode.
var (
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode_name = map[int32]string{
		0: "SSL_MODE_UNSPECIFIED",
		1: "DISABLE",
		2: "ALLOW",
		3: "PREFER",
		4: "VERIFY_CA",
		5: "VERIFY_FULL",
	}
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode_value = map[string]int32{
		"SSL_MODE_UNSPECIFIED": 0,
		"DISABLE":              1,
		"ALLOW":                2,
		"PREFER":               3,
		"VERIFY_CA":            4,
		"VERIFY_FULL":          5,
	}
)

func (x ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) Enum() *ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode {
	p := new(ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode)
	*p = x
	return p
}

func (x ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[4].Descriptor()
}

func (ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[4]
}

func (x ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode.Descriptor instead.
func (ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 4, 0}
}

type ClickhouseConfig_ExternalDictionary_Layout_Type int32

const (
	ClickhouseConfig_ExternalDictionary_Layout_TYPE_UNSPECIFIED ClickhouseConfig_ExternalDictionary_Layout_Type = 0
	// The entire dictionary is stored in memory in the form of flat arrays.
	// Available for all dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_FLAT ClickhouseConfig_ExternalDictionary_Layout_Type = 1
	// The entire dictionary is stored in memory in the form of a hash table.
	// Available for all dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 2
	// Similar to HASHED, to be used with composite keys.
	// Available for all dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_COMPLEX_KEY_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 3
	// The entire dictionary is stored in memory in the form of a hash table,
	// with an ordered array of ranges and their corresponding values.
	// Available for all dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_RANGE_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 4
	// The dictionary is stored in a cache with a set number of cells.
	// Available for MySQL, ClickHouse and HTTP dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_CACHE ClickhouseConfig_ExternalDictionary_Layout_Type = 5
	// Similar to CACHE, to be used with composite keys.
	// Available for MySQL, ClickHouse and HTTP dictionary sources.
	ClickhouseConfig_ExternalDictionary_Layout_COMPLEX_KEY_CACHE ClickhouseConfig_ExternalDictionary_Layout_Type = 6
)

// Enum value maps for ClickhouseConfig_ExternalDictionary_Layout_Type.
var (
	ClickhouseConfig_ExternalDictionary_Layout_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "FLAT",
		2: "HASHED",
		3: "COMPLEX_KEY_HASHED",
		4: "RANGE_HASHED",
		5: "CACHE",
		6: "COMPLEX_KEY_CACHE",
	}
	ClickhouseConfig_ExternalDictionary_Layout_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":   0,
		"FLAT":               1,
		"HASHED":             2,
		"COMPLEX_KEY_HASHED": 3,
		"RANGE_HASHED":       4,
		"CACHE":              5,
		"COMPLEX_KEY_CACHE":  6,
	}
)

func (x ClickhouseConfig_ExternalDictionary_Layout_Type) Enum() *ClickhouseConfig_ExternalDictionary_Layout_Type {
	p := new(ClickhouseConfig_ExternalDictionary_Layout_Type)
	*p = x
	return p
}

func (x ClickhouseConfig_ExternalDictionary_Layout_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_ExternalDictionary_Layout_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[5].Descriptor()
}

func (ClickhouseConfig_ExternalDictionary_Layout_Type) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[5]
}

func (x ClickhouseConfig_ExternalDictionary_Layout_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Layout_Type.Descriptor instead.
func (ClickhouseConfig_ExternalDictionary_Layout_Type) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 6, 0}
}

// ClickHouse configuration options. Detailed description for each set of options
// is available in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/).
//
// Any options not listed here are not supported.
type ClickhouseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logging level for the ClickHouse cluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
	LogLevel ClickhouseConfig_LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_LogLevel" json:"log_level,omitempty"`
	// Settings for the MergeTree engine.
	// See description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#merge_tree).
	MergeTree *ClickhouseConfig_MergeTree `protobuf:"bytes,2,opt,name=merge_tree,json=mergeTree,proto3" json:"merge_tree,omitempty"`
	// Compression settings for the ClickHouse cluster.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#compression).
	Compression []*ClickhouseConfig_Compression `protobuf:"bytes,3,rep,name=compression,proto3" json:"compression,omitempty"`
	// Configuration of external dictionaries to be used by the ClickHouse cluster.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts/).
	Dictionaries []*ClickhouseConfig_ExternalDictionary `protobuf:"bytes,4,rep,name=dictionaries,proto3" json:"dictionaries,omitempty"`
	// Settings for thinning Graphite data.
	// See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
	GraphiteRollup []*ClickhouseConfig_GraphiteRollup `protobuf:"bytes,5,rep,name=graphite_rollup,json=graphiteRollup,proto3" json:"graphite_rollup,omitempty"`
	Kafka          *ClickhouseConfig_Kafka            `protobuf:"bytes,35,opt,name=kafka,proto3" json:"kafka,omitempty"`
	KafkaTopics    []*ClickhouseConfig_KafkaTopic     `protobuf:"bytes,36,rep,name=kafka_topics,json=kafkaTopics,proto3" json:"kafka_topics,omitempty"`
	Rabbitmq       *ClickhouseConfig_Rabbitmq         `protobuf:"bytes,37,opt,name=rabbitmq,proto3" json:"rabbitmq,omitempty"`
	// Maximum number of inbound connections.
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Maximum number of simultaneously processed requests.
	MaxConcurrentQueries *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=max_concurrent_queries,json=maxConcurrentQueries,proto3" json:"max_concurrent_queries,omitempty"`
	// Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
	KeepAliveTimeout *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=keep_alive_timeout,json=keepAliveTimeout,proto3" json:"keep_alive_timeout,omitempty"`
	// Cache size (in bytes) for uncompressed data used by MergeTree tables.
	UncompressedCacheSize *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=uncompressed_cache_size,json=uncompressedCacheSize,proto3" json:"uncompressed_cache_size,omitempty"`
	// Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
	MarkCacheSize *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=mark_cache_size,json=markCacheSize,proto3" json:"mark_cache_size,omitempty"`
	// Maximum size of the table that can be deleted using a DROP query.
	MaxTableSizeToDrop *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=max_table_size_to_drop,json=maxTableSizeToDrop,proto3" json:"max_table_size_to_drop,omitempty"`
	// Maximum size of the partition that can be deleted using a DROP query.
	MaxPartitionSizeToDrop *wrapperspb.Int64Value `protobuf:"bytes,13,opt,name=max_partition_size_to_drop,json=maxPartitionSizeToDrop,proto3" json:"max_partition_size_to_drop,omitempty"`
	// The setting is deprecated and has no effect.
	//
	// Deprecated: Do not use.
	BuiltinDictionariesReloadInterval *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=builtin_dictionaries_reload_interval,json=builtinDictionariesReloadInterval,proto3" json:"builtin_dictionaries_reload_interval,omitempty"`
	// The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
	Timezone string `protobuf:"bytes,14,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Address of the archive with the user geobase in Object Storage.
	GeobaseUri string `protobuf:"bytes,15,opt,name=geobase_uri,json=geobaseUri,proto3" json:"geobase_uri,omitempty"`
	// The maximum size that query_log can grow to before old data will be removed. If set to 0, automatic removal of
	// query_log data based on size is disabled.
	QueryLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,16,opt,name=query_log_retention_size,json=queryLogRetentionSize,proto3" json:"query_log_retention_size,omitempty"`
	// The maximum time that query_log records will be retained before removal. If set to 0, automatic removal of
	// query_log data based on time is disabled.
	QueryLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,17,opt,name=query_log_retention_time,json=queryLogRetentionTime,proto3" json:"query_log_retention_time,omitempty"`
	// Whether query_thread_log system table is enabled.
	QueryThreadLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,18,opt,name=query_thread_log_enabled,json=queryThreadLogEnabled,proto3" json:"query_thread_log_enabled,omitempty"`
	// The maximum size that query_thread_log can grow to before old data will be removed. If set to 0, automatic removal of
	// query_thread_log data based on size is disabled.
	QueryThreadLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,19,opt,name=query_thread_log_retention_size,json=queryThreadLogRetentionSize,proto3" json:"query_thread_log_retention_size,omitempty"`
	// The maximum time that query_thread_log records will be retained before removal. If set to 0, automatic removal of
	// query_thread_log data based on time is disabled.
	QueryThreadLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,20,opt,name=query_thread_log_retention_time,json=queryThreadLogRetentionTime,proto3" json:"query_thread_log_retention_time,omitempty"`
	// The maximum size that part_log can grow to before old data will be removed. If set to 0, automatic removal of
	// part_log data based on size is disabled.
	PartLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,21,opt,name=part_log_retention_size,json=partLogRetentionSize,proto3" json:"part_log_retention_size,omitempty"`
	// The maximum time that part_log records will be retained before removal. If set to 0, automatic removal of
	// part_log data based on time is disabled.
	PartLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,22,opt,name=part_log_retention_time,json=partLogRetentionTime,proto3" json:"part_log_retention_time,omitempty"`
	// Whether metric_log system table is enabled.
	MetricLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,23,opt,name=metric_log_enabled,json=metricLogEnabled,proto3" json:"metric_log_enabled,omitempty"`
	// The maximum size that metric_log can grow to before old data will be removed. If set to 0, automatic removal of
	// metric_log data based on size is disabled.
	MetricLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,24,opt,name=metric_log_retention_size,json=metricLogRetentionSize,proto3" json:"metric_log_retention_size,omitempty"`
	// The maximum time that metric_log records will be retained before removal. If set to 0, automatic removal of
	// metric_log data based on time is disabled.
	MetricLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,25,opt,name=metric_log_retention_time,json=metricLogRetentionTime,proto3" json:"metric_log_retention_time,omitempty"`
	// Whether trace_log system table is enabled.
	TraceLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,26,opt,name=trace_log_enabled,json=traceLogEnabled,proto3" json:"trace_log_enabled,omitempty"`
	// The maximum size that trace_log can grow to before old data will be removed. If set to 0, automatic removal of
	// trace_log data based on size is disabled.
	TraceLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,27,opt,name=trace_log_retention_size,json=traceLogRetentionSize,proto3" json:"trace_log_retention_size,omitempty"`
	// The maximum time that trace_log records will be retained before removal. If set to 0, automatic removal of
	// trace_log data based on time is disabled.
	TraceLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,28,opt,name=trace_log_retention_time,json=traceLogRetentionTime,proto3" json:"trace_log_retention_time,omitempty"`
	// Whether text_log system table is enabled.
	TextLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,29,opt,name=text_log_enabled,json=textLogEnabled,proto3" json:"text_log_enabled,omitempty"`
	// The maximum size that text_log can grow to before old data will be removed. If set to 0, automatic removal of
	// text_log data based on size is disabled.
	TextLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,30,opt,name=text_log_retention_size,json=textLogRetentionSize,proto3" json:"text_log_retention_size,omitempty"`
	// The maximum time that text_log records will be retained before removal. If set to 0, automatic removal of
	// text_log data based on time is disabled.
	TextLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,31,opt,name=text_log_retention_time,json=textLogRetentionTime,proto3" json:"text_log_retention_time,omitempty"`
	// Logging level for text_log system table. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
	TextLogLevel               ClickhouseConfig_LogLevel `protobuf:"varint,32,opt,name=text_log_level,json=textLogLevel,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_LogLevel" json:"text_log_level,omitempty"`
	BackgroundPoolSize         *wrapperspb.Int64Value    `protobuf:"bytes,33,opt,name=background_pool_size,json=backgroundPoolSize,proto3" json:"background_pool_size,omitempty"`
	BackgroundSchedulePoolSize *wrapperspb.Int64Value    `protobuf:"bytes,34,opt,name=background_schedule_pool_size,json=backgroundSchedulePoolSize,proto3" json:"background_schedule_pool_size,omitempty"`
}

func (x *ClickhouseConfig) Reset() {
	*x = ClickhouseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig) ProtoMessage() {}

func (x *ClickhouseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0}
}

func (x *ClickhouseConfig) GetLogLevel() ClickhouseConfig_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return ClickhouseConfig_LOG_LEVEL_UNSPECIFIED
}

func (x *ClickhouseConfig) GetMergeTree() *ClickhouseConfig_MergeTree {
	if x != nil {
		return x.MergeTree
	}
	return nil
}

func (x *ClickhouseConfig) GetCompression() []*ClickhouseConfig_Compression {
	if x != nil {
		return x.Compression
	}
	return nil
}

func (x *ClickhouseConfig) GetDictionaries() []*ClickhouseConfig_ExternalDictionary {
	if x != nil {
		return x.Dictionaries
	}
	return nil
}

func (x *ClickhouseConfig) GetGraphiteRollup() []*ClickhouseConfig_GraphiteRollup {
	if x != nil {
		return x.GraphiteRollup
	}
	return nil
}

func (x *ClickhouseConfig) GetKafka() *ClickhouseConfig_Kafka {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *ClickhouseConfig) GetKafkaTopics() []*ClickhouseConfig_KafkaTopic {
	if x != nil {
		return x.KafkaTopics
	}
	return nil
}

func (x *ClickhouseConfig) GetRabbitmq() *ClickhouseConfig_Rabbitmq {
	if x != nil {
		return x.Rabbitmq
	}
	return nil
}

func (x *ClickhouseConfig) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *ClickhouseConfig) GetMaxConcurrentQueries() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConcurrentQueries
	}
	return nil
}

func (x *ClickhouseConfig) GetKeepAliveTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.KeepAliveTimeout
	}
	return nil
}

func (x *ClickhouseConfig) GetUncompressedCacheSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.UncompressedCacheSize
	}
	return nil
}

func (x *ClickhouseConfig) GetMarkCacheSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MarkCacheSize
	}
	return nil
}

func (x *ClickhouseConfig) GetMaxTableSizeToDrop() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxTableSizeToDrop
	}
	return nil
}

func (x *ClickhouseConfig) GetMaxPartitionSizeToDrop() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPartitionSizeToDrop
	}
	return nil
}

// Deprecated: Do not use.
func (x *ClickhouseConfig) GetBuiltinDictionariesReloadInterval() *wrapperspb.Int64Value {
	if x != nil {
		return x.BuiltinDictionariesReloadInterval
	}
	return nil
}

func (x *ClickhouseConfig) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *ClickhouseConfig) GetGeobaseUri() string {
	if x != nil {
		return x.GeobaseUri
	}
	return ""
}

func (x *ClickhouseConfig) GetQueryLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryThreadLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.QueryThreadLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryThreadLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryThreadLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryThreadLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryThreadLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetPartLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.PartLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetPartLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.PartLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetMetricLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.MetricLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetMetricLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MetricLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetMetricLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.MetricLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetTraceLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.TraceLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetTraceLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.TraceLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetTraceLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.TraceLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetTextLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.TextLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetTextLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.TextLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetTextLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.TextLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetTextLogLevel() ClickhouseConfig_LogLevel {
	if x != nil {
		return x.TextLogLevel
	}
	return ClickhouseConfig_LOG_LEVEL_UNSPECIFIED
}

func (x *ClickhouseConfig) GetBackgroundPoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundPoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundSchedulePoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundSchedulePoolSize
	}
	return nil
}

type ClickhouseConfigSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective settings for a ClickHouse cluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *ClickhouseConfig `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a ClickHouse cluster.
	UserConfig *ClickhouseConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a ClickHouse cluster.
	DefaultConfig *ClickhouseConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *ClickhouseConfigSet) Reset() {
	*x = ClickhouseConfigSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfigSet) ProtoMessage() {}

func (x *ClickhouseConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfigSet.ProtoReflect.Descriptor instead.
func (*ClickhouseConfigSet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{1}
}

func (x *ClickhouseConfigSet) GetEffectiveConfig() *ClickhouseConfig {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *ClickhouseConfigSet) GetUserConfig() *ClickhouseConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *ClickhouseConfigSet) GetDefaultConfig() *ClickhouseConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// Options specific to the MergeTree table engine.
type ClickhouseConfig_MergeTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of blocks of hashes to keep in ZooKeeper.
	ReplicatedDeduplicationWindow *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=replicated_deduplication_window,json=replicatedDeduplicationWindow,proto3" json:"replicated_deduplication_window,omitempty"`
	// Period of time to keep blocks of hashes for.
	ReplicatedDeduplicationWindowSeconds *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=replicated_deduplication_window_seconds,json=replicatedDeduplicationWindowSeconds,proto3" json:"replicated_deduplication_window_seconds,omitempty"`
	// If table contains at least that many active parts in single partition, artificially slow down insert into table.
	PartsToDelayInsert *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=parts_to_delay_insert,json=partsToDelayInsert,proto3" json:"parts_to_delay_insert,omitempty"`
	// If more than this number active parts in single partition, throw 'Too many parts ...' exception.
	PartsToThrowInsert *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=parts_to_throw_insert,json=partsToThrowInsert,proto3" json:"parts_to_throw_insert,omitempty"`
	// How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
	MaxReplicatedMergesInQueue *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=max_replicated_merges_in_queue,json=maxReplicatedMergesInQueue,proto3" json:"max_replicated_merges_in_queue,omitempty"`
	// If there is less than specified number of free entries in background pool (or replicated queue), start to lower
	// maximum size of merge to process.
	NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=number_of_free_entries_in_pool_to_lower_max_size_of_merge,json=numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge,proto3" json:"number_of_free_entries_in_pool_to_lower_max_size_of_merge,omitempty"`
	// Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
	// in replication queue).
	MaxBytesToMergeAtMinSpaceInPool *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=max_bytes_to_merge_at_min_space_in_pool,json=maxBytesToMergeAtMinSpaceInPool,proto3" json:"max_bytes_to_merge_at_min_space_in_pool,omitempty"`
	MaxBytesToMergeAtMaxSpaceInPool *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=max_bytes_to_merge_at_max_space_in_pool,json=maxBytesToMergeAtMaxSpaceInPool,proto3" json:"max_bytes_to_merge_at_max_space_in_pool,omitempty"`
}

func (x *ClickhouseConfig_MergeTree) Reset() {
	*x = ClickhouseConfig_MergeTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_MergeTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_MergeTree) ProtoMessage() {}

func (x *ClickhouseConfig_MergeTree) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_MergeTree.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_MergeTree) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ClickhouseConfig_MergeTree) GetReplicatedDeduplicationWindow() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicatedDeduplicationWindow
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetReplicatedDeduplicationWindowSeconds() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicatedDeduplicationWindowSeconds
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetPartsToDelayInsert() *wrapperspb.Int64Value {
	if x != nil {
		return x.PartsToDelayInsert
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetPartsToThrowInsert() *wrapperspb.Int64Value {
	if x != nil {
		return x.PartsToThrowInsert
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxReplicatedMergesInQueue() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxReplicatedMergesInQueue
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge() *wrapperspb.Int64Value {
	if x != nil {
		return x.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxBytesToMergeAtMinSpaceInPool() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxBytesToMergeAtMinSpaceInPool
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxBytesToMergeAtMaxSpaceInPool() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxBytesToMergeAtMaxSpaceInPool
	}
	return nil
}

type ClickhouseConfig_Kafka struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityProtocol ClickhouseConfig_Kafka_SecurityProtocol `protobuf:"varint,1,opt,name=security_protocol,json=securityProtocol,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_Kafka_SecurityProtocol" json:"security_protocol,omitempty"`
	SaslMechanism    ClickhouseConfig_Kafka_SaslMechanism    `protobuf:"varint,2,opt,name=sasl_mechanism,json=saslMechanism,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_Kafka_SaslMechanism" json:"sasl_mechanism,omitempty"`
	SaslUsername     string                                  `protobuf:"bytes,3,opt,name=sasl_username,json=saslUsername,proto3" json:"sasl_username,omitempty"`
	SaslPassword     string                                  `protobuf:"bytes,4,opt,name=sasl_password,json=saslPassword,proto3" json:"sasl_password,omitempty"`
}

func (x *ClickhouseConfig_Kafka) Reset() {
	*x = ClickhouseConfig_Kafka{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_Kafka) ProtoMessage() {}

func (x *ClickhouseConfig_Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_Kafka.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_Kafka) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ClickhouseConfig_Kafka) GetSecurityProtocol() ClickhouseConfig_Kafka_SecurityProtocol {
	if x != nil {
		return x.SecurityProtocol
	}
	return ClickhouseConfig_Kafka_SECURITY_PROTOCOL_UNSPECIFIED
}

func (x *ClickhouseConfig_Kafka) GetSaslMechanism() ClickhouseConfig_Kafka_SaslMechanism {
	if x != nil {
		return x.SaslMechanism
	}
	return ClickhouseConfig_Kafka_SASL_MECHANISM_UNSPECIFIED
}

func (x *ClickhouseConfig_Kafka) GetSaslUsername() string {
	if x != nil {
		return x.SaslUsername
	}
	return ""
}

func (x *ClickhouseConfig_Kafka) GetSaslPassword() string {
	if x != nil {
		return x.SaslPassword
	}
	return ""
}

type ClickhouseConfig_KafkaTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Settings *ClickhouseConfig_Kafka `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *ClickhouseConfig_KafkaTopic) Reset() {
	*x = ClickhouseConfig_KafkaTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_KafkaTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_KafkaTopic) ProtoMessage() {}

func (x *ClickhouseConfig_KafkaTopic) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_KafkaTopic.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_KafkaTopic) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ClickhouseConfig_KafkaTopic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseConfig_KafkaTopic) GetSettings() *ClickhouseConfig_Kafka {
	if x != nil {
		return x.Settings
	}
	return nil
}

type ClickhouseConfig_Rabbitmq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ClickhouseConfig_Rabbitmq) Reset() {
	*x = ClickhouseConfig_Rabbitmq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_Rabbitmq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_Rabbitmq) ProtoMessage() {}

func (x *ClickhouseConfig_Rabbitmq) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_Rabbitmq.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_Rabbitmq) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ClickhouseConfig_Rabbitmq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ClickhouseConfig_Rabbitmq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ClickhouseConfig_Compression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
	Method ClickhouseConfig_Compression_Method `protobuf:"varint,1,opt,name=method,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_Compression_Method" json:"method,omitempty"`
	// Minimum size of a part of a table.
	MinPartSize int64 `protobuf:"varint,2,opt,name=min_part_size,json=minPartSize,proto3" json:"min_part_size,omitempty"`
	// Minimum ratio of a part relative to the size of all the data in the table.
	MinPartSizeRatio float64 `protobuf:"fixed64,3,opt,name=min_part_size_ratio,json=minPartSizeRatio,proto3" json:"min_part_size_ratio,omitempty"`
}

func (x *ClickhouseConfig_Compression) Reset() {
	*x = ClickhouseConfig_Compression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_Compression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_Compression) ProtoMessage() {}

func (x *ClickhouseConfig_Compression) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_Compression.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_Compression) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ClickhouseConfig_Compression) GetMethod() ClickhouseConfig_Compression_Method {
	if x != nil {
		return x.Method
	}
	return ClickhouseConfig_Compression_METHOD_UNSPECIFIED
}

func (x *ClickhouseConfig_Compression) GetMinPartSize() int64 {
	if x != nil {
		return x.MinPartSize
	}
	return 0
}

func (x *ClickhouseConfig_Compression) GetMinPartSizeRatio() float64 {
	if x != nil {
		return x.MinPartSizeRatio
	}
	return 0
}

type ClickhouseConfig_ExternalDictionary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the external dictionary.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Set of attributes for the external dictionary.
	// For in-depth description, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_structure/).
	Structure *ClickhouseConfig_ExternalDictionary_Structure `protobuf:"bytes,2,opt,name=structure,proto3" json:"structure,omitempty"`
	// Layout for storing the dictionary in memory.
	// For in-depth description, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_layout/).
	Layout *ClickhouseConfig_ExternalDictionary_Layout `protobuf:"bytes,3,opt,name=layout,proto3" json:"layout,omitempty"`
	// Setting for the period of time between dictionary updates.
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
	//
	// Types that are assignable to Lifetime:
	//	*ClickhouseConfig_ExternalDictionary_FixedLifetime
	//	*ClickhouseConfig_ExternalDictionary_LifetimeRange
	Lifetime isClickhouseConfig_ExternalDictionary_Lifetime `protobuf_oneof:"lifetime"`
	// Description of the source for the external dictionary.
	//
	// Types that are assignable to Source:
	//	*ClickhouseConfig_ExternalDictionary_HttpSource_
	//	*ClickhouseConfig_ExternalDictionary_MysqlSource_
	//	*ClickhouseConfig_ExternalDictionary_ClickhouseSource_
	//	*ClickhouseConfig_ExternalDictionary_MongodbSource_
	//	*ClickhouseConfig_ExternalDictionary_PostgresqlSource_
	Source isClickhouseConfig_ExternalDictionary_Source `protobuf_oneof:"source"`
}

func (x *ClickhouseConfig_ExternalDictionary) Reset() {
	*x = ClickhouseConfig_ExternalDictionary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5}
}

func (x *ClickhouseConfig_ExternalDictionary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary) GetStructure() *ClickhouseConfig_ExternalDictionary_Structure {
	if x != nil {
		return x.Structure
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetLayout() *ClickhouseConfig_ExternalDictionary_Layout {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetLifetime() isClickhouseConfig_ExternalDictionary_Lifetime {
	if m != nil {
		return m.Lifetime
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetFixedLifetime() int64 {
	if x, ok := x.GetLifetime().(*ClickhouseConfig_ExternalDictionary_FixedLifetime); ok {
		return x.FixedLifetime
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary) GetLifetimeRange() *ClickhouseConfig_ExternalDictionary_Range {
	if x, ok := x.GetLifetime().(*ClickhouseConfig_ExternalDictionary_LifetimeRange); ok {
		return x.LifetimeRange
	}
	return nil
}

func (m *ClickhouseConfig_ExternalDictionary) GetSource() isClickhouseConfig_ExternalDictionary_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetHttpSource() *ClickhouseConfig_ExternalDictionary_HttpSource {
	if x, ok := x.GetSource().(*ClickhouseConfig_ExternalDictionary_HttpSource_); ok {
		return x.HttpSource
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetMysqlSource() *ClickhouseConfig_ExternalDictionary_MysqlSource {
	if x, ok := x.GetSource().(*ClickhouseConfig_ExternalDictionary_MysqlSource_); ok {
		return x.MysqlSource
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetClickhouseSource() *ClickhouseConfig_ExternalDictionary_ClickhouseSource {
	if x, ok := x.GetSource().(*ClickhouseConfig_ExternalDictionary_ClickhouseSource_); ok {
		return x.ClickhouseSource
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetMongodbSource() *ClickhouseConfig_ExternalDictionary_MongodbSource {
	if x, ok := x.GetSource().(*ClickhouseConfig_ExternalDictionary_MongodbSource_); ok {
		return x.MongodbSource
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetPostgresqlSource() *ClickhouseConfig_ExternalDictionary_PostgresqlSource {
	if x, ok := x.GetSource().(*ClickhouseConfig_ExternalDictionary_PostgresqlSource_); ok {
		return x.PostgresqlSource
	}
	return nil
}

type isClickhouseConfig_ExternalDictionary_Lifetime interface {
	isClickhouseConfig_ExternalDictionary_Lifetime()
}

type ClickhouseConfig_ExternalDictionary_FixedLifetime struct {
	// Fixed interval between dictionary updates.
	FixedLifetime int64 `protobuf:"varint,4,opt,name=fixed_lifetime,json=fixedLifetime,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_LifetimeRange struct {
	// Range of intervals between dictionary updates for ClickHouse to choose from.
	LifetimeRange *ClickhouseConfig_ExternalDictionary_Range `protobuf:"bytes,5,opt,name=lifetime_range,json=lifetimeRange,proto3,oneof"`
}

func (*ClickhouseConfig_ExternalDictionary_FixedLifetime) isClickhouseConfig_ExternalDictionary_Lifetime() {
}

func (*ClickhouseConfig_ExternalDictionary_LifetimeRange) isClickhouseConfig_ExternalDictionary_Lifetime() {
}

type isClickhouseConfig_ExternalDictionary_Source interface {
	isClickhouseConfig_ExternalDictionary_Source()
}

type ClickhouseConfig_ExternalDictionary_HttpSource_ struct {
	// HTTP source for the dictionary.
	HttpSource *ClickhouseConfig_ExternalDictionary_HttpSource `protobuf:"bytes,6,opt,name=http_source,json=httpSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_MysqlSource_ struct {
	// MySQL source for the dictionary.
	MysqlSource *ClickhouseConfig_ExternalDictionary_MysqlSource `protobuf:"bytes,7,opt,name=mysql_source,json=mysqlSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_ClickhouseSource_ struct {
	// ClickHouse source for the dictionary.
	ClickhouseSource *ClickhouseConfig_ExternalDictionary_ClickhouseSource `protobuf:"bytes,8,opt,name=clickhouse_source,json=clickhouseSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_MongodbSource_ struct {
	// MongoDB source for the dictionary.
	MongodbSource *ClickhouseConfig_ExternalDictionary_MongodbSource `protobuf:"bytes,9,opt,name=mongodb_source,json=mongodbSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_PostgresqlSource_ struct {
	// PostgreSQL source for the dictionary.
	PostgresqlSource *ClickhouseConfig_ExternalDictionary_PostgresqlSource `protobuf:"bytes,10,opt,name=postgresql_source,json=postgresqlSource,proto3,oneof"`
}

func (*ClickhouseConfig_ExternalDictionary_HttpSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_MysqlSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_ClickhouseSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_MongodbSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_PostgresqlSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

// Rollup settings for the GraphiteMergeTree table engine.
type ClickhouseConfig_GraphiteRollup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name for the specified combination of settings for Graphite rollup.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pattern to use for the rollup.
	Patterns []*ClickhouseConfig_GraphiteRollup_Pattern `protobuf:"bytes,2,rep,name=patterns,proto3" json:"patterns,omitempty"`
}

func (x *ClickhouseConfig_GraphiteRollup) Reset() {
	*x = ClickhouseConfig_GraphiteRollup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_GraphiteRollup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_GraphiteRollup) ProtoMessage() {}

func (x *ClickhouseConfig_GraphiteRollup) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_GraphiteRollup.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_GraphiteRollup) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 6}
}

func (x *ClickhouseConfig_GraphiteRollup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseConfig_GraphiteRollup) GetPatterns() []*ClickhouseConfig_GraphiteRollup_Pattern {
	if x != nil {
		return x.Patterns
	}
	return nil
}

type ClickhouseConfig_ExternalDictionary_HttpSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of the source dictionary available over HTTP.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The data format. Valid values are all formats supported by ClickHouse SQL dialect.
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_HttpSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_HttpSource) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_HttpSource.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_HttpSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_MysqlSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the MySQL database to connect to.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Name of the database table to use as a ClickHouse dictionary.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// Default port to use when connecting to a replica of the dictionary source.
	Port int64 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the default user for replicas of the dictionary source.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the default user for replicas of the dictionary source.
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// List of MySQL replicas of the database used as dictionary source.
	Replicas []*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica `protobuf:"bytes,6,rep,name=replicas,proto3" json:"replicas,omitempty"`
	// Selection criteria for the data in the specified MySQL table.
	Where string `protobuf:"bytes,7,opt,name=where,proto3" json:"where,omitempty"`
	// Query for checking the dictionary status, to pull only updated data.
	// For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
	InvalidateQuery string `protobuf:"bytes,8,opt,name=invalidate_query,json=invalidateQuery,proto3" json:"invalidate_query,omitempty"`
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_MysqlSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_MysqlSource) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_MysqlSource.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_MysqlSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetReplicas() []*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetInvalidateQuery() string {
	if x != nil {
		return x.InvalidateQuery
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_ClickhouseSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the ClickHouse database.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Name of the table in the specified database to be used as the dictionary source.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// ClickHouse host of the specified database.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Port to use when connecting to the host.
	Port int64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the ClickHouse database user.
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the ClickHouse database user.
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// Selection criteria for the data in the specified ClickHouse table.
	Where string `protobuf:"bytes,7,opt,name=where,proto3" json:"where,omitempty"`
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_ClickhouseSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_ClickhouseSource) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_ClickhouseSource.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_ClickhouseSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 2}
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_MongodbSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the MongoDB database.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Name of the collection in the specified database to be used as the dictionary source.
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	// MongoDB host of the specified database.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Port to use when connecting to the host.
	Port int64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the MongoDB database user.
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the MongoDB database user.
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_MongodbSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_MongodbSource) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_MongodbSource.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_MongodbSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 3}
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_PostgresqlSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the PostrgreSQL database.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Name of the table in the specified database to be used as the dictionary source.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// Name of the PostrgreSQL host
	Hosts []string `protobuf:"bytes,3,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Port to use when connecting to the host.
	Port int64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the PostrgreSQL database user.
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the PostrgreSQL database user.
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// Query for checking the dictionary status, to pull only updated data.
	// For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
	InvalidateQuery string `protobuf:"bytes,7,opt,name=invalidate_query,json=invalidateQuery,proto3" json:"invalidate_query,omitempty"`
	// Mode of SSL TCP/IP connection to the PostgreSQL host.
	// For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
	SslMode ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode `protobuf:"varint,8,opt,name=ssl_mode,json=sslMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode" json:"ssl_mode,omitempty"`
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_PostgresqlSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_PostgresqlSource) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_PostgresqlSource.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_PostgresqlSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 4}
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetInvalidateQuery() string {
	if x != nil {
		return x.InvalidateQuery
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetSslMode() ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode {
	if x != nil {
		return x.SslMode
	}
	return ClickhouseConfig_ExternalDictionary_PostgresqlSource_SSL_MODE_UNSPECIFIED
}

type ClickhouseConfig_ExternalDictionary_Structure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Single numeric key column for the dictionary.
	Id *ClickhouseConfig_ExternalDictionary_Structure_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Composite key for the dictionary, containing of one or more key columns.
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
	Key *ClickhouseConfig_ExternalDictionary_Structure_Key `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
	RangeMin *ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,4,opt,name=range_min,json=rangeMin,proto3" json:"range_min,omitempty"`
	// Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
	RangeMax *ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,5,opt,name=range_max,json=rangeMax,proto3" json:"range_max,omitempty"`
	// Description of the fields available for database queries.
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
	Attributes []*ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_Structure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_Structure) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_Structure) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Structure.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_Structure) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 5}
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) GetId() *ClickhouseConfig_ExternalDictionary_Structure_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) GetKey() *ClickhouseConfig_ExternalDictionary_Structure_Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) GetRangeMin() *ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if x != nil {
		return x.RangeMin
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) GetRangeMax() *ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if x != nil {
		return x.RangeMax
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) GetAttributes() []*ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Layout determining how to store the dictionary in memory.
type ClickhouseConfig_ExternalDictionary_Layout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Layout type for an external dictionary.
	Type ClickhouseConfig_ExternalDictionary_Layout_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_ExternalDictionary_Layout_Type" json:"type,omitempty"`
	// Number of cells in the cache. Rounded up to a power of two.
	// Applicable only for CACHE and COMPLEX_KEY_CACHE layout types.
	SizeInCells int64 `protobuf:"varint,2,opt,name=size_in_cells,json=sizeInCells,proto3" json:"size_in_cells,omitempty"`
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_Layout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_Layout) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_Layout) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Layout.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_Layout) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 6}
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) GetType() ClickhouseConfig_ExternalDictionary_Layout_Type {
	if x != nil {
		return x.Type
	}
	return ClickhouseConfig_ExternalDictionary_Layout_TYPE_UNSPECIFIED
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) GetSizeInCells() int64 {
	if x != nil {
		return x.SizeInCells
	}
	return 0
}

type ClickhouseConfig_ExternalDictionary_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum dictionary lifetime.
	Min int64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum dictionary lifetime.
	Max int64 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *ClickhouseConfig_ExternalDictionary_Range) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_Range) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_Range) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Range.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_Range) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 7}
}

func (x *ClickhouseConfig_ExternalDictionary_Range) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_Range) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type ClickhouseConfig_ExternalDictionary_MysqlSource_Replica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MySQL host of the replica.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The priority of the replica that ClickHouse takes into account when connecting.
	// Replica with the highest priority should have this field set to the lowest number.
	Priority int64 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// Port to use when connecting to the replica.
	// If a port is not specified for a replica, ClickHouse uses the port specified for the source.
	Port int64 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the MySQL database user.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the MySQL database user.
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_MysqlSource_Replica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_MysqlSource_Replica.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 1, 0}
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_Structure_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the column.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Default value for an element without data (for example, an empty string).
	NullValue string `protobuf:"bytes,3,opt,name=null_value,json=nullValue,proto3" json:"null_value,omitempty"`
	// Expression, describing the attribute, if applicable.
	Expression string `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
	// Indication of hierarchy support.
	// Default value: `false`.
	Hierarchical bool `protobuf:"varint,5,opt,name=hierarchical,proto3" json:"hierarchical,omitempty"`
	// Indication of injective mapping "id -> attribute".
	// Default value: `false`.
	Injective bool `protobuf:"varint,6,opt,name=injective,proto3" json:"injective,omitempty"`
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_Structure_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_Structure_Attribute) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Structure_Attribute.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_Structure_Attribute) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 5, 0}
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetNullValue() string {
	if x != nil {
		return x.NullValue
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetHierarchical() bool {
	if x != nil {
		return x.Hierarchical
	}
	return false
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetInjective() bool {
	if x != nil {
		return x.Injective
	}
	return false
}

// Numeric key.
type ClickhouseConfig_ExternalDictionary_Structure_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the numeric key.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Id) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_Structure_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_Structure_Id) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Id) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Structure_Id.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_Structure_Id) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 5, 1}
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Id) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Complex key.
type ClickhouseConfig_ExternalDictionary_Structure_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Attributes of a complex key.
	Attributes []*ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Key) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_Structure_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_Structure_Key) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Key) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Structure_Key.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_Structure_Key) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 5, 2}
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Key) GetAttributes() []*ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ClickhouseConfig_GraphiteRollup_Pattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pattern for metric names.
	Regexp string `protobuf:"bytes,1,opt,name=regexp,proto3" json:"regexp,omitempty"`
	// Name of the aggregating function to apply to data of the age specified in [retention].
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	// Age of data to use for thinning.
	Retention []*ClickhouseConfig_GraphiteRollup_Pattern_Retention `protobuf:"bytes,3,rep,name=retention,proto3" json:"retention,omitempty"`
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) Reset() {
	*x = ClickhouseConfig_GraphiteRollup_Pattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_GraphiteRollup_Pattern) ProtoMessage() {}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_GraphiteRollup_Pattern.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_GraphiteRollup_Pattern) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) GetRetention() []*ClickhouseConfig_GraphiteRollup_Pattern_Retention {
	if x != nil {
		return x.Retention
	}
	return nil
}

type ClickhouseConfig_GraphiteRollup_Pattern_Retention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum age of the data in seconds.
	Age int64 `protobuf:"varint,1,opt,name=age,proto3" json:"age,omitempty"`
	// Precision of determining the age of the data, in seconds.
	Precision int64 `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) Reset() {
	*x = ClickhouseConfig_GraphiteRollup_Pattern_Retention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_GraphiteRollup_Pattern_Retention) ProtoMessage() {}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_GraphiteRollup_Pattern_Retention.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_GraphiteRollup_Pattern_Retention) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 6, 0, 0}
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) GetAge() int64 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) GetPrecision() int64 {
	if x != nil {
		return x.Precision
	}
	return 0
}

var File_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDesc = []byte{
	0x0a, 0x36, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb,
	0x4b, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x60, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x65, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x0c, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x0f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x52, 0x0e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x12, 0x53, 0x0a, 0x05,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x12, 0x65, 0x0a, 0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0b, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x72, 0x61, 0x62, 0x62,
	0x69, 0x74, 0x6d, 0x71, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x52, 0x08, 0x72, 0x61,
	0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x12, 0x4e, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7,
	0x31, 0x04, 0x3e, 0x3d, 0x31, 0x30, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x3e, 0x3d, 0x31, 0x30, 0x52, 0x14, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x53,
	0x0a, 0x17, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x75, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xfa, 0xc7, 0x31, 0x02, 0x3e,
	0x30, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x4f, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d,
	0x61, 0x78, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x44, 0x72, 0x6f,
	0x70, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x70, 0x0a, 0x24, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x21, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x65, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x69, 0x12, 0x54, 0x0a, 0x18, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x54, 0x0a, 0x18, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x15, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x1f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x61, 0x0a,
	0x1f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x52, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x70, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x18, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x54, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x65,
	0x78, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x17,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x74, 0x65, 0x78, 0x74,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x52, 0x0a, 0x17, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x74, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c,
	0x74, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x14,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xfa, 0xc7, 0x31, 0x02, 0x3e, 0x30, 0x52,
	0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x66, 0x0a, 0x1d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0xfa, 0xc7, 0x31, 0x02, 0x3e, 0x30, 0x52,
	0x1a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xd4, 0x06, 0x0a, 0x09,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x63, 0x0a, 0x1f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x72,
	0x0a, 0x27, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x24, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x74,
	0x68, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x5f, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x39, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x72,
	0x65, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x54,
	0x6f, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x4f, 0x66, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x12, 0x6d, 0x0a, 0x27, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x41, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x6d, 0x0a, 0x27, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x41, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x1a, 0xa7, 0x05, 0x0a, 0x05, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x7b, 0x0a, 0x11,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x72, 0x0a, 0x0e, 0x73, 0x61, 0x73,
	0x6c, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x53, 0x61, 0x73, 0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x0d,
	0x73, 0x61, 0x73, 0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x73, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x73, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x73, 0x6c, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x53, 0x4c, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x53, 0x53, 0x4c, 0x10,
	0x04, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x53, 0x61, 0x73, 0x6c, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x43, 0x48,
	0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x43, 0x48,
	0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x47, 0x53, 0x53, 0x41, 0x50, 0x49, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x41, 0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d,
	0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x41, 0x53, 0x4c,
	0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x43, 0x52, 0x41, 0x4d,
	0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x41,
	0x53, 0x4c, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x43, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x04, 0x1a, 0x87, 0x01, 0x0a,
	0x0a, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x42, 0x0a, 0x08, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74,
	0x6d, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x82, 0x02, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2b,
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0xc7, 0x31, 0x03, 0x3e, 0x3d, 0x31, 0x52, 0x0b,
	0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x33, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x5a, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x53, 0x54, 0x44, 0x10, 0x02, 0x1a,
	0xd0, 0x1e, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x78, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x6f, 0x0a, 0x06, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x42, 0x04, 0xe8,
	0xc7, 0x31, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x79, 0x0a, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x78, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x68,
	0x74, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x7b, 0x0a, 0x0c, 0x6d, 0x79, 0x73,
	0x71, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x56, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x01, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x1a, 0x42, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0xfe, 0x03, 0x0a, 0x0b, 0x4d, 0x79, 0x73,
	0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x02, 0x64, 0x62, 0x12, 0x1a,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8,
	0xc7, 0x31, 0x01, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x30, 0x2d,
	0x36, 0x35, 0x35, 0x33, 0x35, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x42, 0x06,
	0x82, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0xa5, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x21, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe8, 0xc7, 0x31,
	0x01, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x33, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0a, 0xe8, 0xc7, 0x31, 0x01, 0xfa, 0xc7, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x30, 0x2d, 0x36, 0x35,
	0x35, 0x33, 0x35, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0xd4, 0x01, 0x0a, 0x10, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01,
	0x52, 0x02, 0x64, 0x62, 0x12, 0x1a, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x21, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x33, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x30, 0x2d, 0x36, 0x35, 0x35, 0x33, 0x35, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x1a, 0xc5, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x02, 0x64, 0x62, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7,
	0x31, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe8, 0xc7,
	0x31, 0x01, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x33, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x30, 0x2d, 0x36, 0x35, 0x35, 0x33, 0x35, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0xcd, 0x03, 0x0a, 0x10, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52,
	0x02, 0x64, 0x62, 0x12, 0x1a, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06,
	0x82, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xfa, 0xc7, 0x31,
	0x07, 0x30, 0x2d, 0x36, 0x35, 0x35, 0x33, 0x35, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7,
	0x31, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x7e, 0x0a, 0x08, 0x73, 0x73, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x63, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53,
	0x73, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x73, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0x67, 0x0a, 0x07, 0x53, 0x73, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x53,
	0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x59, 0x5f, 0x43, 0x41, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x05, 0x1a, 0xd7, 0x07, 0x0a, 0x09, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x67, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x57, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x6a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x7b, 0x0a, 0x09, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x08,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x7b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x08, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x86, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x06, 0x82, 0xc8, 0x31, 0x02,
	0x3e, 0x30, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xc0,
	0x01, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x1a, 0x1e, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x8e, 0x01, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x86, 0x01, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x06,
	0x82, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x1a, 0x9e, 0x02, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x70, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x22, 0x7e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48,
	0x41, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x58, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x41, 0x43, 0x48,
	0x45, 0x10, 0x06, 0x1a, 0x2b, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x42, 0x10, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x04, 0xc0, 0xc1,
	0x31, 0x01, 0x42, 0x0e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x04, 0xc0, 0xc1,
	0x31, 0x01, 0x1a, 0xb1, 0x03, 0x0a, 0x0e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x72, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x42, 0x06, 0x82, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x73, 0x1a, 0x90, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x20, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7e, 0x0a, 0x09, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x6c, 0x75, 0x70, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x82, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x09,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4b, 0x0a, 0x09, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x06, 0xfa, 0xc7, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x06, 0xfa, 0xc7, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55,
	0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x22, 0xb9, 0x02, 0x0a,
	0x13, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x12, 0x68, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x81, 0x01, 0x0a, 0x29, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x3b, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescData = file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDesc
)

func file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescData
}

var file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_goTypes = []interface{}{
	(ClickhouseConfig_LogLevel)(0),                                    // 0: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel
	(ClickhouseConfig_Kafka_SecurityProtocol)(0),                      // 1: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.SecurityProtocol
	(ClickhouseConfig_Kafka_SaslMechanism)(0),                         // 2: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.SaslMechanism
	(ClickhouseConfig_Compression_Method)(0),                          // 3: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method
	(ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode)(0), // 4: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode
	(ClickhouseConfig_ExternalDictionary_Layout_Type)(0),              // 5: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type
	(*ClickhouseConfig)(nil),                                          // 6: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig
	(*ClickhouseConfigSet)(nil),                                       // 7: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet
	(*ClickhouseConfig_MergeTree)(nil),                                // 8: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree
	(*ClickhouseConfig_Kafka)(nil),                                    // 9: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka
	(*ClickhouseConfig_KafkaTopic)(nil),                               // 10: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.KafkaTopic
	(*ClickhouseConfig_Rabbitmq)(nil),                                 // 11: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Rabbitmq
	(*ClickhouseConfig_Compression)(nil),                              // 12: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression
	(*ClickhouseConfig_ExternalDictionary)(nil),                       // 13: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary
	(*ClickhouseConfig_GraphiteRollup)(nil),                           // 14: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup
	(*ClickhouseConfig_ExternalDictionary_HttpSource)(nil),            // 15: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource
	(*ClickhouseConfig_ExternalDictionary_MysqlSource)(nil),           // 16: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource
	(*ClickhouseConfig_ExternalDictionary_ClickhouseSource)(nil),      // 17: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource
	(*ClickhouseConfig_ExternalDictionary_MongodbSource)(nil),         // 18: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource
	(*ClickhouseConfig_ExternalDictionary_PostgresqlSource)(nil),      // 19: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource
	(*ClickhouseConfig_ExternalDictionary_Structure)(nil),             // 20: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure
	(*ClickhouseConfig_ExternalDictionary_Layout)(nil),                // 21: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout
	(*ClickhouseConfig_ExternalDictionary_Range)(nil),                 // 22: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range
	(*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica)(nil),   // 23: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica
	(*ClickhouseConfig_ExternalDictionary_Structure_Attribute)(nil),   // 24: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute
	(*ClickhouseConfig_ExternalDictionary_Structure_Id)(nil),          // 25: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id
	(*ClickhouseConfig_ExternalDictionary_Structure_Key)(nil),         // 26: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key
	(*ClickhouseConfig_GraphiteRollup_Pattern)(nil),                   // 27: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern
	(*ClickhouseConfig_GraphiteRollup_Pattern_Retention)(nil),         // 28: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention
	(*wrapperspb.Int64Value)(nil),                                     // 29: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),                                      // 30: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_depIdxs = []int32{
	0,  // 0: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.log_level:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel
	8,  // 1: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.merge_tree:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree
	12, // 2: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.compression:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression
	13, // 3: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.dictionaries:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary
	14, // 4: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.graphite_rollup:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup
	9,  // 5: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.kafka:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka
	10, // 6: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.kafka_topics:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.KafkaTopic
	11, // 7: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.rabbitmq:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Rabbitmq
	29, // 8: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.max_connections:type_name -> google.protobuf.Int64Value
	29, // 9: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.max_concurrent_queries:type_name -> google.protobuf.Int64Value
	29, // 10: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.keep_alive_timeout:type_name -> google.protobuf.Int64Value
	29, // 11: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.uncompressed_cache_size:type_name -> google.protobuf.Int64Value
	29, // 12: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.mark_cache_size:type_name -> google.protobuf.Int64Value
	29, // 13: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.max_table_size_to_drop:type_name -> google.protobuf.Int64Value
	29, // 14: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.max_partition_size_to_drop:type_name -> google.protobuf.Int64Value
	29, // 15: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.builtin_dictionaries_reload_interval:type_name -> google.protobuf.Int64Value
	29, // 16: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_log_retention_size:type_name -> google.protobuf.Int64Value
	29, // 17: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_log_retention_time:type_name -> google.protobuf.Int64Value
	30, // 18: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_thread_log_enabled:type_name -> google.protobuf.BoolValue
	29, // 19: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_thread_log_retention_size:type_name -> google.protobuf.Int64Value
	29, // 20: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_thread_log_retention_time:type_name -> google.protobuf.Int64Value
	29, // 21: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.part_log_retention_size:type_name -> google.protobuf.Int64Value
	29, // 22: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.part_log_retention_time:type_name -> google.protobuf.Int64Value
	30, // 23: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.metric_log_enabled:type_name -> google.protobuf.BoolValue
	29, // 24: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.metric_log_retention_size:type_name -> google.protobuf.Int64Value
	29, // 25: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.metric_log_retention_time:type_name -> google.protobuf.Int64Value
	30, // 26: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.trace_log_enabled:type_name -> google.protobuf.BoolValue
	29, // 27: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.trace_log_retention_size:type_name -> google.protobuf.Int64Value
	29, // 28: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.trace_log_retention_time:type_name -> google.protobuf.Int64Value
	30, // 29: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.text_log_enabled:type_name -> google.protobuf.BoolValue
	29, // 30: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.text_log_retention_size:type_name -> google.protobuf.Int64Value
	29, // 31: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.text_log_retention_time:type_name -> google.protobuf.Int64Value
	0,  // 32: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.text_log_level:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel
	29, // 33: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.background_pool_size:type_name -> google.protobuf.Int64Value
	29, // 34: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.background_schedule_pool_size:type_name -> google.protobuf.Int64Value
	6,  // 35: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet.effective_config:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig
	6,  // 36: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet.user_config:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig
	6,  // 37: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet.default_config:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig
	29, // 38: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.replicated_deduplication_window:type_name -> google.protobuf.Int64Value
	29, // 39: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.replicated_deduplication_window_seconds:type_name -> google.protobuf.Int64Value
	29, // 40: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.parts_to_delay_insert:type_name -> google.protobuf.Int64Value
	29, // 41: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.parts_to_throw_insert:type_name -> google.protobuf.Int64Value
	29, // 42: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.max_replicated_merges_in_queue:type_name -> google.protobuf.Int64Value
	29, // 43: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.number_of_free_entries_in_pool_to_lower_max_size_of_merge:type_name -> google.protobuf.Int64Value
	29, // 44: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.max_bytes_to_merge_at_min_space_in_pool:type_name -> google.protobuf.Int64Value
	29, // 45: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.max_bytes_to_merge_at_max_space_in_pool:type_name -> google.protobuf.Int64Value
	1,  // 46: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.security_protocol:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.SecurityProtocol
	2,  // 47: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.sasl_mechanism:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.SaslMechanism
	9,  // 48: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.KafkaTopic.settings:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka
	3,  // 49: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.method:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method
	20, // 50: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.structure:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure
	21, // 51: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.layout:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout
	22, // 52: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.lifetime_range:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range
	15, // 53: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.http_source:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource
	16, // 54: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.mysql_source:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource
	17, // 55: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.clickhouse_source:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource
	18, // 56: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.mongodb_source:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource
	19, // 57: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.postgresql_source:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource
	27, // 58: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.patterns:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern
	23, // 59: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.replicas:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica
	4,  // 60: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.ssl_mode:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode
	25, // 61: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.id:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id
	26, // 62: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.key:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key
	24, // 63: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.range_min:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute
	24, // 64: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.range_max:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute
	24, // 65: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.attributes:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute
	5,  // 66: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.type:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type
	24, // 67: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key.attributes:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute
	28, // 68: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.retention:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention
	69, // [69:69] is the sub-list for method output_type
	69, // [69:69] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_init() }
func file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_init() {
	if File_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfigSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_MergeTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_Kafka); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_KafkaTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_Rabbitmq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_Compression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_GraphiteRollup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary_HttpSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary_MysqlSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary_ClickhouseSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary_MongodbSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary_PostgresqlSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary_Structure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary_Layout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary_Structure_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary_Structure_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_ExternalDictionary_Structure_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_GraphiteRollup_Pattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConfig_GraphiteRollup_Pattern_Retention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ClickhouseConfig_ExternalDictionary_FixedLifetime)(nil),
		(*ClickhouseConfig_ExternalDictionary_LifetimeRange)(nil),
		(*ClickhouseConfig_ExternalDictionary_HttpSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_MysqlSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_ClickhouseSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_MongodbSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_PostgresqlSource_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto = out.File
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDesc = nil
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_goTypes = nil
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_depIdxs = nil
}
