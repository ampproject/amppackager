// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: yandex/cloud/mdb/kafka/v1/topic.proto

package kafka

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopicConfig2_1_CleanupPolicy int32

const (
	TopicConfig2_1_CLEANUP_POLICY_UNSPECIFIED TopicConfig2_1_CleanupPolicy = 0
	// this policy discards log segments when either their retention time or log size limit is reached. See also: [KafkaConfig2_1.log_retention_ms] and other similar parameters.
	TopicConfig2_1_CLEANUP_POLICY_DELETE TopicConfig2_1_CleanupPolicy = 1
	// this policy compacts messages in log.
	TopicConfig2_1_CLEANUP_POLICY_COMPACT TopicConfig2_1_CleanupPolicy = 2
	// this policy use both compaction and deletion for messages and log segments.
	TopicConfig2_1_CLEANUP_POLICY_COMPACT_AND_DELETE TopicConfig2_1_CleanupPolicy = 3
)

// Enum value maps for TopicConfig2_1_CleanupPolicy.
var (
	TopicConfig2_1_CleanupPolicy_name = map[int32]string{
		0: "CLEANUP_POLICY_UNSPECIFIED",
		1: "CLEANUP_POLICY_DELETE",
		2: "CLEANUP_POLICY_COMPACT",
		3: "CLEANUP_POLICY_COMPACT_AND_DELETE",
	}
	TopicConfig2_1_CleanupPolicy_value = map[string]int32{
		"CLEANUP_POLICY_UNSPECIFIED":        0,
		"CLEANUP_POLICY_DELETE":             1,
		"CLEANUP_POLICY_COMPACT":            2,
		"CLEANUP_POLICY_COMPACT_AND_DELETE": 3,
	}
)

func (x TopicConfig2_1_CleanupPolicy) Enum() *TopicConfig2_1_CleanupPolicy {
	p := new(TopicConfig2_1_CleanupPolicy)
	*p = x
	return p
}

func (x TopicConfig2_1_CleanupPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicConfig2_1_CleanupPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_enumTypes[0].Descriptor()
}

func (TopicConfig2_1_CleanupPolicy) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_kafka_v1_topic_proto_enumTypes[0]
}

func (x TopicConfig2_1_CleanupPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicConfig2_1_CleanupPolicy.Descriptor instead.
func (TopicConfig2_1_CleanupPolicy) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescGZIP(), []int{2, 0}
}

type TopicConfig2_6_CleanupPolicy int32

const (
	TopicConfig2_6_CLEANUP_POLICY_UNSPECIFIED TopicConfig2_6_CleanupPolicy = 0
	// this policy discards log segments when either their retention time or log size limit is reached. See also: [KafkaConfig2_1.log_retention_ms] and other similar parameters.
	TopicConfig2_6_CLEANUP_POLICY_DELETE TopicConfig2_6_CleanupPolicy = 1
	// this policy compacts messages in log.
	TopicConfig2_6_CLEANUP_POLICY_COMPACT TopicConfig2_6_CleanupPolicy = 2
	// this policy use both compaction and deletion for messages and log segments.
	TopicConfig2_6_CLEANUP_POLICY_COMPACT_AND_DELETE TopicConfig2_6_CleanupPolicy = 3
)

// Enum value maps for TopicConfig2_6_CleanupPolicy.
var (
	TopicConfig2_6_CleanupPolicy_name = map[int32]string{
		0: "CLEANUP_POLICY_UNSPECIFIED",
		1: "CLEANUP_POLICY_DELETE",
		2: "CLEANUP_POLICY_COMPACT",
		3: "CLEANUP_POLICY_COMPACT_AND_DELETE",
	}
	TopicConfig2_6_CleanupPolicy_value = map[string]int32{
		"CLEANUP_POLICY_UNSPECIFIED":        0,
		"CLEANUP_POLICY_DELETE":             1,
		"CLEANUP_POLICY_COMPACT":            2,
		"CLEANUP_POLICY_COMPACT_AND_DELETE": 3,
	}
)

func (x TopicConfig2_6_CleanupPolicy) Enum() *TopicConfig2_6_CleanupPolicy {
	p := new(TopicConfig2_6_CleanupPolicy)
	*p = x
	return p
}

func (x TopicConfig2_6_CleanupPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicConfig2_6_CleanupPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_enumTypes[1].Descriptor()
}

func (TopicConfig2_6_CleanupPolicy) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_kafka_v1_topic_proto_enumTypes[1]
}

func (x TopicConfig2_6_CleanupPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicConfig2_6_CleanupPolicy.Descriptor instead.
func (TopicConfig2_6_CleanupPolicy) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescGZIP(), []int{3, 0}
}

type TopicConfig2_8_CleanupPolicy int32

const (
	TopicConfig2_8_CLEANUP_POLICY_UNSPECIFIED TopicConfig2_8_CleanupPolicy = 0
	// this policy discards log segments when either their retention time or log size limit is reached. See also: [KafkaConfig2_1.log_retention_ms] and other similar parameters.
	TopicConfig2_8_CLEANUP_POLICY_DELETE TopicConfig2_8_CleanupPolicy = 1
	// this policy compacts messages in log.
	TopicConfig2_8_CLEANUP_POLICY_COMPACT TopicConfig2_8_CleanupPolicy = 2
	// this policy use both compaction and deletion for messages and log segments.
	TopicConfig2_8_CLEANUP_POLICY_COMPACT_AND_DELETE TopicConfig2_8_CleanupPolicy = 3
)

// Enum value maps for TopicConfig2_8_CleanupPolicy.
var (
	TopicConfig2_8_CleanupPolicy_name = map[int32]string{
		0: "CLEANUP_POLICY_UNSPECIFIED",
		1: "CLEANUP_POLICY_DELETE",
		2: "CLEANUP_POLICY_COMPACT",
		3: "CLEANUP_POLICY_COMPACT_AND_DELETE",
	}
	TopicConfig2_8_CleanupPolicy_value = map[string]int32{
		"CLEANUP_POLICY_UNSPECIFIED":        0,
		"CLEANUP_POLICY_DELETE":             1,
		"CLEANUP_POLICY_COMPACT":            2,
		"CLEANUP_POLICY_COMPACT_AND_DELETE": 3,
	}
)

func (x TopicConfig2_8_CleanupPolicy) Enum() *TopicConfig2_8_CleanupPolicy {
	p := new(TopicConfig2_8_CleanupPolicy)
	*p = x
	return p
}

func (x TopicConfig2_8_CleanupPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicConfig2_8_CleanupPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_enumTypes[2].Descriptor()
}

func (TopicConfig2_8_CleanupPolicy) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_kafka_v1_topic_proto_enumTypes[2]
}

func (x TopicConfig2_8_CleanupPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicConfig2_8_CleanupPolicy.Descriptor instead.
func (TopicConfig2_8_CleanupPolicy) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescGZIP(), []int{4, 0}
}

type TopicConfig3_CleanupPolicy int32

const (
	TopicConfig3_CLEANUP_POLICY_UNSPECIFIED TopicConfig3_CleanupPolicy = 0
	// this policy discards log segments when either their retention time or log size limit is reached. See also: [KafkaConfig3.log_retention_ms] and other similar parameters.
	TopicConfig3_CLEANUP_POLICY_DELETE TopicConfig3_CleanupPolicy = 1
	// this policy compacts messages in log.
	TopicConfig3_CLEANUP_POLICY_COMPACT TopicConfig3_CleanupPolicy = 2
	// this policy use both compaction and deletion for messages and log segments.
	TopicConfig3_CLEANUP_POLICY_COMPACT_AND_DELETE TopicConfig3_CleanupPolicy = 3
)

// Enum value maps for TopicConfig3_CleanupPolicy.
var (
	TopicConfig3_CleanupPolicy_name = map[int32]string{
		0: "CLEANUP_POLICY_UNSPECIFIED",
		1: "CLEANUP_POLICY_DELETE",
		2: "CLEANUP_POLICY_COMPACT",
		3: "CLEANUP_POLICY_COMPACT_AND_DELETE",
	}
	TopicConfig3_CleanupPolicy_value = map[string]int32{
		"CLEANUP_POLICY_UNSPECIFIED":        0,
		"CLEANUP_POLICY_DELETE":             1,
		"CLEANUP_POLICY_COMPACT":            2,
		"CLEANUP_POLICY_COMPACT_AND_DELETE": 3,
	}
)

func (x TopicConfig3_CleanupPolicy) Enum() *TopicConfig3_CleanupPolicy {
	p := new(TopicConfig3_CleanupPolicy)
	*p = x
	return p
}

func (x TopicConfig3_CleanupPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicConfig3_CleanupPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_enumTypes[3].Descriptor()
}

func (TopicConfig3_CleanupPolicy) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_kafka_v1_topic_proto_enumTypes[3]
}

func (x TopicConfig3_CleanupPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicConfig3_CleanupPolicy.Descriptor instead.
func (TopicConfig3_CleanupPolicy) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescGZIP(), []int{5, 0}
}

// An Kafka topic.
// For more information, see the [Concepts -> Topics and partitions](/docs/managed-kafka/concepts/topics) section of the documentation.
type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the topic.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of an Apache Kafka® cluster that the topic belongs to.
	//
	// To get the Apache Kafka® cluster ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The number of the topic's partitions.
	Partitions *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=partitions,proto3" json:"partitions,omitempty"`
	// Amount of data copies (replicas) for the topic in the cluster.
	ReplicationFactor *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	// User-defined settings for the topic.
	//
	// Types that are assignable to TopicConfig:
	//	*Topic_TopicConfig_2_1
	//	*Topic_TopicConfig_2_6
	//	*Topic_TopicConfig_2_8
	//	*Topic_TopicConfig_3
	TopicConfig isTopic_TopicConfig `protobuf_oneof:"topic_config"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescGZIP(), []int{0}
}

func (x *Topic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Topic) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Topic) GetPartitions() *wrapperspb.Int64Value {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *Topic) GetReplicationFactor() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicationFactor
	}
	return nil
}

func (m *Topic) GetTopicConfig() isTopic_TopicConfig {
	if m != nil {
		return m.TopicConfig
	}
	return nil
}

func (x *Topic) GetTopicConfig_2_1() *TopicConfig2_1 {
	if x, ok := x.GetTopicConfig().(*Topic_TopicConfig_2_1); ok {
		return x.TopicConfig_2_1
	}
	return nil
}

func (x *Topic) GetTopicConfig_2_6() *TopicConfig2_6 {
	if x, ok := x.GetTopicConfig().(*Topic_TopicConfig_2_6); ok {
		return x.TopicConfig_2_6
	}
	return nil
}

func (x *Topic) GetTopicConfig_2_8() *TopicConfig2_8 {
	if x, ok := x.GetTopicConfig().(*Topic_TopicConfig_2_8); ok {
		return x.TopicConfig_2_8
	}
	return nil
}

func (x *Topic) GetTopicConfig_3() *TopicConfig3 {
	if x, ok := x.GetTopicConfig().(*Topic_TopicConfig_3); ok {
		return x.TopicConfig_3
	}
	return nil
}

type isTopic_TopicConfig interface {
	isTopic_TopicConfig()
}

type Topic_TopicConfig_2_1 struct {
	TopicConfig_2_1 *TopicConfig2_1 `protobuf:"bytes,5,opt,name=topic_config_2_1,json=topicConfig_2_1,proto3,oneof"`
}

type Topic_TopicConfig_2_6 struct {
	TopicConfig_2_6 *TopicConfig2_6 `protobuf:"bytes,6,opt,name=topic_config_2_6,json=topicConfig_2_6,proto3,oneof"`
}

type Topic_TopicConfig_2_8 struct {
	TopicConfig_2_8 *TopicConfig2_8 `protobuf:"bytes,7,opt,name=topic_config_2_8,json=topicConfig_2_8,proto3,oneof"`
}

type Topic_TopicConfig_3 struct {
	TopicConfig_3 *TopicConfig3 `protobuf:"bytes,8,opt,name=topic_config_3,json=topicConfig_3,proto3,oneof"`
}

func (*Topic_TopicConfig_2_1) isTopic_TopicConfig() {}

func (*Topic_TopicConfig_2_6) isTopic_TopicConfig() {}

func (*Topic_TopicConfig_2_8) isTopic_TopicConfig() {}

func (*Topic_TopicConfig_3) isTopic_TopicConfig() {}

type TopicSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the topic.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The number of the topic's partitions.
	Partitions *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=partitions,proto3" json:"partitions,omitempty"`
	// Amount of copies of a topic data kept in the cluster.
	ReplicationFactor *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	// User-defined settings for the topic.
	//
	// Types that are assignable to TopicConfig:
	//	*TopicSpec_TopicConfig_2_1
	//	*TopicSpec_TopicConfig_2_6
	//	*TopicSpec_TopicConfig_2_8
	//	*TopicSpec_TopicConfig_3
	TopicConfig isTopicSpec_TopicConfig `protobuf_oneof:"topic_config"`
}

func (x *TopicSpec) Reset() {
	*x = TopicSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicSpec) ProtoMessage() {}

func (x *TopicSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicSpec.ProtoReflect.Descriptor instead.
func (*TopicSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescGZIP(), []int{1}
}

func (x *TopicSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopicSpec) GetPartitions() *wrapperspb.Int64Value {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *TopicSpec) GetReplicationFactor() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicationFactor
	}
	return nil
}

func (m *TopicSpec) GetTopicConfig() isTopicSpec_TopicConfig {
	if m != nil {
		return m.TopicConfig
	}
	return nil
}

func (x *TopicSpec) GetTopicConfig_2_1() *TopicConfig2_1 {
	if x, ok := x.GetTopicConfig().(*TopicSpec_TopicConfig_2_1); ok {
		return x.TopicConfig_2_1
	}
	return nil
}

func (x *TopicSpec) GetTopicConfig_2_6() *TopicConfig2_6 {
	if x, ok := x.GetTopicConfig().(*TopicSpec_TopicConfig_2_6); ok {
		return x.TopicConfig_2_6
	}
	return nil
}

func (x *TopicSpec) GetTopicConfig_2_8() *TopicConfig2_8 {
	if x, ok := x.GetTopicConfig().(*TopicSpec_TopicConfig_2_8); ok {
		return x.TopicConfig_2_8
	}
	return nil
}

func (x *TopicSpec) GetTopicConfig_3() *TopicConfig3 {
	if x, ok := x.GetTopicConfig().(*TopicSpec_TopicConfig_3); ok {
		return x.TopicConfig_3
	}
	return nil
}

type isTopicSpec_TopicConfig interface {
	isTopicSpec_TopicConfig()
}

type TopicSpec_TopicConfig_2_1 struct {
	TopicConfig_2_1 *TopicConfig2_1 `protobuf:"bytes,4,opt,name=topic_config_2_1,json=topicConfig_2_1,proto3,oneof"`
}

type TopicSpec_TopicConfig_2_6 struct {
	TopicConfig_2_6 *TopicConfig2_6 `protobuf:"bytes,5,opt,name=topic_config_2_6,json=topicConfig_2_6,proto3,oneof"`
}

type TopicSpec_TopicConfig_2_8 struct {
	TopicConfig_2_8 *TopicConfig2_8 `protobuf:"bytes,6,opt,name=topic_config_2_8,json=topicConfig_2_8,proto3,oneof"`
}

type TopicSpec_TopicConfig_3 struct {
	TopicConfig_3 *TopicConfig3 `protobuf:"bytes,7,opt,name=topic_config_3,json=topicConfig_3,proto3,oneof"`
}

func (*TopicSpec_TopicConfig_2_1) isTopicSpec_TopicConfig() {}

func (*TopicSpec_TopicConfig_2_6) isTopicSpec_TopicConfig() {}

func (*TopicSpec_TopicConfig_2_8) isTopicSpec_TopicConfig() {}

func (*TopicSpec_TopicConfig_3) isTopicSpec_TopicConfig() {}

// A topic settings for 2.1.
type TopicConfig2_1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retention policy to use on old log messages.
	CleanupPolicy TopicConfig2_1_CleanupPolicy `protobuf:"varint,1,opt,name=cleanup_policy,json=cleanupPolicy,proto3,enum=yandex.cloud.mdb.kafka.v1.TopicConfig2_1_CleanupPolicy" json:"cleanup_policy,omitempty"`
	// The compression type for a given topic.
	CompressionType CompressionType `protobuf:"varint,2,opt,name=compression_type,json=compressionType,proto3,enum=yandex.cloud.mdb.kafka.v1.CompressionType" json:"compression_type,omitempty"`
	// The amount of time in milliseconds to retain delete tombstone markers for log compacted topics.
	DeleteRetentionMs *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=delete_retention_ms,json=deleteRetentionMs,proto3" json:"delete_retention_ms,omitempty"`
	// The time to wait before deleting a file from the filesystem.
	FileDeleteDelayMs *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=file_delete_delay_ms,json=fileDeleteDelayMs,proto3" json:"file_delete_delay_ms,omitempty"`
	// The number of messages accumulated on a log partition before messages are flushed to disk.
	//
	// This setting overrides the cluster-level [KafkaConfig2_1.log_flush_interval_messages] setting on the topic level.
	FlushMessages *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=flush_messages,json=flushMessages,proto3" json:"flush_messages,omitempty"`
	// The maximum time in milliseconds that a message in the topic is kept in memory before flushed to disk.
	//
	// This setting overrides the cluster-level [KafkaConfig2_1.log_flush_interval_ms] setting on the topic level.
	FlushMs *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=flush_ms,json=flushMs,proto3" json:"flush_ms,omitempty"`
	// The minimum time in milliseconds a message will remain uncompacted in the log.
	MinCompactionLagMs *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=min_compaction_lag_ms,json=minCompactionLagMs,proto3" json:"min_compaction_lag_ms,omitempty"`
	// The maximum size a partition can grow to before Kafka will discard old log segments to free up space if the `delete` [cleanup_policy] is in effect.
	// It is helpful if you need to control the size of log due to limited disk space.
	//
	// This setting overrides the cluster-level [KafkaConfig2_1.log_retention_bytes] setting on the topic level.
	RetentionBytes *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=retention_bytes,json=retentionBytes,proto3" json:"retention_bytes,omitempty"`
	// The number of milliseconds to keep a log segment's file before deleting it.
	//
	// This setting overrides the cluster-level [KafkaConfig2_1.log_retention_ms] setting on the topic level.
	RetentionMs *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=retention_ms,json=retentionMs,proto3" json:"retention_ms,omitempty"`
	// The largest record batch size allowed in topic.
	MaxMessageBytes *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=max_message_bytes,json=maxMessageBytes,proto3" json:"max_message_bytes,omitempty"`
	// This configuration specifies the minimum number of replicas that must acknowledge a write to topic for the write
	// to be considered successful (when a producer sets acks to "all").
	MinInsyncReplicas *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=min_insync_replicas,json=minInsyncReplicas,proto3" json:"min_insync_replicas,omitempty"`
	// This configuration controls the segment file size for the log. Retention and cleaning is always done a file
	// at a time so a larger segment size means fewer files but less granular control over retention.
	//
	// This setting overrides the cluster-level [KafkaConfig2_1.log_segment_bytes] setting on the topic level.
	SegmentBytes *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=segment_bytes,json=segmentBytes,proto3" json:"segment_bytes,omitempty"`
	// True if we should preallocate the file on disk when creating a new log segment.
	//
	// This setting overrides the cluster-level [KafkaConfig2_1.log_preallocate] setting on the topic level.
	Preallocate *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=preallocate,proto3" json:"preallocate,omitempty"`
}

func (x *TopicConfig2_1) Reset() {
	*x = TopicConfig2_1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicConfig2_1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicConfig2_1) ProtoMessage() {}

func (x *TopicConfig2_1) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicConfig2_1.ProtoReflect.Descriptor instead.
func (*TopicConfig2_1) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescGZIP(), []int{2}
}

func (x *TopicConfig2_1) GetCleanupPolicy() TopicConfig2_1_CleanupPolicy {
	if x != nil {
		return x.CleanupPolicy
	}
	return TopicConfig2_1_CLEANUP_POLICY_UNSPECIFIED
}

func (x *TopicConfig2_1) GetCompressionType() CompressionType {
	if x != nil {
		return x.CompressionType
	}
	return CompressionType_COMPRESSION_TYPE_UNSPECIFIED
}

func (x *TopicConfig2_1) GetDeleteRetentionMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.DeleteRetentionMs
	}
	return nil
}

func (x *TopicConfig2_1) GetFileDeleteDelayMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.FileDeleteDelayMs
	}
	return nil
}

func (x *TopicConfig2_1) GetFlushMessages() *wrapperspb.Int64Value {
	if x != nil {
		return x.FlushMessages
	}
	return nil
}

func (x *TopicConfig2_1) GetFlushMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.FlushMs
	}
	return nil
}

func (x *TopicConfig2_1) GetMinCompactionLagMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinCompactionLagMs
	}
	return nil
}

func (x *TopicConfig2_1) GetRetentionBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.RetentionBytes
	}
	return nil
}

func (x *TopicConfig2_1) GetRetentionMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.RetentionMs
	}
	return nil
}

func (x *TopicConfig2_1) GetMaxMessageBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxMessageBytes
	}
	return nil
}

func (x *TopicConfig2_1) GetMinInsyncReplicas() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinInsyncReplicas
	}
	return nil
}

func (x *TopicConfig2_1) GetSegmentBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.SegmentBytes
	}
	return nil
}

func (x *TopicConfig2_1) GetPreallocate() *wrapperspb.BoolValue {
	if x != nil {
		return x.Preallocate
	}
	return nil
}

// A topic settings for 2.6
type TopicConfig2_6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retention policy to use on old log messages.
	CleanupPolicy TopicConfig2_6_CleanupPolicy `protobuf:"varint,1,opt,name=cleanup_policy,json=cleanupPolicy,proto3,enum=yandex.cloud.mdb.kafka.v1.TopicConfig2_6_CleanupPolicy" json:"cleanup_policy,omitempty"`
	// The compression type for a given topic.
	CompressionType CompressionType `protobuf:"varint,2,opt,name=compression_type,json=compressionType,proto3,enum=yandex.cloud.mdb.kafka.v1.CompressionType" json:"compression_type,omitempty"`
	// The amount of time in milliseconds to retain delete tombstone markers for log compacted topics.
	DeleteRetentionMs *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=delete_retention_ms,json=deleteRetentionMs,proto3" json:"delete_retention_ms,omitempty"`
	// The time to wait before deleting a file from the filesystem.
	FileDeleteDelayMs *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=file_delete_delay_ms,json=fileDeleteDelayMs,proto3" json:"file_delete_delay_ms,omitempty"`
	// The number of messages accumulated on a log partition before messages are flushed to disk.
	//
	// This setting overrides the cluster-level [KafkaConfig2_6.log_flush_interval_messages] setting on the topic level.
	FlushMessages *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=flush_messages,json=flushMessages,proto3" json:"flush_messages,omitempty"`
	// The maximum time in milliseconds that a message in the topic is kept in memory before flushed to disk.
	//
	// This setting overrides the cluster-level [KafkaConfig2_6.log_flush_interval_ms] setting on the topic level.
	FlushMs *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=flush_ms,json=flushMs,proto3" json:"flush_ms,omitempty"`
	// The minimum time in milliseconds a message will remain uncompacted in the log.
	MinCompactionLagMs *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=min_compaction_lag_ms,json=minCompactionLagMs,proto3" json:"min_compaction_lag_ms,omitempty"`
	// The maximum size a partition can grow to before Kafka will discard old log segments to free up space if the `delete` [cleanup_policy] is in effect.
	// It is helpful if you need to control the size of log due to limited disk space.
	//
	// This setting overrides the cluster-level [KafkaConfig2_6.log_retention_bytes] setting on the topic level.
	RetentionBytes *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=retention_bytes,json=retentionBytes,proto3" json:"retention_bytes,omitempty"`
	// The number of milliseconds to keep a log segment's file before deleting it.
	//
	// This setting overrides the cluster-level [KafkaConfig2_6.log_retention_ms] setting on the topic level.
	RetentionMs *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=retention_ms,json=retentionMs,proto3" json:"retention_ms,omitempty"`
	// The largest record batch size allowed in topic.
	MaxMessageBytes *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=max_message_bytes,json=maxMessageBytes,proto3" json:"max_message_bytes,omitempty"`
	// This configuration specifies the minimum number of replicas that must acknowledge a write to topic for the write
	// to be considered successful (when a producer sets acks to "all").
	MinInsyncReplicas *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=min_insync_replicas,json=minInsyncReplicas,proto3" json:"min_insync_replicas,omitempty"`
	// This configuration controls the segment file size for the log. Retention and cleaning is always done a file
	// at a time so a larger segment size means fewer files but less granular control over retention.
	//
	// This setting overrides the cluster-level [KafkaConfig2_6.log_segment_bytes] setting on the topic level.
	SegmentBytes *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=segment_bytes,json=segmentBytes,proto3" json:"segment_bytes,omitempty"`
	// True if we should preallocate the file on disk when creating a new log segment.
	//
	// This setting overrides the cluster-level [KafkaConfig2_6.log_preallocate] setting on the topic level.
	Preallocate *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=preallocate,proto3" json:"preallocate,omitempty"`
}

func (x *TopicConfig2_6) Reset() {
	*x = TopicConfig2_6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicConfig2_6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicConfig2_6) ProtoMessage() {}

func (x *TopicConfig2_6) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicConfig2_6.ProtoReflect.Descriptor instead.
func (*TopicConfig2_6) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescGZIP(), []int{3}
}

func (x *TopicConfig2_6) GetCleanupPolicy() TopicConfig2_6_CleanupPolicy {
	if x != nil {
		return x.CleanupPolicy
	}
	return TopicConfig2_6_CLEANUP_POLICY_UNSPECIFIED
}

func (x *TopicConfig2_6) GetCompressionType() CompressionType {
	if x != nil {
		return x.CompressionType
	}
	return CompressionType_COMPRESSION_TYPE_UNSPECIFIED
}

func (x *TopicConfig2_6) GetDeleteRetentionMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.DeleteRetentionMs
	}
	return nil
}

func (x *TopicConfig2_6) GetFileDeleteDelayMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.FileDeleteDelayMs
	}
	return nil
}

func (x *TopicConfig2_6) GetFlushMessages() *wrapperspb.Int64Value {
	if x != nil {
		return x.FlushMessages
	}
	return nil
}

func (x *TopicConfig2_6) GetFlushMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.FlushMs
	}
	return nil
}

func (x *TopicConfig2_6) GetMinCompactionLagMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinCompactionLagMs
	}
	return nil
}

func (x *TopicConfig2_6) GetRetentionBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.RetentionBytes
	}
	return nil
}

func (x *TopicConfig2_6) GetRetentionMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.RetentionMs
	}
	return nil
}

func (x *TopicConfig2_6) GetMaxMessageBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxMessageBytes
	}
	return nil
}

func (x *TopicConfig2_6) GetMinInsyncReplicas() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinInsyncReplicas
	}
	return nil
}

func (x *TopicConfig2_6) GetSegmentBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.SegmentBytes
	}
	return nil
}

func (x *TopicConfig2_6) GetPreallocate() *wrapperspb.BoolValue {
	if x != nil {
		return x.Preallocate
	}
	return nil
}

// A topic settings for 2.8
type TopicConfig2_8 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retention policy to use on old log messages.
	CleanupPolicy TopicConfig2_8_CleanupPolicy `protobuf:"varint,1,opt,name=cleanup_policy,json=cleanupPolicy,proto3,enum=yandex.cloud.mdb.kafka.v1.TopicConfig2_8_CleanupPolicy" json:"cleanup_policy,omitempty"`
	// The compression type for a given topic.
	CompressionType CompressionType `protobuf:"varint,2,opt,name=compression_type,json=compressionType,proto3,enum=yandex.cloud.mdb.kafka.v1.CompressionType" json:"compression_type,omitempty"`
	// The amount of time in milliseconds to retain delete tombstone markers for log compacted topics.
	DeleteRetentionMs *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=delete_retention_ms,json=deleteRetentionMs,proto3" json:"delete_retention_ms,omitempty"`
	// The time to wait before deleting a file from the filesystem.
	FileDeleteDelayMs *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=file_delete_delay_ms,json=fileDeleteDelayMs,proto3" json:"file_delete_delay_ms,omitempty"`
	// The number of messages accumulated on a log partition before messages are flushed to disk.
	//
	// This setting overrides the cluster-level [KafkaConfig2_8.log_flush_interval_messages] setting on the topic level.
	FlushMessages *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=flush_messages,json=flushMessages,proto3" json:"flush_messages,omitempty"`
	// The maximum time in milliseconds that a message in the topic is kept in memory before flushed to disk.
	//
	// This setting overrides the cluster-level [KafkaConfig2_8.log_flush_interval_ms] setting on the topic level.
	FlushMs *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=flush_ms,json=flushMs,proto3" json:"flush_ms,omitempty"`
	// The minimum time in milliseconds a message will remain uncompacted in the log.
	MinCompactionLagMs *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=min_compaction_lag_ms,json=minCompactionLagMs,proto3" json:"min_compaction_lag_ms,omitempty"`
	// The maximum size a partition can grow to before Kafka will discard old log segments to free up space if the `delete` [cleanup_policy] is in effect.
	// It is helpful if you need to control the size of log due to limited disk space.
	//
	// This setting overrides the cluster-level [KafkaConfig2_8.log_retention_bytes] setting on the topic level.
	RetentionBytes *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=retention_bytes,json=retentionBytes,proto3" json:"retention_bytes,omitempty"`
	// The number of milliseconds to keep a log segment's file before deleting it.
	//
	// This setting overrides the cluster-level [KafkaConfig2_8.log_retention_ms] setting on the topic level.
	RetentionMs *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=retention_ms,json=retentionMs,proto3" json:"retention_ms,omitempty"`
	// The largest record batch size allowed in topic.
	MaxMessageBytes *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=max_message_bytes,json=maxMessageBytes,proto3" json:"max_message_bytes,omitempty"`
	// This configuration specifies the minimum number of replicas that must acknowledge a write to topic for the write
	// to be considered successful (when a producer sets acks to "all").
	MinInsyncReplicas *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=min_insync_replicas,json=minInsyncReplicas,proto3" json:"min_insync_replicas,omitempty"`
	// This configuration controls the segment file size for the log. Retention and cleaning is always done a file
	// at a time so a larger segment size means fewer files but less granular control over retention.
	//
	// This setting overrides the cluster-level [KafkaConfig2_8.log_segment_bytes] setting on the topic level.
	SegmentBytes *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=segment_bytes,json=segmentBytes,proto3" json:"segment_bytes,omitempty"`
	// True if we should preallocate the file on disk when creating a new log segment.
	//
	// This setting overrides the cluster-level [KafkaConfig2_8.log_preallocate] setting on the topic level.
	Preallocate *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=preallocate,proto3" json:"preallocate,omitempty"`
}

func (x *TopicConfig2_8) Reset() {
	*x = TopicConfig2_8{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicConfig2_8) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicConfig2_8) ProtoMessage() {}

func (x *TopicConfig2_8) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicConfig2_8.ProtoReflect.Descriptor instead.
func (*TopicConfig2_8) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescGZIP(), []int{4}
}

func (x *TopicConfig2_8) GetCleanupPolicy() TopicConfig2_8_CleanupPolicy {
	if x != nil {
		return x.CleanupPolicy
	}
	return TopicConfig2_8_CLEANUP_POLICY_UNSPECIFIED
}

func (x *TopicConfig2_8) GetCompressionType() CompressionType {
	if x != nil {
		return x.CompressionType
	}
	return CompressionType_COMPRESSION_TYPE_UNSPECIFIED
}

func (x *TopicConfig2_8) GetDeleteRetentionMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.DeleteRetentionMs
	}
	return nil
}

func (x *TopicConfig2_8) GetFileDeleteDelayMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.FileDeleteDelayMs
	}
	return nil
}

func (x *TopicConfig2_8) GetFlushMessages() *wrapperspb.Int64Value {
	if x != nil {
		return x.FlushMessages
	}
	return nil
}

func (x *TopicConfig2_8) GetFlushMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.FlushMs
	}
	return nil
}

func (x *TopicConfig2_8) GetMinCompactionLagMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinCompactionLagMs
	}
	return nil
}

func (x *TopicConfig2_8) GetRetentionBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.RetentionBytes
	}
	return nil
}

func (x *TopicConfig2_8) GetRetentionMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.RetentionMs
	}
	return nil
}

func (x *TopicConfig2_8) GetMaxMessageBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxMessageBytes
	}
	return nil
}

func (x *TopicConfig2_8) GetMinInsyncReplicas() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinInsyncReplicas
	}
	return nil
}

func (x *TopicConfig2_8) GetSegmentBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.SegmentBytes
	}
	return nil
}

func (x *TopicConfig2_8) GetPreallocate() *wrapperspb.BoolValue {
	if x != nil {
		return x.Preallocate
	}
	return nil
}

// A topic settings for 3.x
type TopicConfig3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retention policy to use on old log messages.
	CleanupPolicy TopicConfig3_CleanupPolicy `protobuf:"varint,1,opt,name=cleanup_policy,json=cleanupPolicy,proto3,enum=yandex.cloud.mdb.kafka.v1.TopicConfig3_CleanupPolicy" json:"cleanup_policy,omitempty"`
	// The compression type for a given topic.
	CompressionType CompressionType `protobuf:"varint,2,opt,name=compression_type,json=compressionType,proto3,enum=yandex.cloud.mdb.kafka.v1.CompressionType" json:"compression_type,omitempty"`
	// The amount of time in milliseconds to retain delete tombstone markers for log compacted topics.
	DeleteRetentionMs *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=delete_retention_ms,json=deleteRetentionMs,proto3" json:"delete_retention_ms,omitempty"`
	// The time to wait before deleting a file from the filesystem.
	FileDeleteDelayMs *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=file_delete_delay_ms,json=fileDeleteDelayMs,proto3" json:"file_delete_delay_ms,omitempty"`
	// The number of messages accumulated on a log partition before messages are flushed to disk.
	//
	// This setting overrides the cluster-level [KafkaConfig3.log_flush_interval_messages] setting on the topic level.
	FlushMessages *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=flush_messages,json=flushMessages,proto3" json:"flush_messages,omitempty"`
	// The maximum time in milliseconds that a message in the topic is kept in memory before flushed to disk.
	//
	// This setting overrides the cluster-level [KafkaConfig3.log_flush_interval_ms] setting on the topic level.
	FlushMs *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=flush_ms,json=flushMs,proto3" json:"flush_ms,omitempty"`
	// The minimum time in milliseconds a message will remain uncompacted in the log.
	MinCompactionLagMs *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=min_compaction_lag_ms,json=minCompactionLagMs,proto3" json:"min_compaction_lag_ms,omitempty"`
	// The maximum size a partition can grow to before Kafka will discard old log segments to free up space if the `delete` [cleanup_policy] is in effect.
	// It is helpful if you need to control the size of log due to limited disk space.
	//
	// This setting overrides the cluster-level [KafkaConfig3.log_retention_bytes] setting on the topic level.
	RetentionBytes *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=retention_bytes,json=retentionBytes,proto3" json:"retention_bytes,omitempty"`
	// The number of milliseconds to keep a log segment's file before deleting it.
	//
	// This setting overrides the cluster-level [KafkaConfig3.log_retention_ms] setting on the topic level.
	RetentionMs *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=retention_ms,json=retentionMs,proto3" json:"retention_ms,omitempty"`
	// The largest record batch size allowed in topic.
	MaxMessageBytes *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=max_message_bytes,json=maxMessageBytes,proto3" json:"max_message_bytes,omitempty"`
	// This configuration specifies the minimum number of replicas that must acknowledge a write to topic for the write
	// to be considered successful (when a producer sets acks to "all").
	MinInsyncReplicas *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=min_insync_replicas,json=minInsyncReplicas,proto3" json:"min_insync_replicas,omitempty"`
	// This configuration controls the segment file size for the log. Retention and cleaning is always done a file
	// at a time so a larger segment size means fewer files but less granular control over retention.
	//
	// This setting overrides the cluster-level [KafkaConfig3.log_segment_bytes] setting on the topic level.
	SegmentBytes *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=segment_bytes,json=segmentBytes,proto3" json:"segment_bytes,omitempty"`
	// True if we should preallocate the file on disk when creating a new log segment.
	//
	// This setting overrides the cluster-level [KafkaConfig3.log_preallocate] setting on the topic level.
	Preallocate *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=preallocate,proto3" json:"preallocate,omitempty"`
}

func (x *TopicConfig3) Reset() {
	*x = TopicConfig3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicConfig3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicConfig3) ProtoMessage() {}

func (x *TopicConfig3) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicConfig3.ProtoReflect.Descriptor instead.
func (*TopicConfig3) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescGZIP(), []int{5}
}

func (x *TopicConfig3) GetCleanupPolicy() TopicConfig3_CleanupPolicy {
	if x != nil {
		return x.CleanupPolicy
	}
	return TopicConfig3_CLEANUP_POLICY_UNSPECIFIED
}

func (x *TopicConfig3) GetCompressionType() CompressionType {
	if x != nil {
		return x.CompressionType
	}
	return CompressionType_COMPRESSION_TYPE_UNSPECIFIED
}

func (x *TopicConfig3) GetDeleteRetentionMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.DeleteRetentionMs
	}
	return nil
}

func (x *TopicConfig3) GetFileDeleteDelayMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.FileDeleteDelayMs
	}
	return nil
}

func (x *TopicConfig3) GetFlushMessages() *wrapperspb.Int64Value {
	if x != nil {
		return x.FlushMessages
	}
	return nil
}

func (x *TopicConfig3) GetFlushMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.FlushMs
	}
	return nil
}

func (x *TopicConfig3) GetMinCompactionLagMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinCompactionLagMs
	}
	return nil
}

func (x *TopicConfig3) GetRetentionBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.RetentionBytes
	}
	return nil
}

func (x *TopicConfig3) GetRetentionMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.RetentionMs
	}
	return nil
}

func (x *TopicConfig3) GetMaxMessageBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxMessageBytes
	}
	return nil
}

func (x *TopicConfig3) GetMinInsyncReplicas() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinInsyncReplicas
	}
	return nil
}

func (x *TopicConfig3) GetSegmentBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.SegmentBytes
	}
	return nil
}

func (x *TopicConfig3) GetPreallocate() *wrapperspb.BoolValue {
	if x != nil {
		return x.Preallocate
	}
	return nil
}

var File_yandex_cloud_mdb_kafka_v1_topic_proto protoreflect.FileDescriptor

var file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDesc = []byte{
	0x0a, 0x25, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x04, 0x0a, 0x05, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x56, 0x0a, 0x10, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x32, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x32, 0x5f, 0x31, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x32, 0x5f, 0x31, 0x12, 0x56, 0x0a, 0x10, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x32, 0x5f, 0x36, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x5f, 0x36, 0x48, 0x00, 0x52,
	0x0f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x32, 0x5f, 0x36,
	0x12, 0x56, 0x0a, 0x10, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x32, 0x5f, 0x38, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x32, 0x5f, 0x38, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x32, 0x5f, 0x38, 0x12, 0x50, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x33, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x33, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x92, 0x04, 0x0a, 0x09, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x10, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x32, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x5f, 0x31, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x32, 0x5f, 0x31, 0x12, 0x56, 0x0a,
	0x10, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x32, 0x5f,
	0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32,
	0x5f, 0x36, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x32, 0x5f, 0x36, 0x12, 0x56, 0x0a, 0x10, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x32, 0x5f, 0x38, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x5f, 0x38, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x32, 0x5f, 0x38, 0x12, 0x50, 0x0a,
	0x0e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x33, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x33, 0x48, 0x00,
	0x52, 0x0d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x33, 0x42,
	0x0e, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xda, 0x08, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32,
	0x5f, 0x31, 0x12, 0x5e, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x32, 0x5f, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x4d, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x73,
	0x12, 0x4e, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x69,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x67, 0x4d, 0x73,
	0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x4b, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x49, 0x6e,
	0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x40, 0x0a, 0x0d,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a,
	0x0d, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x45,
	0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22, 0xda, 0x08, 0x0a,
	0x0e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x5f, 0x36, 0x12,
	0x5e, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32,
	0x5f, 0x36, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x55, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x73, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x12, 0x4e, 0x0a,
	0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x67, 0x4d, 0x73, 0x12, 0x44, 0x0a,
	0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x13,
	0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55,
	0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54,
	0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22, 0xda, 0x08, 0x0a, 0x0e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x5f, 0x38, 0x12, 0x5e, 0x0a, 0x0e,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x5f, 0x38, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x55, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x12, 0x4c, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x6d, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x67,
	0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x67, 0x4d, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x12, 0x47, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x6d, 0x69, 0x6e,
	0x5f, 0x69, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x45, 0x41,
	0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x45, 0x41,
	0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12,
	0x25, 0x0a, 0x21, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22, 0xd6, 0x08, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x33, 0x12, 0x5c, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x33, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x13,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x66,
	0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x4d, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61,
	0x67, 0x4d, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x61, 0x78,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x69,
	0x6e, 0x49, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x40, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4c, 0x45, 0x41,
	0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x43, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x42,
	0x64, 0x0a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31,
	0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x3b,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescData = file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDesc
)

func file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescData)
	})
	return file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDescData
}

var file_yandex_cloud_mdb_kafka_v1_topic_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_yandex_cloud_mdb_kafka_v1_topic_proto_goTypes = []interface{}{
	(TopicConfig2_1_CleanupPolicy)(0), // 0: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.CleanupPolicy
	(TopicConfig2_6_CleanupPolicy)(0), // 1: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.CleanupPolicy
	(TopicConfig2_8_CleanupPolicy)(0), // 2: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.CleanupPolicy
	(TopicConfig3_CleanupPolicy)(0),   // 3: yandex.cloud.mdb.kafka.v1.TopicConfig3.CleanupPolicy
	(*Topic)(nil),                     // 4: yandex.cloud.mdb.kafka.v1.Topic
	(*TopicSpec)(nil),                 // 5: yandex.cloud.mdb.kafka.v1.TopicSpec
	(*TopicConfig2_1)(nil),            // 6: yandex.cloud.mdb.kafka.v1.TopicConfig2_1
	(*TopicConfig2_6)(nil),            // 7: yandex.cloud.mdb.kafka.v1.TopicConfig2_6
	(*TopicConfig2_8)(nil),            // 8: yandex.cloud.mdb.kafka.v1.TopicConfig2_8
	(*TopicConfig3)(nil),              // 9: yandex.cloud.mdb.kafka.v1.TopicConfig3
	(*wrapperspb.Int64Value)(nil),     // 10: google.protobuf.Int64Value
	(CompressionType)(0),              // 11: yandex.cloud.mdb.kafka.v1.CompressionType
	(*wrapperspb.BoolValue)(nil),      // 12: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_kafka_v1_topic_proto_depIdxs = []int32{
	10, // 0: yandex.cloud.mdb.kafka.v1.Topic.partitions:type_name -> google.protobuf.Int64Value
	10, // 1: yandex.cloud.mdb.kafka.v1.Topic.replication_factor:type_name -> google.protobuf.Int64Value
	6,  // 2: yandex.cloud.mdb.kafka.v1.Topic.topic_config_2_1:type_name -> yandex.cloud.mdb.kafka.v1.TopicConfig2_1
	7,  // 3: yandex.cloud.mdb.kafka.v1.Topic.topic_config_2_6:type_name -> yandex.cloud.mdb.kafka.v1.TopicConfig2_6
	8,  // 4: yandex.cloud.mdb.kafka.v1.Topic.topic_config_2_8:type_name -> yandex.cloud.mdb.kafka.v1.TopicConfig2_8
	9,  // 5: yandex.cloud.mdb.kafka.v1.Topic.topic_config_3:type_name -> yandex.cloud.mdb.kafka.v1.TopicConfig3
	10, // 6: yandex.cloud.mdb.kafka.v1.TopicSpec.partitions:type_name -> google.protobuf.Int64Value
	10, // 7: yandex.cloud.mdb.kafka.v1.TopicSpec.replication_factor:type_name -> google.protobuf.Int64Value
	6,  // 8: yandex.cloud.mdb.kafka.v1.TopicSpec.topic_config_2_1:type_name -> yandex.cloud.mdb.kafka.v1.TopicConfig2_1
	7,  // 9: yandex.cloud.mdb.kafka.v1.TopicSpec.topic_config_2_6:type_name -> yandex.cloud.mdb.kafka.v1.TopicConfig2_6
	8,  // 10: yandex.cloud.mdb.kafka.v1.TopicSpec.topic_config_2_8:type_name -> yandex.cloud.mdb.kafka.v1.TopicConfig2_8
	9,  // 11: yandex.cloud.mdb.kafka.v1.TopicSpec.topic_config_3:type_name -> yandex.cloud.mdb.kafka.v1.TopicConfig3
	0,  // 12: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.cleanup_policy:type_name -> yandex.cloud.mdb.kafka.v1.TopicConfig2_1.CleanupPolicy
	11, // 13: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.compression_type:type_name -> yandex.cloud.mdb.kafka.v1.CompressionType
	10, // 14: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.delete_retention_ms:type_name -> google.protobuf.Int64Value
	10, // 15: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.file_delete_delay_ms:type_name -> google.protobuf.Int64Value
	10, // 16: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.flush_messages:type_name -> google.protobuf.Int64Value
	10, // 17: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.flush_ms:type_name -> google.protobuf.Int64Value
	10, // 18: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.min_compaction_lag_ms:type_name -> google.protobuf.Int64Value
	10, // 19: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.retention_bytes:type_name -> google.protobuf.Int64Value
	10, // 20: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.retention_ms:type_name -> google.protobuf.Int64Value
	10, // 21: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.max_message_bytes:type_name -> google.protobuf.Int64Value
	10, // 22: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.min_insync_replicas:type_name -> google.protobuf.Int64Value
	10, // 23: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.segment_bytes:type_name -> google.protobuf.Int64Value
	12, // 24: yandex.cloud.mdb.kafka.v1.TopicConfig2_1.preallocate:type_name -> google.protobuf.BoolValue
	1,  // 25: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.cleanup_policy:type_name -> yandex.cloud.mdb.kafka.v1.TopicConfig2_6.CleanupPolicy
	11, // 26: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.compression_type:type_name -> yandex.cloud.mdb.kafka.v1.CompressionType
	10, // 27: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.delete_retention_ms:type_name -> google.protobuf.Int64Value
	10, // 28: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.file_delete_delay_ms:type_name -> google.protobuf.Int64Value
	10, // 29: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.flush_messages:type_name -> google.protobuf.Int64Value
	10, // 30: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.flush_ms:type_name -> google.protobuf.Int64Value
	10, // 31: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.min_compaction_lag_ms:type_name -> google.protobuf.Int64Value
	10, // 32: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.retention_bytes:type_name -> google.protobuf.Int64Value
	10, // 33: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.retention_ms:type_name -> google.protobuf.Int64Value
	10, // 34: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.max_message_bytes:type_name -> google.protobuf.Int64Value
	10, // 35: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.min_insync_replicas:type_name -> google.protobuf.Int64Value
	10, // 36: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.segment_bytes:type_name -> google.protobuf.Int64Value
	12, // 37: yandex.cloud.mdb.kafka.v1.TopicConfig2_6.preallocate:type_name -> google.protobuf.BoolValue
	2,  // 38: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.cleanup_policy:type_name -> yandex.cloud.mdb.kafka.v1.TopicConfig2_8.CleanupPolicy
	11, // 39: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.compression_type:type_name -> yandex.cloud.mdb.kafka.v1.CompressionType
	10, // 40: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.delete_retention_ms:type_name -> google.protobuf.Int64Value
	10, // 41: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.file_delete_delay_ms:type_name -> google.protobuf.Int64Value
	10, // 42: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.flush_messages:type_name -> google.protobuf.Int64Value
	10, // 43: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.flush_ms:type_name -> google.protobuf.Int64Value
	10, // 44: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.min_compaction_lag_ms:type_name -> google.protobuf.Int64Value
	10, // 45: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.retention_bytes:type_name -> google.protobuf.Int64Value
	10, // 46: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.retention_ms:type_name -> google.protobuf.Int64Value
	10, // 47: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.max_message_bytes:type_name -> google.protobuf.Int64Value
	10, // 48: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.min_insync_replicas:type_name -> google.protobuf.Int64Value
	10, // 49: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.segment_bytes:type_name -> google.protobuf.Int64Value
	12, // 50: yandex.cloud.mdb.kafka.v1.TopicConfig2_8.preallocate:type_name -> google.protobuf.BoolValue
	3,  // 51: yandex.cloud.mdb.kafka.v1.TopicConfig3.cleanup_policy:type_name -> yandex.cloud.mdb.kafka.v1.TopicConfig3.CleanupPolicy
	11, // 52: yandex.cloud.mdb.kafka.v1.TopicConfig3.compression_type:type_name -> yandex.cloud.mdb.kafka.v1.CompressionType
	10, // 53: yandex.cloud.mdb.kafka.v1.TopicConfig3.delete_retention_ms:type_name -> google.protobuf.Int64Value
	10, // 54: yandex.cloud.mdb.kafka.v1.TopicConfig3.file_delete_delay_ms:type_name -> google.protobuf.Int64Value
	10, // 55: yandex.cloud.mdb.kafka.v1.TopicConfig3.flush_messages:type_name -> google.protobuf.Int64Value
	10, // 56: yandex.cloud.mdb.kafka.v1.TopicConfig3.flush_ms:type_name -> google.protobuf.Int64Value
	10, // 57: yandex.cloud.mdb.kafka.v1.TopicConfig3.min_compaction_lag_ms:type_name -> google.protobuf.Int64Value
	10, // 58: yandex.cloud.mdb.kafka.v1.TopicConfig3.retention_bytes:type_name -> google.protobuf.Int64Value
	10, // 59: yandex.cloud.mdb.kafka.v1.TopicConfig3.retention_ms:type_name -> google.protobuf.Int64Value
	10, // 60: yandex.cloud.mdb.kafka.v1.TopicConfig3.max_message_bytes:type_name -> google.protobuf.Int64Value
	10, // 61: yandex.cloud.mdb.kafka.v1.TopicConfig3.min_insync_replicas:type_name -> google.protobuf.Int64Value
	10, // 62: yandex.cloud.mdb.kafka.v1.TopicConfig3.segment_bytes:type_name -> google.protobuf.Int64Value
	12, // 63: yandex.cloud.mdb.kafka.v1.TopicConfig3.preallocate:type_name -> google.protobuf.BoolValue
	64, // [64:64] is the sub-list for method output_type
	64, // [64:64] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_kafka_v1_topic_proto_init() }
func file_yandex_cloud_mdb_kafka_v1_topic_proto_init() {
	if File_yandex_cloud_mdb_kafka_v1_topic_proto != nil {
		return
	}
	file_yandex_cloud_mdb_kafka_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicConfig2_1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicConfig2_6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicConfig2_8); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicConfig3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Topic_TopicConfig_2_1)(nil),
		(*Topic_TopicConfig_2_6)(nil),
		(*Topic_TopicConfig_2_8)(nil),
		(*Topic_TopicConfig_3)(nil),
	}
	file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TopicSpec_TopicConfig_2_1)(nil),
		(*TopicSpec_TopicConfig_2_6)(nil),
		(*TopicSpec_TopicConfig_2_8)(nil),
		(*TopicSpec_TopicConfig_3)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_kafka_v1_topic_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_kafka_v1_topic_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_kafka_v1_topic_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_kafka_v1_topic_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_kafka_v1_topic_proto = out.File
	file_yandex_cloud_mdb_kafka_v1_topic_proto_rawDesc = nil
	file_yandex_cloud_mdb_kafka_v1_topic_proto_goTypes = nil
	file_yandex_cloud_mdb_kafka_v1_topic_proto_depIdxs = nil
}
