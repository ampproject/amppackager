// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yandex/cloud/endpoint/api_endpoint_service.proto

package endpoint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiEndpointServiceClient is the client API for ApiEndpointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiEndpointServiceClient interface {
	Get(ctx context.Context, in *GetApiEndpointRequest, opts ...grpc.CallOption) (*ApiEndpoint, error)
	List(ctx context.Context, in *ListApiEndpointsRequest, opts ...grpc.CallOption) (*ListApiEndpointsResponse, error)
}

type apiEndpointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiEndpointServiceClient(cc grpc.ClientConnInterface) ApiEndpointServiceClient {
	return &apiEndpointServiceClient{cc}
}

func (c *apiEndpointServiceClient) Get(ctx context.Context, in *GetApiEndpointRequest, opts ...grpc.CallOption) (*ApiEndpoint, error) {
	out := new(ApiEndpoint)
	err := c.cc.Invoke(ctx, "/yandex.cloud.endpoint.ApiEndpointService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiEndpointServiceClient) List(ctx context.Context, in *ListApiEndpointsRequest, opts ...grpc.CallOption) (*ListApiEndpointsResponse, error) {
	out := new(ListApiEndpointsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.endpoint.ApiEndpointService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiEndpointServiceServer is the server API for ApiEndpointService service.
// All implementations should embed UnimplementedApiEndpointServiceServer
// for forward compatibility
type ApiEndpointServiceServer interface {
	Get(context.Context, *GetApiEndpointRequest) (*ApiEndpoint, error)
	List(context.Context, *ListApiEndpointsRequest) (*ListApiEndpointsResponse, error)
}

// UnimplementedApiEndpointServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApiEndpointServiceServer struct {
}

func (UnimplementedApiEndpointServiceServer) Get(context.Context, *GetApiEndpointRequest) (*ApiEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApiEndpointServiceServer) List(context.Context, *ListApiEndpointsRequest) (*ListApiEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeApiEndpointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiEndpointServiceServer will
// result in compilation errors.
type UnsafeApiEndpointServiceServer interface {
	mustEmbedUnimplementedApiEndpointServiceServer()
}

func RegisterApiEndpointServiceServer(s grpc.ServiceRegistrar, srv ApiEndpointServiceServer) {
	s.RegisterService(&ApiEndpointService_ServiceDesc, srv)
}

func _ApiEndpointService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiEndpointServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.endpoint.ApiEndpointService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiEndpointServiceServer).Get(ctx, req.(*GetApiEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiEndpointService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApiEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiEndpointServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.endpoint.ApiEndpointService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiEndpointServiceServer).List(ctx, req.(*ListApiEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiEndpointService_ServiceDesc is the grpc.ServiceDesc for ApiEndpointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiEndpointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.endpoint.ApiEndpointService",
	HandlerType: (*ApiEndpointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ApiEndpointService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApiEndpointService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/endpoint/api_endpoint_service.proto",
}
