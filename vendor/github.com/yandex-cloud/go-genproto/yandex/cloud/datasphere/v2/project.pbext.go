// Code generated by protoc-gen-goext. DO NOT EDIT.

package datasphere

import (
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

func (m *Project) SetId(v string) {
	m.Id = v
}

func (m *Project) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *Project) SetName(v string) {
	m.Name = v
}

func (m *Project) SetDescription(v string) {
	m.Description = v
}

func (m *Project) SetLabels(v map[string]string) {
	m.Labels = v
}

func (m *Project) SetCreatedById(v string) {
	m.CreatedById = v
}

func (m *Project) SetSettings(v *Project_Settings) {
	m.Settings = v
}

func (m *Project) SetLimits(v *Project_Limits) {
	m.Limits = v
}

func (m *Project) SetCommunityId(v string) {
	m.CommunityId = v
}

func (m *Project_Settings) SetServiceAccountId(v string) {
	m.ServiceAccountId = v
}

func (m *Project_Settings) SetSubnetId(v string) {
	m.SubnetId = v
}

func (m *Project_Settings) SetDataProcClusterId(v string) {
	m.DataProcClusterId = v
}

func (m *Project_Settings) SetCommitMode(v Project_Settings_CommitMode) {
	m.CommitMode = v
}

func (m *Project_Settings) SetSecurityGroupIds(v []string) {
	m.SecurityGroupIds = v
}

func (m *Project_Settings) SetEarlyAccess(v bool) {
	m.EarlyAccess = v
}

func (m *Project_Settings) SetIde(v Project_Settings_Ide) {
	m.Ide = v
}

func (m *Project_Settings) SetDefaultFolderId(v string) {
	m.DefaultFolderId = v
}

func (m *Project_Settings) SetStaleExecTimeoutMode(v Project_Settings_StaleExecutionTimeoutMode) {
	m.StaleExecTimeoutMode = v
}

func (m *Project_Settings) SetIdeExecutionMode(v Project_Settings_IdeExecutionMode) {
	m.IdeExecutionMode = v
}

func (m *Project_Settings) SetVmInactivityTimeout(v *durationpb.Duration) {
	m.VmInactivityTimeout = v
}

func (m *Project_Settings) SetDefaultDedicatedSpec(v string) {
	m.DefaultDedicatedSpec = v
}

func (m *Project_Limits) SetMaxUnitsPerHour(v *wrapperspb.Int64Value) {
	m.MaxUnitsPerHour = v
}

func (m *Project_Limits) SetMaxUnitsPerExecution(v *wrapperspb.Int64Value) {
	m.MaxUnitsPerExecution = v
}
