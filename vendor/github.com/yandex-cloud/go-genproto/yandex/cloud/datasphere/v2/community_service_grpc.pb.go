// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: yandex/cloud/datasphere/v2/community_service.proto

package datasphere

import (
	context "context"
	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommunityService_Create_FullMethodName               = "/yandex.cloud.datasphere.v2.CommunityService/Create"
	CommunityService_Get_FullMethodName                  = "/yandex.cloud.datasphere.v2.CommunityService/Get"
	CommunityService_Update_FullMethodName               = "/yandex.cloud.datasphere.v2.CommunityService/Update"
	CommunityService_Delete_FullMethodName               = "/yandex.cloud.datasphere.v2.CommunityService/Delete"
	CommunityService_List_FullMethodName                 = "/yandex.cloud.datasphere.v2.CommunityService/List"
	CommunityService_ListAccessBindings_FullMethodName   = "/yandex.cloud.datasphere.v2.CommunityService/ListAccessBindings"
	CommunityService_SetAccessBindings_FullMethodName    = "/yandex.cloud.datasphere.v2.CommunityService/SetAccessBindings"
	CommunityService_UpdateAccessBindings_FullMethodName = "/yandex.cloud.datasphere.v2.CommunityService/UpdateAccessBindings"
	CommunityService_AddResource_FullMethodName          = "/yandex.cloud.datasphere.v2.CommunityService/AddResource"
	CommunityService_RemoveResource_FullMethodName       = "/yandex.cloud.datasphere.v2.CommunityService/RemoveResource"
	CommunityService_GetRestrictionsMeta_FullMethodName  = "/yandex.cloud.datasphere.v2.CommunityService/GetRestrictionsMeta"
	CommunityService_GetRestrictions_FullMethodName      = "/yandex.cloud.datasphere.v2.CommunityService/GetRestrictions"
	CommunityService_SetRestrictions_FullMethodName      = "/yandex.cloud.datasphere.v2.CommunityService/SetRestrictions"
)

// CommunityServiceClient is the client API for CommunityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityServiceClient interface {
	// Creates community in specified organization.
	Create(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Returns community.
	Get(ctx context.Context, in *GetCommunityRequest, opts ...grpc.CallOption) (*Community, error)
	// Updates specified community.
	Update(ctx context.Context, in *UpdateCommunityRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes specified community.
	Delete(ctx context.Context, in *DeleteCommunityRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// List communities in specified organization.
	List(ctx context.Context, in *ListCommunitiesRequest, opts ...grpc.CallOption) (*ListCommunitiesResponse, error)
	// Lists access bindings for specified community.
	ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	// Sets access bindings for specified community.
	SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates access bindings for specified community.
	UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Adds shared resource to community
	AddResource(ctx context.Context, in *AddCommunityResourceRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Removes shared resource from community
	RemoveResource(ctx context.Context, in *RemoveCommunityResourceRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Get meta information about available restrictions.
	GetRestrictionsMeta(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRestrictionsMetaResponse, error)
	// Get current community restrictions.
	GetRestrictions(ctx context.Context, in *GetCommunityRestrictionsRequest, opts ...grpc.CallOption) (*RestrictionsResponse, error)
	// Set community restrictions.
	SetRestrictions(ctx context.Context, in *SetCommunityRestrictionsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type communityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityServiceClient(cc grpc.ClientConnInterface) CommunityServiceClient {
	return &communityServiceClient{cc}
}

func (c *communityServiceClient) Create(ctx context.Context, in *CreateCommunityRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, CommunityService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) Get(ctx context.Context, in *GetCommunityRequest, opts ...grpc.CallOption) (*Community, error) {
	out := new(Community)
	err := c.cc.Invoke(ctx, CommunityService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) Update(ctx context.Context, in *UpdateCommunityRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, CommunityService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) Delete(ctx context.Context, in *DeleteCommunityRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, CommunityService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) List(ctx context.Context, in *ListCommunitiesRequest, opts ...grpc.CallOption) (*ListCommunitiesResponse, error) {
	out := new(ListCommunitiesResponse)
	err := c.cc.Invoke(ctx, CommunityService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	out := new(access.ListAccessBindingsResponse)
	err := c.cc.Invoke(ctx, CommunityService_ListAccessBindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, CommunityService_SetAccessBindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, CommunityService_UpdateAccessBindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) AddResource(ctx context.Context, in *AddCommunityResourceRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, CommunityService_AddResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) RemoveResource(ctx context.Context, in *RemoveCommunityResourceRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, CommunityService_RemoveResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetRestrictionsMeta(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRestrictionsMetaResponse, error) {
	out := new(GetRestrictionsMetaResponse)
	err := c.cc.Invoke(ctx, CommunityService_GetRestrictionsMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) GetRestrictions(ctx context.Context, in *GetCommunityRestrictionsRequest, opts ...grpc.CallOption) (*RestrictionsResponse, error) {
	out := new(RestrictionsResponse)
	err := c.cc.Invoke(ctx, CommunityService_GetRestrictions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityServiceClient) SetRestrictions(ctx context.Context, in *SetCommunityRestrictionsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, CommunityService_SetRestrictions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServiceServer is the server API for CommunityService service.
// All implementations should embed UnimplementedCommunityServiceServer
// for forward compatibility
type CommunityServiceServer interface {
	// Creates community in specified organization.
	Create(context.Context, *CreateCommunityRequest) (*operation.Operation, error)
	// Returns community.
	Get(context.Context, *GetCommunityRequest) (*Community, error)
	// Updates specified community.
	Update(context.Context, *UpdateCommunityRequest) (*operation.Operation, error)
	// Deletes specified community.
	Delete(context.Context, *DeleteCommunityRequest) (*operation.Operation, error)
	// List communities in specified organization.
	List(context.Context, *ListCommunitiesRequest) (*ListCommunitiesResponse, error)
	// Lists access bindings for specified community.
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)
	// Sets access bindings for specified community.
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)
	// Updates access bindings for specified community.
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)
	// Adds shared resource to community
	AddResource(context.Context, *AddCommunityResourceRequest) (*operation.Operation, error)
	// Removes shared resource from community
	RemoveResource(context.Context, *RemoveCommunityResourceRequest) (*operation.Operation, error)
	// Get meta information about available restrictions.
	GetRestrictionsMeta(context.Context, *emptypb.Empty) (*GetRestrictionsMetaResponse, error)
	// Get current community restrictions.
	GetRestrictions(context.Context, *GetCommunityRestrictionsRequest) (*RestrictionsResponse, error)
	// Set community restrictions.
	SetRestrictions(context.Context, *SetCommunityRestrictionsRequest) (*operation.Operation, error)
}

// UnimplementedCommunityServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCommunityServiceServer struct {
}

func (UnimplementedCommunityServiceServer) Create(context.Context, *CreateCommunityRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCommunityServiceServer) Get(context.Context, *GetCommunityRequest) (*Community, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCommunityServiceServer) Update(context.Context, *UpdateCommunityRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCommunityServiceServer) Delete(context.Context, *DeleteCommunityRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCommunityServiceServer) List(context.Context, *ListCommunitiesRequest) (*ListCommunitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCommunityServiceServer) ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessBindings not implemented")
}
func (UnimplementedCommunityServiceServer) SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccessBindings not implemented")
}
func (UnimplementedCommunityServiceServer) UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessBindings not implemented")
}
func (UnimplementedCommunityServiceServer) AddResource(context.Context, *AddCommunityResourceRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResource not implemented")
}
func (UnimplementedCommunityServiceServer) RemoveResource(context.Context, *RemoveCommunityResourceRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResource not implemented")
}
func (UnimplementedCommunityServiceServer) GetRestrictionsMeta(context.Context, *emptypb.Empty) (*GetRestrictionsMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestrictionsMeta not implemented")
}
func (UnimplementedCommunityServiceServer) GetRestrictions(context.Context, *GetCommunityRestrictionsRequest) (*RestrictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestrictions not implemented")
}
func (UnimplementedCommunityServiceServer) SetRestrictions(context.Context, *SetCommunityRestrictionsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRestrictions not implemented")
}

// UnsafeCommunityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServiceServer will
// result in compilation errors.
type UnsafeCommunityServiceServer interface {
	mustEmbedUnimplementedCommunityServiceServer()
}

func RegisterCommunityServiceServer(s grpc.ServiceRegistrar, srv CommunityServiceServer) {
	s.RegisterService(&CommunityService_ServiceDesc, srv)
}

func _CommunityService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).Create(ctx, req.(*CreateCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).Get(ctx, req.(*GetCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).Update(ctx, req.(*UpdateCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).Delete(ctx, req.(*DeleteCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).List(ctx, req.(*ListCommunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_ListAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.ListAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).ListAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_ListAccessBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).ListAccessBindings(ctx, req.(*access.ListAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_SetAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.SetAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).SetAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_SetAccessBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).SetAccessBindings(ctx, req.(*access.SetAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_UpdateAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.UpdateAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).UpdateAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_UpdateAccessBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).UpdateAccessBindings(ctx, req.(*access.UpdateAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommunityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_AddResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).AddResource(ctx, req.(*AddCommunityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_RemoveResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCommunityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).RemoveResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_RemoveResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).RemoveResource(ctx, req.(*RemoveCommunityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetRestrictionsMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetRestrictionsMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetRestrictionsMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetRestrictionsMeta(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_GetRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).GetRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_GetRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).GetRestrictions(ctx, req.(*GetCommunityRestrictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunityService_SetRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCommunityRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServiceServer).SetRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommunityService_SetRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServiceServer).SetRestrictions(ctx, req.(*SetCommunityRestrictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunityService_ServiceDesc is the grpc.ServiceDesc for CommunityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.datasphere.v2.CommunityService",
	HandlerType: (*CommunityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CommunityService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CommunityService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CommunityService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CommunityService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CommunityService_List_Handler,
		},
		{
			MethodName: "ListAccessBindings",
			Handler:    _CommunityService_ListAccessBindings_Handler,
		},
		{
			MethodName: "SetAccessBindings",
			Handler:    _CommunityService_SetAccessBindings_Handler,
		},
		{
			MethodName: "UpdateAccessBindings",
			Handler:    _CommunityService_UpdateAccessBindings_Handler,
		},
		{
			MethodName: "AddResource",
			Handler:    _CommunityService_AddResource_Handler,
		},
		{
			MethodName: "RemoveResource",
			Handler:    _CommunityService_RemoveResource_Handler,
		},
		{
			MethodName: "GetRestrictionsMeta",
			Handler:    _CommunityService_GetRestrictionsMeta_Handler,
		},
		{
			MethodName: "GetRestrictions",
			Handler:    _CommunityService_GetRestrictions_Handler,
		},
		{
			MethodName: "SetRestrictions",
			Handler:    _CommunityService_SetRestrictions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/datasphere/v2/community_service.proto",
}
