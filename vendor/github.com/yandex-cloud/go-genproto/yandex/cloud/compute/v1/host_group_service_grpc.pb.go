// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yandex/cloud/compute/v1/host_group_service.proto

package compute

import (
	context "context"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HostGroupServiceClient is the client API for HostGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostGroupServiceClient interface {
	// Returns the specified host group.
	Get(ctx context.Context, in *GetHostGroupRequest, opts ...grpc.CallOption) (*HostGroup, error)
	// Retrieves the list of host groups in the specified folder.
	List(ctx context.Context, in *ListHostGroupsRequest, opts ...grpc.CallOption) (*ListHostGroupsResponse, error)
	// Creates a host group in the specified folder.
	Create(ctx context.Context, in *CreateHostGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates the specified host group.
	Update(ctx context.Context, in *UpdateHostGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified host group.
	Delete(ctx context.Context, in *DeleteHostGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Lists operations for the specified host group.
	ListOperations(ctx context.Context, in *ListHostGroupOperationsRequest, opts ...grpc.CallOption) (*ListHostGroupOperationsResponse, error)
	// Lists instances that belongs to the specified host group.
	ListInstances(ctx context.Context, in *ListHostGroupInstancesRequest, opts ...grpc.CallOption) (*ListHostGroupInstancesResponse, error)
	// Lists hosts that belongs to the specified host group.
	ListHosts(ctx context.Context, in *ListHostGroupHostsRequest, opts ...grpc.CallOption) (*ListHostGroupHostsResponse, error)
}

type hostGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostGroupServiceClient(cc grpc.ClientConnInterface) HostGroupServiceClient {
	return &hostGroupServiceClient{cc}
}

func (c *hostGroupServiceClient) Get(ctx context.Context, in *GetHostGroupRequest, opts ...grpc.CallOption) (*HostGroup, error) {
	out := new(HostGroup)
	err := c.cc.Invoke(ctx, "/yandex.cloud.compute.v1.HostGroupService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostGroupServiceClient) List(ctx context.Context, in *ListHostGroupsRequest, opts ...grpc.CallOption) (*ListHostGroupsResponse, error) {
	out := new(ListHostGroupsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.compute.v1.HostGroupService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostGroupServiceClient) Create(ctx context.Context, in *CreateHostGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.compute.v1.HostGroupService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostGroupServiceClient) Update(ctx context.Context, in *UpdateHostGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.compute.v1.HostGroupService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostGroupServiceClient) Delete(ctx context.Context, in *DeleteHostGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.compute.v1.HostGroupService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostGroupServiceClient) ListOperations(ctx context.Context, in *ListHostGroupOperationsRequest, opts ...grpc.CallOption) (*ListHostGroupOperationsResponse, error) {
	out := new(ListHostGroupOperationsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.compute.v1.HostGroupService/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostGroupServiceClient) ListInstances(ctx context.Context, in *ListHostGroupInstancesRequest, opts ...grpc.CallOption) (*ListHostGroupInstancesResponse, error) {
	out := new(ListHostGroupInstancesResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.compute.v1.HostGroupService/ListInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostGroupServiceClient) ListHosts(ctx context.Context, in *ListHostGroupHostsRequest, opts ...grpc.CallOption) (*ListHostGroupHostsResponse, error) {
	out := new(ListHostGroupHostsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.compute.v1.HostGroupService/ListHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostGroupServiceServer is the server API for HostGroupService service.
// All implementations should embed UnimplementedHostGroupServiceServer
// for forward compatibility
type HostGroupServiceServer interface {
	// Returns the specified host group.
	Get(context.Context, *GetHostGroupRequest) (*HostGroup, error)
	// Retrieves the list of host groups in the specified folder.
	List(context.Context, *ListHostGroupsRequest) (*ListHostGroupsResponse, error)
	// Creates a host group in the specified folder.
	Create(context.Context, *CreateHostGroupRequest) (*operation.Operation, error)
	// Updates the specified host group.
	Update(context.Context, *UpdateHostGroupRequest) (*operation.Operation, error)
	// Deletes the specified host group.
	Delete(context.Context, *DeleteHostGroupRequest) (*operation.Operation, error)
	// Lists operations for the specified host group.
	ListOperations(context.Context, *ListHostGroupOperationsRequest) (*ListHostGroupOperationsResponse, error)
	// Lists instances that belongs to the specified host group.
	ListInstances(context.Context, *ListHostGroupInstancesRequest) (*ListHostGroupInstancesResponse, error)
	// Lists hosts that belongs to the specified host group.
	ListHosts(context.Context, *ListHostGroupHostsRequest) (*ListHostGroupHostsResponse, error)
}

// UnimplementedHostGroupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHostGroupServiceServer struct {
}

func (UnimplementedHostGroupServiceServer) Get(context.Context, *GetHostGroupRequest) (*HostGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHostGroupServiceServer) List(context.Context, *ListHostGroupsRequest) (*ListHostGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedHostGroupServiceServer) Create(context.Context, *CreateHostGroupRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHostGroupServiceServer) Update(context.Context, *UpdateHostGroupRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHostGroupServiceServer) Delete(context.Context, *DeleteHostGroupRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHostGroupServiceServer) ListOperations(context.Context, *ListHostGroupOperationsRequest) (*ListHostGroupOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedHostGroupServiceServer) ListInstances(context.Context, *ListHostGroupInstancesRequest) (*ListHostGroupInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedHostGroupServiceServer) ListHosts(context.Context, *ListHostGroupHostsRequest) (*ListHostGroupHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHosts not implemented")
}

// UnsafeHostGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostGroupServiceServer will
// result in compilation errors.
type UnsafeHostGroupServiceServer interface {
	mustEmbedUnimplementedHostGroupServiceServer()
}

func RegisterHostGroupServiceServer(s grpc.ServiceRegistrar, srv HostGroupServiceServer) {
	s.RegisterService(&HostGroupService_ServiceDesc, srv)
}

func _HostGroupService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostGroupServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.compute.v1.HostGroupService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostGroupServiceServer).Get(ctx, req.(*GetHostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostGroupService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostGroupServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.compute.v1.HostGroupService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostGroupServiceServer).List(ctx, req.(*ListHostGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostGroupService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostGroupServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.compute.v1.HostGroupService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostGroupServiceServer).Create(ctx, req.(*CreateHostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostGroupService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostGroupServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.compute.v1.HostGroupService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostGroupServiceServer).Update(ctx, req.(*UpdateHostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostGroupService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostGroupServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.compute.v1.HostGroupService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostGroupServiceServer).Delete(ctx, req.(*DeleteHostGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostGroupService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostGroupOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostGroupServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.compute.v1.HostGroupService/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostGroupServiceServer).ListOperations(ctx, req.(*ListHostGroupOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostGroupService_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostGroupInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostGroupServiceServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.compute.v1.HostGroupService/ListInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostGroupServiceServer).ListInstances(ctx, req.(*ListHostGroupInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostGroupService_ListHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostGroupHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostGroupServiceServer).ListHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.compute.v1.HostGroupService/ListHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostGroupServiceServer).ListHosts(ctx, req.(*ListHostGroupHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostGroupService_ServiceDesc is the grpc.ServiceDesc for HostGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.compute.v1.HostGroupService",
	HandlerType: (*HostGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _HostGroupService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _HostGroupService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _HostGroupService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _HostGroupService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HostGroupService_Delete_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _HostGroupService_ListOperations_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _HostGroupService_ListInstances_Handler,
		},
		{
			MethodName: "ListHosts",
			Handler:    _HostGroupService_ListHosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/compute/v1/host_group_service.proto",
}
