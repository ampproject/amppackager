// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: yandex/cloud/compute/v1/instancegroup/instance_group.proto

package instancegroup

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpVersion int32

const (
	IpVersion_IP_VERSION_UNSPECIFIED IpVersion = 0
	// IPv4 address, for example 192.168.0.0.
	IpVersion_IPV4 IpVersion = 1
	// IPv6 address, not available yet.
	IpVersion_IPV6 IpVersion = 2
)

// Enum value maps for IpVersion.
var (
	IpVersion_name = map[int32]string{
		0: "IP_VERSION_UNSPECIFIED",
		1: "IPV4",
		2: "IPV6",
	}
	IpVersion_value = map[string]int32{
		"IP_VERSION_UNSPECIFIED": 0,
		"IPV4":                   1,
		"IPV6":                   2,
	}
)

func (x IpVersion) Enum() *IpVersion {
	p := new(IpVersion)
	*p = x
	return p
}

func (x IpVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[0].Descriptor()
}

func (IpVersion) Type() protoreflect.EnumType {
	return &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[0]
}

func (x IpVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpVersion.Descriptor instead.
func (IpVersion) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{0}
}

type InstanceGroup_Status int32

const (
	InstanceGroup_STATUS_UNSPECIFIED InstanceGroup_Status = 0
	// Instance group is being started and will become active soon.
	InstanceGroup_STARTING InstanceGroup_Status = 1
	// Instance group is active.
	// In this state the group manages its instances and monitors their health,
	// creating, deleting, stopping, updating and starting instances as needed.
	//
	// To stop the instance group, call [yandex.cloud.compute.v1.instancegroup.InstanceGroupService.Stop].
	// To pause the processes in the instance group, i.e. scaling, checking instances' health,
	// auto-healing and updating them, without stopping the instances,
	// call [yandex.cloud.compute.v1.instancegroup.InstanceGroupService.PauseProcesses].
	InstanceGroup_ACTIVE InstanceGroup_Status = 2
	// Instance group is being stopped.
	// Group's instances stop receiving traffic from the load balancer (if any) and are then stopped.
	InstanceGroup_STOPPING InstanceGroup_Status = 3
	// Instance group is stopped.
	// In this state the group cannot be updated and does not react to any changes made to its instances.
	// To start the instance group, call [yandex.cloud.compute.v1.instancegroup.InstanceGroupService.Start].
	InstanceGroup_STOPPED InstanceGroup_Status = 4
	// Instance group is being deleted.
	InstanceGroup_DELETING InstanceGroup_Status = 5
	// Instance group is paused.
	// In this state all the processes regarding the group management, i.e. scaling, checking instances' health,
	// auto-healing and updating them, are paused. The instances that were running prior to pausing the group, however,
	// may still be running.
	//
	// To resume the processes in the instance group,
	// call [yandex.cloud.compute.v1.instancegroup.InstanceGroupService.ResumeProcesses].
	// The group status will change to `ACTIVE`.
	InstanceGroup_PAUSED InstanceGroup_Status = 6
)

// Enum value maps for InstanceGroup_Status.
var (
	InstanceGroup_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STARTING",
		2: "ACTIVE",
		3: "STOPPING",
		4: "STOPPED",
		5: "DELETING",
		6: "PAUSED",
	}
	InstanceGroup_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STARTING":           1,
		"ACTIVE":             2,
		"STOPPING":           3,
		"STOPPED":            4,
		"DELETING":           5,
		"PAUSED":             6,
	}
)

func (x InstanceGroup_Status) Enum() *InstanceGroup_Status {
	p := new(InstanceGroup_Status)
	*p = x
	return p
}

func (x InstanceGroup_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceGroup_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[1].Descriptor()
}

func (InstanceGroup_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[1]
}

func (x InstanceGroup_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceGroup_Status.Descriptor instead.
func (InstanceGroup_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{0, 0}
}

type ScalePolicy_AutoScale_AutoScaleType int32

const (
	ScalePolicy_AutoScale_AUTO_SCALE_TYPE_UNSPECIFIED ScalePolicy_AutoScale_AutoScaleType = 0
	// Scale each zone independently. This is the default.
	ScalePolicy_AutoScale_ZONAL ScalePolicy_AutoScale_AutoScaleType = 1
	// Scale group as a whole.
	ScalePolicy_AutoScale_REGIONAL ScalePolicy_AutoScale_AutoScaleType = 2
)

// Enum value maps for ScalePolicy_AutoScale_AutoScaleType.
var (
	ScalePolicy_AutoScale_AutoScaleType_name = map[int32]string{
		0: "AUTO_SCALE_TYPE_UNSPECIFIED",
		1: "ZONAL",
		2: "REGIONAL",
	}
	ScalePolicy_AutoScale_AutoScaleType_value = map[string]int32{
		"AUTO_SCALE_TYPE_UNSPECIFIED": 0,
		"ZONAL":                       1,
		"REGIONAL":                    2,
	}
)

func (x ScalePolicy_AutoScale_AutoScaleType) Enum() *ScalePolicy_AutoScale_AutoScaleType {
	p := new(ScalePolicy_AutoScale_AutoScaleType)
	*p = x
	return p
}

func (x ScalePolicy_AutoScale_AutoScaleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalePolicy_AutoScale_AutoScaleType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[2].Descriptor()
}

func (ScalePolicy_AutoScale_AutoScaleType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[2]
}

func (x ScalePolicy_AutoScale_AutoScaleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScalePolicy_AutoScale_AutoScaleType.Descriptor instead.
func (ScalePolicy_AutoScale_AutoScaleType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{5, 0, 0}
}

type ScalePolicy_CustomRule_RuleType int32

const (
	ScalePolicy_CustomRule_RULE_TYPE_UNSPECIFIED ScalePolicy_CustomRule_RuleType = 0
	// This type means that the metric applies to one instance.
	// First, Instance Groups calculates the average metric value for each instance,
	// then averages the values for instances in one availability zone or in whole group depends on autoscaling type.
	// This type of metric must have the `instance_id` label.
	ScalePolicy_CustomRule_UTILIZATION ScalePolicy_CustomRule_RuleType = 1
	// This type means that the metric applies to instances in one availability zone or to whole group depends on autoscaling type.
	// This type of metric must have the `zone_id` label if ZONAL autoscaling type is chosen.
	ScalePolicy_CustomRule_WORKLOAD ScalePolicy_CustomRule_RuleType = 2
)

// Enum value maps for ScalePolicy_CustomRule_RuleType.
var (
	ScalePolicy_CustomRule_RuleType_name = map[int32]string{
		0: "RULE_TYPE_UNSPECIFIED",
		1: "UTILIZATION",
		2: "WORKLOAD",
	}
	ScalePolicy_CustomRule_RuleType_value = map[string]int32{
		"RULE_TYPE_UNSPECIFIED": 0,
		"UTILIZATION":           1,
		"WORKLOAD":              2,
	}
)

func (x ScalePolicy_CustomRule_RuleType) Enum() *ScalePolicy_CustomRule_RuleType {
	p := new(ScalePolicy_CustomRule_RuleType)
	*p = x
	return p
}

func (x ScalePolicy_CustomRule_RuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalePolicy_CustomRule_RuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[3].Descriptor()
}

func (ScalePolicy_CustomRule_RuleType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[3]
}

func (x ScalePolicy_CustomRule_RuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScalePolicy_CustomRule_RuleType.Descriptor instead.
func (ScalePolicy_CustomRule_RuleType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{5, 2, 0}
}

type ScalePolicy_CustomRule_MetricType int32

const (
	ScalePolicy_CustomRule_METRIC_TYPE_UNSPECIFIED ScalePolicy_CustomRule_MetricType = 0
	// This type is used for metrics that show the metric value at a certain point in time,
	// such as requests per second to the server on an instance.
	//
	// Instance Groups calculates the average metric value for the period
	// specified in the [AutoScale.measurement_duration] field.
	ScalePolicy_CustomRule_GAUGE ScalePolicy_CustomRule_MetricType = 1
	// This type is used for metrics that monotonically increase over time,
	// such as the total number of requests to the server on an instance.
	//
	// Instance Groups calculates the average value increase for the period
	// specified in the [AutoScale.measurement_duration] field.
	ScalePolicy_CustomRule_COUNTER ScalePolicy_CustomRule_MetricType = 2
)

// Enum value maps for ScalePolicy_CustomRule_MetricType.
var (
	ScalePolicy_CustomRule_MetricType_name = map[int32]string{
		0: "METRIC_TYPE_UNSPECIFIED",
		1: "GAUGE",
		2: "COUNTER",
	}
	ScalePolicy_CustomRule_MetricType_value = map[string]int32{
		"METRIC_TYPE_UNSPECIFIED": 0,
		"GAUGE":                   1,
		"COUNTER":                 2,
	}
)

func (x ScalePolicy_CustomRule_MetricType) Enum() *ScalePolicy_CustomRule_MetricType {
	p := new(ScalePolicy_CustomRule_MetricType)
	*p = x
	return p
}

func (x ScalePolicy_CustomRule_MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalePolicy_CustomRule_MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[4].Descriptor()
}

func (ScalePolicy_CustomRule_MetricType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[4]
}

func (x ScalePolicy_CustomRule_MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScalePolicy_CustomRule_MetricType.Descriptor instead.
func (ScalePolicy_CustomRule_MetricType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{5, 2, 1}
}

type DeployPolicy_Strategy int32

const (
	DeployPolicy_STRATEGY_UNSPECIFIED DeployPolicy_Strategy = 0
	// Instance Groups can forcefully stop a running instance. This is the default.
	DeployPolicy_PROACTIVE DeployPolicy_Strategy = 1
	// Instance Groups does not stop a running instance.
	// Instead, it will wait until the instance stops itself or becomes unhealthy.
	DeployPolicy_OPPORTUNISTIC DeployPolicy_Strategy = 2
)

// Enum value maps for DeployPolicy_Strategy.
var (
	DeployPolicy_Strategy_name = map[int32]string{
		0: "STRATEGY_UNSPECIFIED",
		1: "PROACTIVE",
		2: "OPPORTUNISTIC",
	}
	DeployPolicy_Strategy_value = map[string]int32{
		"STRATEGY_UNSPECIFIED": 0,
		"PROACTIVE":            1,
		"OPPORTUNISTIC":        2,
	}
)

func (x DeployPolicy_Strategy) Enum() *DeployPolicy_Strategy {
	p := new(DeployPolicy_Strategy)
	*p = x
	return p
}

func (x DeployPolicy_Strategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeployPolicy_Strategy) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[5].Descriptor()
}

func (DeployPolicy_Strategy) Type() protoreflect.EnumType {
	return &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[5]
}

func (x DeployPolicy_Strategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeployPolicy_Strategy.Descriptor instead.
func (DeployPolicy_Strategy) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{6, 0}
}

type PlacementPolicy_HostAffinityRule_Operator int32

const (
	PlacementPolicy_HostAffinityRule_OPERATOR_UNSPECIFIED PlacementPolicy_HostAffinityRule_Operator = 0
	PlacementPolicy_HostAffinityRule_IN                   PlacementPolicy_HostAffinityRule_Operator = 1
	PlacementPolicy_HostAffinityRule_NOT_IN               PlacementPolicy_HostAffinityRule_Operator = 2
)

// Enum value maps for PlacementPolicy_HostAffinityRule_Operator.
var (
	PlacementPolicy_HostAffinityRule_Operator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
		1: "IN",
		2: "NOT_IN",
	}
	PlacementPolicy_HostAffinityRule_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"IN":                   1,
		"NOT_IN":               2,
	}
)

func (x PlacementPolicy_HostAffinityRule_Operator) Enum() *PlacementPolicy_HostAffinityRule_Operator {
	p := new(PlacementPolicy_HostAffinityRule_Operator)
	*p = x
	return p
}

func (x PlacementPolicy_HostAffinityRule_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlacementPolicy_HostAffinityRule_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[6].Descriptor()
}

func (PlacementPolicy_HostAffinityRule_Operator) Type() protoreflect.EnumType {
	return &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[6]
}

func (x PlacementPolicy_HostAffinityRule_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlacementPolicy_HostAffinityRule_Operator.Descriptor instead.
func (PlacementPolicy_HostAffinityRule_Operator) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{9, 0, 0}
}

type AttachedDiskSpec_Mode int32

const (
	AttachedDiskSpec_MODE_UNSPECIFIED AttachedDiskSpec_Mode = 0
	// Read-only access.
	AttachedDiskSpec_READ_ONLY AttachedDiskSpec_Mode = 1
	// Read/Write access.
	AttachedDiskSpec_READ_WRITE AttachedDiskSpec_Mode = 2
)

// Enum value maps for AttachedDiskSpec_Mode.
var (
	AttachedDiskSpec_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "READ_ONLY",
		2: "READ_WRITE",
	}
	AttachedDiskSpec_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"READ_ONLY":        1,
		"READ_WRITE":       2,
	}
)

func (x AttachedDiskSpec_Mode) Enum() *AttachedDiskSpec_Mode {
	p := new(AttachedDiskSpec_Mode)
	*p = x
	return p
}

func (x AttachedDiskSpec_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttachedDiskSpec_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[7].Descriptor()
}

func (AttachedDiskSpec_Mode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[7]
}

func (x AttachedDiskSpec_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttachedDiskSpec_Mode.Descriptor instead.
func (AttachedDiskSpec_Mode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{11, 0}
}

type NetworkSettings_Type int32

const (
	NetworkSettings_TYPE_UNSPECIFIED     NetworkSettings_Type = 0
	NetworkSettings_STANDARD             NetworkSettings_Type = 1
	NetworkSettings_SOFTWARE_ACCELERATED NetworkSettings_Type = 2
	NetworkSettings_HARDWARE_ACCELERATED NetworkSettings_Type = 3
)

// Enum value maps for NetworkSettings_Type.
var (
	NetworkSettings_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "STANDARD",
		2: "SOFTWARE_ACCELERATED",
		3: "HARDWARE_ACCELERATED",
	}
	NetworkSettings_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":     0,
		"STANDARD":             1,
		"SOFTWARE_ACCELERATED": 2,
		"HARDWARE_ACCELERATED": 3,
	}
)

func (x NetworkSettings_Type) Enum() *NetworkSettings_Type {
	p := new(NetworkSettings_Type)
	*p = x
	return p
}

func (x NetworkSettings_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkSettings_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[8].Descriptor()
}

func (NetworkSettings_Type) Type() protoreflect.EnumType {
	return &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[8]
}

func (x NetworkSettings_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkSettings_Type.Descriptor instead.
func (NetworkSettings_Type) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{17, 0}
}

type ManagedInstance_Status int32

const (
	ManagedInstance_STATUS_UNSPECIFIED ManagedInstance_Status = 0
	// Instance is being created.
	ManagedInstance_CREATING_INSTANCE ManagedInstance_Status = 11
	// Instance is being updated.
	ManagedInstance_UPDATING_INSTANCE ManagedInstance_Status = 12
	// Instance is being deleted.
	ManagedInstance_DELETING_INSTANCE ManagedInstance_Status = 13
	// Instance is being started.
	ManagedInstance_STARTING_INSTANCE ManagedInstance_Status = 14
	// Instance is being stopped.
	ManagedInstance_STOPPING_INSTANCE ManagedInstance_Status = 15
	// Instance has been created successfully, but startup duration has not elapsed yet.
	ManagedInstance_AWAITING_STARTUP_DURATION ManagedInstance_Status = 16
	// Instance has been created successfully and startup duration has elapsed, but health checks have not passed yet and the managed instance is not ready to receive traffic.
	ManagedInstance_CHECKING_HEALTH ManagedInstance_Status = 17
	// Instance Groups is initiating health checks and routing traffic to the instances.
	ManagedInstance_OPENING_TRAFFIC ManagedInstance_Status = 18
	// Instance is now receiving traffic, but warmup duration has not elapsed yet.
	ManagedInstance_AWAITING_WARMUP_DURATION ManagedInstance_Status = 19
	// Instance Groups has initiated the process of stopping routing traffic to the instances.
	ManagedInstance_CLOSING_TRAFFIC ManagedInstance_Status = 20
	// Instance is running normally and its attributes match the current InstanceTemplate.
	ManagedInstance_RUNNING_ACTUAL ManagedInstance_Status = 21
	// Instance is running normally, but its attributes do not match the current InstanceTemplate.
	// It will be updated, recreated or deleted shortly.
	ManagedInstance_RUNNING_OUTDATED ManagedInstance_Status = 22
	// Instance was stopped.
	ManagedInstance_STOPPED ManagedInstance_Status = 23
	// Instance was deleted.
	ManagedInstance_DELETED ManagedInstance_Status = 24
	// Instance Groups is preparing dependent resources.
	ManagedInstance_PREPARING_RESOURCES ManagedInstance_Status = 25
)

// Enum value maps for ManagedInstance_Status.
var (
	ManagedInstance_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		11: "CREATING_INSTANCE",
		12: "UPDATING_INSTANCE",
		13: "DELETING_INSTANCE",
		14: "STARTING_INSTANCE",
		15: "STOPPING_INSTANCE",
		16: "AWAITING_STARTUP_DURATION",
		17: "CHECKING_HEALTH",
		18: "OPENING_TRAFFIC",
		19: "AWAITING_WARMUP_DURATION",
		20: "CLOSING_TRAFFIC",
		21: "RUNNING_ACTUAL",
		22: "RUNNING_OUTDATED",
		23: "STOPPED",
		24: "DELETED",
		25: "PREPARING_RESOURCES",
	}
	ManagedInstance_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":        0,
		"CREATING_INSTANCE":         11,
		"UPDATING_INSTANCE":         12,
		"DELETING_INSTANCE":         13,
		"STARTING_INSTANCE":         14,
		"STOPPING_INSTANCE":         15,
		"AWAITING_STARTUP_DURATION": 16,
		"CHECKING_HEALTH":           17,
		"OPENING_TRAFFIC":           18,
		"AWAITING_WARMUP_DURATION":  19,
		"CLOSING_TRAFFIC":           20,
		"RUNNING_ACTUAL":            21,
		"RUNNING_OUTDATED":          22,
		"STOPPED":                   23,
		"DELETED":                   24,
		"PREPARING_RESOURCES":       25,
	}
)

func (x ManagedInstance_Status) Enum() *ManagedInstance_Status {
	p := new(ManagedInstance_Status)
	*p = x
	return p
}

func (x ManagedInstance_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManagedInstance_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[9].Descriptor()
}

func (ManagedInstance_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes[9]
}

func (x ManagedInstance_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManagedInstance_Status.Descriptor instead.
func (ManagedInstance_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{24, 0}
}

type InstanceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the instance group.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the folder that the instance group belongs to.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Name of the instance group.
	// The name is unique within the folder.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the instance group.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Instance template for creating the instance group.
	// For more information, see [Instance Templates](/docs/compute/concepts/instance-groups/instance-template).
	InstanceTemplate *InstanceTemplate `protobuf:"bytes,7,opt,name=instance_template,json=instanceTemplate,proto3" json:"instance_template,omitempty"`
	// [Scaling policy](/docs/compute/concepts/instance-groups/scale) of the instance group.
	ScalePolicy *ScalePolicy `protobuf:"bytes,8,opt,name=scale_policy,json=scalePolicy,proto3" json:"scale_policy,omitempty"`
	// Deployment policy of the instance group.
	DeployPolicy *DeployPolicy `protobuf:"bytes,9,opt,name=deploy_policy,json=deployPolicy,proto3" json:"deploy_policy,omitempty"`
	// Allocation policy of the instance group by zones and regions.
	AllocationPolicy *AllocationPolicy `protobuf:"bytes,10,opt,name=allocation_policy,json=allocationPolicy,proto3" json:"allocation_policy,omitempty"`
	// Status of the Network Load Balancer target group attributed to the instance group.
	LoadBalancerState *LoadBalancerState `protobuf:"bytes,11,opt,name=load_balancer_state,json=loadBalancerState,proto3" json:"load_balancer_state,omitempty"`
	// States of instances for this instance group.
	ManagedInstancesState *ManagedInstancesState `protobuf:"bytes,12,opt,name=managed_instances_state,json=managedInstancesState,proto3" json:"managed_instances_state,omitempty"`
	// Settings for balancing load between instances via [Network Load Balancer](/docs/network-load-balancer/concepts)
	// (OSI model layer 3).
	LoadBalancerSpec *LoadBalancerSpec `protobuf:"bytes,14,opt,name=load_balancer_spec,json=loadBalancerSpec,proto3" json:"load_balancer_spec,omitempty"`
	// Health checking specification. For more information, see [Health check](/docs/network-load-balancer/concepts/health-check).
	HealthChecksSpec *HealthChecksSpec `protobuf:"bytes,15,opt,name=health_checks_spec,json=healthChecksSpec,proto3" json:"health_checks_spec,omitempty"`
	// ID of the service account. The service account will be used for all API calls
	// made by the Instance Groups component on behalf of the user (for example, creating instances, adding them to load balancer target group, etc.). For more information, see [Service accounts](/docs/iam/concepts/users/service-accounts).
	// To get the service account ID, use a [yandex.cloud.iam.v1.ServiceAccountService.List] request.
	ServiceAccountId string `protobuf:"bytes,16,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Status of the instance group.
	Status    InstanceGroup_Status `protobuf:"varint,17,opt,name=status,proto3,enum=yandex.cloud.compute.v1.instancegroup.InstanceGroup_Status" json:"status,omitempty"`
	Variables []*Variable          `protobuf:"bytes,18,rep,name=variables,proto3" json:"variables,omitempty"`
	// Flag prohibiting deletion of the instance group.
	//
	// Allowed values:</br>- `false`: The instance group can be deleted.</br>- `true`: The instance group cannot be deleted.
	//
	// The default is `false`.
	DeletionProtection bool `protobuf:"varint,19,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Settings for balancing load between instances via [Application Load Balancer](/docs/application-load-balancer/concepts)
	// (OSI model layer 7).
	ApplicationLoadBalancerSpec *ApplicationLoadBalancerSpec `protobuf:"bytes,20,opt,name=application_load_balancer_spec,json=applicationLoadBalancerSpec,proto3" json:"application_load_balancer_spec,omitempty"`
	// Status of the Application Load Balancer target group attributed to the instance group.
	//
	// Returned if there is a working load balancer that the target group is connected to.
	ApplicationLoadBalancerState *ApplicationLoadBalancerState `protobuf:"bytes,21,opt,name=application_load_balancer_state,json=applicationLoadBalancerState,proto3" json:"application_load_balancer_state,omitempty"`
}

func (x *InstanceGroup) Reset() {
	*x = InstanceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGroup) ProtoMessage() {}

func (x *InstanceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGroup.ProtoReflect.Descriptor instead.
func (*InstanceGroup) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{0}
}

func (x *InstanceGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InstanceGroup) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *InstanceGroup) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InstanceGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstanceGroup) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *InstanceGroup) GetInstanceTemplate() *InstanceTemplate {
	if x != nil {
		return x.InstanceTemplate
	}
	return nil
}

func (x *InstanceGroup) GetScalePolicy() *ScalePolicy {
	if x != nil {
		return x.ScalePolicy
	}
	return nil
}

func (x *InstanceGroup) GetDeployPolicy() *DeployPolicy {
	if x != nil {
		return x.DeployPolicy
	}
	return nil
}

func (x *InstanceGroup) GetAllocationPolicy() *AllocationPolicy {
	if x != nil {
		return x.AllocationPolicy
	}
	return nil
}

func (x *InstanceGroup) GetLoadBalancerState() *LoadBalancerState {
	if x != nil {
		return x.LoadBalancerState
	}
	return nil
}

func (x *InstanceGroup) GetManagedInstancesState() *ManagedInstancesState {
	if x != nil {
		return x.ManagedInstancesState
	}
	return nil
}

func (x *InstanceGroup) GetLoadBalancerSpec() *LoadBalancerSpec {
	if x != nil {
		return x.LoadBalancerSpec
	}
	return nil
}

func (x *InstanceGroup) GetHealthChecksSpec() *HealthChecksSpec {
	if x != nil {
		return x.HealthChecksSpec
	}
	return nil
}

func (x *InstanceGroup) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *InstanceGroup) GetStatus() InstanceGroup_Status {
	if x != nil {
		return x.Status
	}
	return InstanceGroup_STATUS_UNSPECIFIED
}

func (x *InstanceGroup) GetVariables() []*Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *InstanceGroup) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *InstanceGroup) GetApplicationLoadBalancerSpec() *ApplicationLoadBalancerSpec {
	if x != nil {
		return x.ApplicationLoadBalancerSpec
	}
	return nil
}

func (x *InstanceGroup) GetApplicationLoadBalancerState() *ApplicationLoadBalancerState {
	if x != nil {
		return x.ApplicationLoadBalancerState
	}
	return nil
}

type ApplicationLoadBalancerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the Application Load Balancer target group attributed to the instance group.
	TargetGroupId string `protobuf:"bytes,1,opt,name=target_group_id,json=targetGroupId,proto3" json:"target_group_id,omitempty"`
	// Status message of the target group.
	StatusMessage string `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
}

func (x *ApplicationLoadBalancerState) Reset() {
	*x = ApplicationLoadBalancerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationLoadBalancerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationLoadBalancerState) ProtoMessage() {}

func (x *ApplicationLoadBalancerState) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationLoadBalancerState.ProtoReflect.Descriptor instead.
func (*ApplicationLoadBalancerState) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{1}
}

func (x *ApplicationLoadBalancerState) GetTargetGroupId() string {
	if x != nil {
		return x.TargetGroupId
	}
	return ""
}

func (x *ApplicationLoadBalancerState) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{2}
}

func (x *Variable) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Variable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LoadBalancerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the Network Load Balancer target group attributed to the instance group.
	TargetGroupId string `protobuf:"bytes,1,opt,name=target_group_id,json=targetGroupId,proto3" json:"target_group_id,omitempty"`
	// Status message of the target group.
	StatusMessage string `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
}

func (x *LoadBalancerState) Reset() {
	*x = LoadBalancerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerState) ProtoMessage() {}

func (x *LoadBalancerState) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerState.ProtoReflect.Descriptor instead.
func (*LoadBalancerState) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{3}
}

func (x *LoadBalancerState) GetTargetGroupId() string {
	if x != nil {
		return x.TargetGroupId
	}
	return ""
}

func (x *LoadBalancerState) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type ManagedInstancesState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target number of instances for this instance group.
	TargetSize int64 `protobuf:"varint,1,opt,name=target_size,json=targetSize,proto3" json:"target_size,omitempty"`
	// The number of running instances that match the current instance template. For more information, see [ManagedInstance.Status.RUNNING_ACTUAL].
	RunningActualCount int64 `protobuf:"varint,4,opt,name=running_actual_count,json=runningActualCount,proto3" json:"running_actual_count,omitempty"`
	// The number of running instances that does not match the current instance template. For more information, see [ManagedInstance.Status.RUNNING_OUTDATED].
	RunningOutdatedCount int64 `protobuf:"varint,5,opt,name=running_outdated_count,json=runningOutdatedCount,proto3" json:"running_outdated_count,omitempty"`
	// The number of instances in flight (for example, updating, starting, deleting). For more information, see [ManagedInstance.Status].
	ProcessingCount int64 `protobuf:"varint,6,opt,name=processing_count,json=processingCount,proto3" json:"processing_count,omitempty"`
}

func (x *ManagedInstancesState) Reset() {
	*x = ManagedInstancesState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedInstancesState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedInstancesState) ProtoMessage() {}

func (x *ManagedInstancesState) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedInstancesState.ProtoReflect.Descriptor instead.
func (*ManagedInstancesState) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{4}
}

func (x *ManagedInstancesState) GetTargetSize() int64 {
	if x != nil {
		return x.TargetSize
	}
	return 0
}

func (x *ManagedInstancesState) GetRunningActualCount() int64 {
	if x != nil {
		return x.RunningActualCount
	}
	return 0
}

func (x *ManagedInstancesState) GetRunningOutdatedCount() int64 {
	if x != nil {
		return x.RunningOutdatedCount
	}
	return 0
}

func (x *ManagedInstancesState) GetProcessingCount() int64 {
	if x != nil {
		return x.ProcessingCount
	}
	return 0
}

type ScalePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ScaleType:
	//	*ScalePolicy_FixedScale_
	//	*ScalePolicy_AutoScale_
	ScaleType isScalePolicy_ScaleType `protobuf_oneof:"scale_type"`
	// Test spec for [automatic scaling policy](/docs/compute/concepts/instance-groups/scale#auto-scale) of the instance group.
	TestAutoScale *ScalePolicy_AutoScale `protobuf:"bytes,3,opt,name=test_auto_scale,json=testAutoScale,proto3" json:"test_auto_scale,omitempty"`
}

func (x *ScalePolicy) Reset() {
	*x = ScalePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalePolicy) ProtoMessage() {}

func (x *ScalePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalePolicy.ProtoReflect.Descriptor instead.
func (*ScalePolicy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{5}
}

func (m *ScalePolicy) GetScaleType() isScalePolicy_ScaleType {
	if m != nil {
		return m.ScaleType
	}
	return nil
}

func (x *ScalePolicy) GetFixedScale() *ScalePolicy_FixedScale {
	if x, ok := x.GetScaleType().(*ScalePolicy_FixedScale_); ok {
		return x.FixedScale
	}
	return nil
}

func (x *ScalePolicy) GetAutoScale() *ScalePolicy_AutoScale {
	if x, ok := x.GetScaleType().(*ScalePolicy_AutoScale_); ok {
		return x.AutoScale
	}
	return nil
}

func (x *ScalePolicy) GetTestAutoScale() *ScalePolicy_AutoScale {
	if x != nil {
		return x.TestAutoScale
	}
	return nil
}

type isScalePolicy_ScaleType interface {
	isScalePolicy_ScaleType()
}

type ScalePolicy_FixedScale_ struct {
	// [Manual scaling policy](/docs/compute/concepts/instance-groups/scale#fixed-policy) of the instance group.
	FixedScale *ScalePolicy_FixedScale `protobuf:"bytes,1,opt,name=fixed_scale,json=fixedScale,proto3,oneof"`
}

type ScalePolicy_AutoScale_ struct {
	// [Automatic scaling policy](/docs/compute/concepts/instance-groups/scale#auto-scale) of the instance group.
	AutoScale *ScalePolicy_AutoScale `protobuf:"bytes,2,opt,name=auto_scale,json=autoScale,proto3,oneof"`
}

func (*ScalePolicy_FixedScale_) isScalePolicy_ScaleType() {}

func (*ScalePolicy_AutoScale_) isScalePolicy_ScaleType() {}

type DeployPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of running instances that can be taken offline (i.e., stopped or deleted) at the same time
	// during the update process.
	// If [max_expansion] is not specified or set to zero, [max_unavailable] must be set to a non-zero value.
	MaxUnavailable int64 `protobuf:"varint,1,opt,name=max_unavailable,json=maxUnavailable,proto3" json:"max_unavailable,omitempty"`
	// The maximum number of instances that can be deleted at the same time.
	//
	//The value 0 is any number of virtual machines within the allowed values.
	MaxDeleting int64 `protobuf:"varint,2,opt,name=max_deleting,json=maxDeleting,proto3" json:"max_deleting,omitempty"`
	// The maximum number of instances that can be created at the same time.
	//
	//The value 0 is any number of virtual machines within the allowed values.
	MaxCreating int64 `protobuf:"varint,3,opt,name=max_creating,json=maxCreating,proto3" json:"max_creating,omitempty"`
	// The maximum number of instances that can be temporarily allocated above the group's target size
	// during the update process.
	// If [max_unavailable] is not specified or set to zero, [max_expansion] must be set to a non-zero value.
	MaxExpansion int64 `protobuf:"varint,6,opt,name=max_expansion,json=maxExpansion,proto3" json:"max_expansion,omitempty"`
	// Instance startup duration.
	// Instance will be considered up and running (and start receiving traffic) only after startup_duration
	// has elapsed and all health checks are passed.
	// See [yandex.cloud.compute.v1.instancegroup.ManagedInstance.Status] for more information.
	StartupDuration *durationpb.Duration `protobuf:"bytes,7,opt,name=startup_duration,json=startupDuration,proto3" json:"startup_duration,omitempty"`
	// Affects the lifecycle of the instance during deployment.
	Strategy DeployPolicy_Strategy `protobuf:"varint,8,opt,name=strategy,proto3,enum=yandex.cloud.compute.v1.instancegroup.DeployPolicy_Strategy" json:"strategy,omitempty"`
}

func (x *DeployPolicy) Reset() {
	*x = DeployPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployPolicy) ProtoMessage() {}

func (x *DeployPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployPolicy.ProtoReflect.Descriptor instead.
func (*DeployPolicy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{6}
}

func (x *DeployPolicy) GetMaxUnavailable() int64 {
	if x != nil {
		return x.MaxUnavailable
	}
	return 0
}

func (x *DeployPolicy) GetMaxDeleting() int64 {
	if x != nil {
		return x.MaxDeleting
	}
	return 0
}

func (x *DeployPolicy) GetMaxCreating() int64 {
	if x != nil {
		return x.MaxCreating
	}
	return 0
}

func (x *DeployPolicy) GetMaxExpansion() int64 {
	if x != nil {
		return x.MaxExpansion
	}
	return 0
}

func (x *DeployPolicy) GetStartupDuration() *durationpb.Duration {
	if x != nil {
		return x.StartupDuration
	}
	return nil
}

func (x *DeployPolicy) GetStrategy() DeployPolicy_Strategy {
	if x != nil {
		return x.Strategy
	}
	return DeployPolicy_STRATEGY_UNSPECIFIED
}

type AllocationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of availability zones.
	Zones []*AllocationPolicy_Zone `protobuf:"bytes,1,rep,name=zones,proto3" json:"zones,omitempty"`
}

func (x *AllocationPolicy) Reset() {
	*x = AllocationPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationPolicy) ProtoMessage() {}

func (x *AllocationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationPolicy.ProtoReflect.Descriptor instead.
func (*AllocationPolicy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{7}
}

func (x *AllocationPolicy) GetZones() []*AllocationPolicy_Zone {
	if x != nil {
		return x.Zones
	}
	return nil
}

type InstanceTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the instance template.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of the hardware platform configuration for the instance.
	// Platforms allows you to create various types of instances: with a large amount of memory,
	// with a large number of cores, with a burstable performance.
	// For more information, see [Platforms](/docs/compute/concepts/vm-platforms).
	PlatformId string `protobuf:"bytes,3,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	// Computing resources of the instance such as the amount of memory and number of cores.
	ResourcesSpec *ResourcesSpec `protobuf:"bytes,4,opt,name=resources_spec,json=resourcesSpec,proto3" json:"resources_spec,omitempty"`
	// The metadata `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys.
	//
	// Metadata values may contain one of the supported placeholders:
	//   {instance_group.id}
	//   {instance.short_id}
	//   {instance.index}
	//   {instance.index_in_zone}
	//   {instance.zone_id}
	// InstanceGroup and Instance labels may be copied to metadata following way:
	//   {instance_group.labels.some_label_key}
	//   {instance.labels.another_label_key}
	// These placeholders will be substituted for each created instance anywhere in the value text.
	// In the rare case the value requires to contain this placeholder explicitly,
	// it must be escaped with double brackets, in example {instance.index}.
	//
	// For example, you may use the metadata in order to provide your public SSH key to the instance.
	// For more information, see [Metadata](/docs/compute/concepts/vm-metadata).
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Boot disk specification that will be attached to the instance.
	BootDiskSpec *AttachedDiskSpec `protobuf:"bytes,6,opt,name=boot_disk_spec,json=bootDiskSpec,proto3" json:"boot_disk_spec,omitempty"`
	// Array of secondary disks that will be attached to the instance.
	SecondaryDiskSpecs []*AttachedDiskSpec `protobuf:"bytes,7,rep,name=secondary_disk_specs,json=secondaryDiskSpecs,proto3" json:"secondary_disk_specs,omitempty"`
	// Array of network interfaces that will be attached to the instance.
	NetworkInterfaceSpecs []*NetworkInterfaceSpec `protobuf:"bytes,8,rep,name=network_interface_specs,json=networkInterfaceSpecs,proto3" json:"network_interface_specs,omitempty"`
	// Scheduling policy for the instance.
	SchedulingPolicy *SchedulingPolicy `protobuf:"bytes,9,opt,name=scheduling_policy,json=schedulingPolicy,proto3" json:"scheduling_policy,omitempty"`
	// Service account ID for the instance.
	ServiceAccountId string `protobuf:"bytes,10,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Network settings for the instance.
	NetworkSettings *NetworkSettings `protobuf:"bytes,11,opt,name=network_settings,json=networkSettings,proto3" json:"network_settings,omitempty"`
	// Name of the instance.
	// In order to be unique it must contain at least on of instance unique placeholders:
	//   {instance.short_id}
	//   {instance.index}
	//   combination of {instance.zone_id} and {instance.index_in_zone}
	// Example: my-instance-{instance.index}
	// If not set, default is used: {instance_group.id}-{instance.short_id}
	// It may also contain another placeholders, see metadata doc for full list.
	Name string `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// Host name for the instance.
	// This field is used to generate the [yandex.cloud.compute.v1.Instance.fqdn] value.
	// The host name must be unique within the network and region.
	// If not specified, the host name will be equal to [yandex.cloud.compute.v1.Instance.id] of the instance
	// and FQDN will be `<id>.auto.internal`. Otherwise FQDN will be `<hostname>.<region_id>.internal`.
	//
	// In order to be unique it must contain at least on of instance unique placeholders:
	//   {instance.short_id}
	//   {instance.index}
	//   combination of {instance.zone_id} and {instance.index_in_zone}
	// Example: my-instance-{instance.index}
	// If not set, `name` value will be used
	// It may also contain another placeholders, see metadata doc for full list.
	Hostname string `protobuf:"bytes,13,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Placement Group
	PlacementPolicy *PlacementPolicy `protobuf:"bytes,14,opt,name=placement_policy,json=placementPolicy,proto3" json:"placement_policy,omitempty"`
}

func (x *InstanceTemplate) Reset() {
	*x = InstanceTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTemplate) ProtoMessage() {}

func (x *InstanceTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTemplate.ProtoReflect.Descriptor instead.
func (*InstanceTemplate) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{8}
}

func (x *InstanceTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstanceTemplate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *InstanceTemplate) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *InstanceTemplate) GetResourcesSpec() *ResourcesSpec {
	if x != nil {
		return x.ResourcesSpec
	}
	return nil
}

func (x *InstanceTemplate) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InstanceTemplate) GetBootDiskSpec() *AttachedDiskSpec {
	if x != nil {
		return x.BootDiskSpec
	}
	return nil
}

func (x *InstanceTemplate) GetSecondaryDiskSpecs() []*AttachedDiskSpec {
	if x != nil {
		return x.SecondaryDiskSpecs
	}
	return nil
}

func (x *InstanceTemplate) GetNetworkInterfaceSpecs() []*NetworkInterfaceSpec {
	if x != nil {
		return x.NetworkInterfaceSpecs
	}
	return nil
}

func (x *InstanceTemplate) GetSchedulingPolicy() *SchedulingPolicy {
	if x != nil {
		return x.SchedulingPolicy
	}
	return nil
}

func (x *InstanceTemplate) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *InstanceTemplate) GetNetworkSettings() *NetworkSettings {
	if x != nil {
		return x.NetworkSettings
	}
	return nil
}

func (x *InstanceTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceTemplate) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *InstanceTemplate) GetPlacementPolicy() *PlacementPolicy {
	if x != nil {
		return x.PlacementPolicy
	}
	return nil
}

type PlacementPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of placement group
	PlacementGroupId string `protobuf:"bytes,1,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
	// List of affinity rules. Scheduler will attempt to allocate instances according to order of rules.
	HostAffinityRules []*PlacementPolicy_HostAffinityRule `protobuf:"bytes,2,rep,name=host_affinity_rules,json=hostAffinityRules,proto3" json:"host_affinity_rules,omitempty"`
}

func (x *PlacementPolicy) Reset() {
	*x = PlacementPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementPolicy) ProtoMessage() {}

func (x *PlacementPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementPolicy.ProtoReflect.Descriptor instead.
func (*PlacementPolicy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{9}
}

func (x *PlacementPolicy) GetPlacementGroupId() string {
	if x != nil {
		return x.PlacementGroupId
	}
	return ""
}

func (x *PlacementPolicy) GetHostAffinityRules() []*PlacementPolicy_HostAffinityRule {
	if x != nil {
		return x.HostAffinityRules
	}
	return nil
}

type ResourcesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of memory available to the instance, specified in bytes.
	Memory int64 `protobuf:"varint,1,opt,name=memory,proto3" json:"memory,omitempty"`
	// The number of cores available to the instance.
	Cores int64 `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	// Baseline level of CPU performance with the ability to burst performance above that baseline level.
	// This field sets baseline performance for each core.
	CoreFraction int64 `protobuf:"varint,3,opt,name=core_fraction,json=coreFraction,proto3" json:"core_fraction,omitempty"`
	// The number of GPUs available to the instance.
	Gpus int64 `protobuf:"varint,4,opt,name=gpus,proto3" json:"gpus,omitempty"`
}

func (x *ResourcesSpec) Reset() {
	*x = ResourcesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcesSpec) ProtoMessage() {}

func (x *ResourcesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcesSpec.ProtoReflect.Descriptor instead.
func (*ResourcesSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{10}
}

func (x *ResourcesSpec) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ResourcesSpec) GetCores() int64 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *ResourcesSpec) GetCoreFraction() int64 {
	if x != nil {
		return x.CoreFraction
	}
	return 0
}

func (x *ResourcesSpec) GetGpus() int64 {
	if x != nil {
		return x.Gpus
	}
	return 0
}

type AttachedDiskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Access mode to the Disk resource.
	Mode AttachedDiskSpec_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=yandex.cloud.compute.v1.instancegroup.AttachedDiskSpec_Mode" json:"mode,omitempty"`
	// Serial number that is reflected in the /dev/disk/by-id/ tree
	// of a Linux operating system running within the instance.
	//
	// This value can be used to reference the device for mounting, resizing, and so on, from within the instance.
	DeviceName string `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	//oneof disk_spec or disk_id
	// Disk specification that is attached to the instance. For more information, see [Disks](/docs/compute/concepts/disk).
	DiskSpec *AttachedDiskSpec_DiskSpec `protobuf:"bytes,3,opt,name=disk_spec,json=diskSpec,proto3" json:"disk_spec,omitempty"`
	// Set to use an existing disk. To set use variables.
	DiskId string `protobuf:"bytes,4,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
}

func (x *AttachedDiskSpec) Reset() {
	*x = AttachedDiskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachedDiskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedDiskSpec) ProtoMessage() {}

func (x *AttachedDiskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedDiskSpec.ProtoReflect.Descriptor instead.
func (*AttachedDiskSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{11}
}

func (x *AttachedDiskSpec) GetMode() AttachedDiskSpec_Mode {
	if x != nil {
		return x.Mode
	}
	return AttachedDiskSpec_MODE_UNSPECIFIED
}

func (x *AttachedDiskSpec) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *AttachedDiskSpec) GetDiskSpec() *AttachedDiskSpec_DiskSpec {
	if x != nil {
		return x.DiskSpec
	}
	return nil
}

func (x *AttachedDiskSpec) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type NetworkInterfaceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the network.
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// IDs of the subnets.
	SubnetIds []string `protobuf:"bytes,2,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// Primary IPv4 address that is assigned to the instance for this network interface.
	PrimaryV4AddressSpec *PrimaryAddressSpec `protobuf:"bytes,3,opt,name=primary_v4_address_spec,json=primaryV4AddressSpec,proto3" json:"primary_v4_address_spec,omitempty"`
	// Primary IPv6 address that is assigned to the instance for this network interface. IPv6 not available yet.
	PrimaryV6AddressSpec *PrimaryAddressSpec `protobuf:"bytes,4,opt,name=primary_v6_address_spec,json=primaryV6AddressSpec,proto3" json:"primary_v6_address_spec,omitempty"`
	// IDs of security groups.
	SecurityGroupIds []string `protobuf:"bytes,5,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
}

func (x *NetworkInterfaceSpec) Reset() {
	*x = NetworkInterfaceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterfaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterfaceSpec) ProtoMessage() {}

func (x *NetworkInterfaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterfaceSpec.ProtoReflect.Descriptor instead.
func (*NetworkInterfaceSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{12}
}

func (x *NetworkInterfaceSpec) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *NetworkInterfaceSpec) GetSubnetIds() []string {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *NetworkInterfaceSpec) GetPrimaryV4AddressSpec() *PrimaryAddressSpec {
	if x != nil {
		return x.PrimaryV4AddressSpec
	}
	return nil
}

func (x *NetworkInterfaceSpec) GetPrimaryV6AddressSpec() *PrimaryAddressSpec {
	if x != nil {
		return x.PrimaryV6AddressSpec
	}
	return nil
}

func (x *NetworkInterfaceSpec) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

type PrimaryAddressSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An external IP address configuration.
	// If not specified, then this managed instance will have no external internet access.
	OneToOneNatSpec *OneToOneNatSpec `protobuf:"bytes,1,opt,name=one_to_one_nat_spec,json=oneToOneNatSpec,proto3" json:"one_to_one_nat_spec,omitempty"`
	// Internal DNS configuration
	DnsRecordSpecs []*DnsRecordSpec `protobuf:"bytes,2,rep,name=dns_record_specs,json=dnsRecordSpecs,proto3" json:"dns_record_specs,omitempty"`
	// Optional. Manual set static internal IP. To set use variables.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *PrimaryAddressSpec) Reset() {
	*x = PrimaryAddressSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryAddressSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryAddressSpec) ProtoMessage() {}

func (x *PrimaryAddressSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryAddressSpec.ProtoReflect.Descriptor instead.
func (*PrimaryAddressSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{13}
}

func (x *PrimaryAddressSpec) GetOneToOneNatSpec() *OneToOneNatSpec {
	if x != nil {
		return x.OneToOneNatSpec
	}
	return nil
}

func (x *PrimaryAddressSpec) GetDnsRecordSpecs() []*DnsRecordSpec {
	if x != nil {
		return x.DnsRecordSpecs
	}
	return nil
}

func (x *PrimaryAddressSpec) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type OneToOneNatSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP version for the public IP address.
	IpVersion IpVersion `protobuf:"varint,1,opt,name=ip_version,json=ipVersion,proto3,enum=yandex.cloud.compute.v1.instancegroup.IpVersion" json:"ip_version,omitempty"`
	// Manual set static public IP. To set use variables. (optional)
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// External DNS configuration
	DnsRecordSpecs []*DnsRecordSpec `protobuf:"bytes,3,rep,name=dns_record_specs,json=dnsRecordSpecs,proto3" json:"dns_record_specs,omitempty"`
}

func (x *OneToOneNatSpec) Reset() {
	*x = OneToOneNatSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneToOneNatSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneToOneNatSpec) ProtoMessage() {}

func (x *OneToOneNatSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneToOneNatSpec.ProtoReflect.Descriptor instead.
func (*OneToOneNatSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{14}
}

func (x *OneToOneNatSpec) GetIpVersion() IpVersion {
	if x != nil {
		return x.IpVersion
	}
	return IpVersion_IP_VERSION_UNSPECIFIED
}

func (x *OneToOneNatSpec) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OneToOneNatSpec) GetDnsRecordSpecs() []*DnsRecordSpec {
	if x != nil {
		return x.DnsRecordSpecs
	}
	return nil
}

type DnsRecordSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FQDN (required)
	Fqdn string `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// DNS zone id (optional, if not set, private zone used)
	DnsZoneId string `protobuf:"bytes,2,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// DNS record ttl, values in 0-86400 (optional)
	Ttl int64 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// When set to true, also create PTR DNS record (optional)
	Ptr bool `protobuf:"varint,4,opt,name=ptr,proto3" json:"ptr,omitempty"`
}

func (x *DnsRecordSpec) Reset() {
	*x = DnsRecordSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsRecordSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsRecordSpec) ProtoMessage() {}

func (x *DnsRecordSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsRecordSpec.ProtoReflect.Descriptor instead.
func (*DnsRecordSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{15}
}

func (x *DnsRecordSpec) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *DnsRecordSpec) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *DnsRecordSpec) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DnsRecordSpec) GetPtr() bool {
	if x != nil {
		return x.Ptr
	}
	return false
}

type SchedulingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Preemptible instances are stopped at least once every 24 hours, and can be stopped at any time
	// if their resources are needed by Compute.
	// For more information, see [Preemptible Virtual Machines](/docs/compute/concepts/preemptible-vm).
	Preemptible bool `protobuf:"varint,1,opt,name=preemptible,proto3" json:"preemptible,omitempty"`
}

func (x *SchedulingPolicy) Reset() {
	*x = SchedulingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingPolicy) ProtoMessage() {}

func (x *SchedulingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingPolicy.ProtoReflect.Descriptor instead.
func (*SchedulingPolicy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{16}
}

func (x *SchedulingPolicy) GetPreemptible() bool {
	if x != nil {
		return x.Preemptible
	}
	return false
}

type NetworkSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of instance network.
	Type NetworkSettings_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.compute.v1.instancegroup.NetworkSettings_Type" json:"type,omitempty"`
}

func (x *NetworkSettings) Reset() {
	*x = NetworkSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSettings) ProtoMessage() {}

func (x *NetworkSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSettings.ProtoReflect.Descriptor instead.
func (*NetworkSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{17}
}

func (x *NetworkSettings) GetType() NetworkSettings_Type {
	if x != nil {
		return x.Type
	}
	return NetworkSettings_TYPE_UNSPECIFIED
}

type LoadBalancerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specification of the target group that the instance group will be added to. For more information, see [Target groups and resources](/docs/load-balancer/concepts/target-resources).
	TargetGroupSpec *TargetGroupSpec `protobuf:"bytes,1,opt,name=target_group_spec,json=targetGroupSpec,proto3" json:"target_group_spec,omitempty"`
	// Timeout for waiting for the VM to be checked by the load balancer. If the timeout is exceeded,
	// the VM will be turned off based on the deployment policy. Specified in seconds.
	MaxOpeningTrafficDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=max_opening_traffic_duration,json=maxOpeningTrafficDuration,proto3" json:"max_opening_traffic_duration,omitempty"`
}

func (x *LoadBalancerSpec) Reset() {
	*x = LoadBalancerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerSpec) ProtoMessage() {}

func (x *LoadBalancerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerSpec.ProtoReflect.Descriptor instead.
func (*LoadBalancerSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{18}
}

func (x *LoadBalancerSpec) GetTargetGroupSpec() *TargetGroupSpec {
	if x != nil {
		return x.TargetGroupSpec
	}
	return nil
}

func (x *LoadBalancerSpec) GetMaxOpeningTrafficDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxOpeningTrafficDuration
	}
	return nil
}

type TargetGroupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the target group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the target group.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TargetGroupSpec) Reset() {
	*x = TargetGroupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetGroupSpec) ProtoMessage() {}

func (x *TargetGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetGroupSpec.ProtoReflect.Descriptor instead.
func (*TargetGroupSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{19}
}

func (x *TargetGroupSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TargetGroupSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TargetGroupSpec) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ApplicationLoadBalancerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Basic properties of the Application Load Balancer target group attributed to the instance group.
	TargetGroupSpec *ApplicationTargetGroupSpec `protobuf:"bytes,1,opt,name=target_group_spec,json=targetGroupSpec,proto3" json:"target_group_spec,omitempty"`
	// Timeout for waiting for the VM to be checked by the load balancer. If the timeout is exceeded,
	// the VM will be turned off based on the deployment policy. Specified in seconds.
	MaxOpeningTrafficDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=max_opening_traffic_duration,json=maxOpeningTrafficDuration,proto3" json:"max_opening_traffic_duration,omitempty"`
}

func (x *ApplicationLoadBalancerSpec) Reset() {
	*x = ApplicationLoadBalancerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationLoadBalancerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationLoadBalancerSpec) ProtoMessage() {}

func (x *ApplicationLoadBalancerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationLoadBalancerSpec.ProtoReflect.Descriptor instead.
func (*ApplicationLoadBalancerSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{20}
}

func (x *ApplicationLoadBalancerSpec) GetTargetGroupSpec() *ApplicationTargetGroupSpec {
	if x != nil {
		return x.TargetGroupSpec
	}
	return nil
}

func (x *ApplicationLoadBalancerSpec) GetMaxOpeningTrafficDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxOpeningTrafficDuration
	}
	return nil
}

type ApplicationTargetGroupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the target group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the target group.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApplicationTargetGroupSpec) Reset() {
	*x = ApplicationTargetGroupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationTargetGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationTargetGroupSpec) ProtoMessage() {}

func (x *ApplicationTargetGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationTargetGroupSpec.ProtoReflect.Descriptor instead.
func (*ApplicationTargetGroupSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{21}
}

func (x *ApplicationTargetGroupSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationTargetGroupSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationTargetGroupSpec) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type HealthChecksSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Health checking specification. For more information, see [Health check](/docs/load-balancer/concepts/health-check).
	HealthCheckSpecs []*HealthCheckSpec `protobuf:"bytes,1,rep,name=health_check_specs,json=healthCheckSpecs,proto3" json:"health_check_specs,omitempty"`
	// Timeout for waiting for the VM to become healthy. If the timeout is exceeded,
	// the VM will be turned off based on the deployment policy. Specified in seconds.
	MaxCheckingHealthDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=max_checking_health_duration,json=maxCheckingHealthDuration,proto3" json:"max_checking_health_duration,omitempty"`
}

func (x *HealthChecksSpec) Reset() {
	*x = HealthChecksSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthChecksSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthChecksSpec) ProtoMessage() {}

func (x *HealthChecksSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthChecksSpec.ProtoReflect.Descriptor instead.
func (*HealthChecksSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{22}
}

func (x *HealthChecksSpec) GetHealthCheckSpecs() []*HealthCheckSpec {
	if x != nil {
		return x.HealthCheckSpecs
	}
	return nil
}

func (x *HealthChecksSpec) GetMaxCheckingHealthDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxCheckingHealthDuration
	}
	return nil
}

type HealthCheckSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interval between health checks. The default is 2 seconds.
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Timeout for the managed instance to return a response for the health check. The default is 1 second.
	Timeout *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// The number of failed health checks for the managed instance to be considered unhealthy. The default (0) is 2.
	UnhealthyThreshold int64 `protobuf:"varint,3,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// The number of successful health checks required in order for the managed instance to be considered healthy. The default (0) is 2.
	HealthyThreshold int64 `protobuf:"varint,4,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	// Types that are assignable to HealthCheckOptions:
	//	*HealthCheckSpec_TcpOptions_
	//	*HealthCheckSpec_HttpOptions_
	HealthCheckOptions isHealthCheckSpec_HealthCheckOptions `protobuf_oneof:"health_check_options"`
}

func (x *HealthCheckSpec) Reset() {
	*x = HealthCheckSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckSpec) ProtoMessage() {}

func (x *HealthCheckSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckSpec.ProtoReflect.Descriptor instead.
func (*HealthCheckSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{23}
}

func (x *HealthCheckSpec) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *HealthCheckSpec) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *HealthCheckSpec) GetUnhealthyThreshold() int64 {
	if x != nil {
		return x.UnhealthyThreshold
	}
	return 0
}

func (x *HealthCheckSpec) GetHealthyThreshold() int64 {
	if x != nil {
		return x.HealthyThreshold
	}
	return 0
}

func (m *HealthCheckSpec) GetHealthCheckOptions() isHealthCheckSpec_HealthCheckOptions {
	if m != nil {
		return m.HealthCheckOptions
	}
	return nil
}

func (x *HealthCheckSpec) GetTcpOptions() *HealthCheckSpec_TcpOptions {
	if x, ok := x.GetHealthCheckOptions().(*HealthCheckSpec_TcpOptions_); ok {
		return x.TcpOptions
	}
	return nil
}

func (x *HealthCheckSpec) GetHttpOptions() *HealthCheckSpec_HttpOptions {
	if x, ok := x.GetHealthCheckOptions().(*HealthCheckSpec_HttpOptions_); ok {
		return x.HttpOptions
	}
	return nil
}

type isHealthCheckSpec_HealthCheckOptions interface {
	isHealthCheckSpec_HealthCheckOptions()
}

type HealthCheckSpec_TcpOptions_ struct {
	// Configuration options for a TCP health check.
	TcpOptions *HealthCheckSpec_TcpOptions `protobuf:"bytes,5,opt,name=tcp_options,json=tcpOptions,proto3,oneof"`
}

type HealthCheckSpec_HttpOptions_ struct {
	// Configuration options for an HTTP health check.
	HttpOptions *HealthCheckSpec_HttpOptions `protobuf:"bytes,6,opt,name=http_options,json=httpOptions,proto3,oneof"`
}

func (*HealthCheckSpec_TcpOptions_) isHealthCheckSpec_HealthCheckOptions() {}

func (*HealthCheckSpec_HttpOptions_) isHealthCheckSpec_HealthCheckOptions() {}

// A ManagedInstance resource. For more information, see [Instance Groups Concepts](/docs/compute/concepts/instance-groups/).
type ManagedInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the managed instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Status of the managed instance.
	Status ManagedInstance_Status `protobuf:"varint,2,opt,name=status,proto3,enum=yandex.cloud.compute.v1.instancegroup.ManagedInstance_Status" json:"status,omitempty"`
	// ID of the instance.
	InstanceId string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Fully Qualified Domain Name.
	Fqdn string `protobuf:"bytes,4,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// The name of the managed instance.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Status message for the managed instance.
	StatusMessage string `protobuf:"bytes,6,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// ID of the availability zone where the instance resides.
	ZoneId string `protobuf:"bytes,7,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// Array of network interfaces that are attached to the managed instance.
	NetworkInterfaces []*NetworkInterface `protobuf:"bytes,8,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	// The timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format when the status of the managed instance was last changed.
	StatusChangedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=status_changed_at,json=statusChangedAt,proto3" json:"status_changed_at,omitempty"`
}

func (x *ManagedInstance) Reset() {
	*x = ManagedInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedInstance) ProtoMessage() {}

func (x *ManagedInstance) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedInstance.ProtoReflect.Descriptor instead.
func (*ManagedInstance) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{24}
}

func (x *ManagedInstance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManagedInstance) GetStatus() ManagedInstance_Status {
	if x != nil {
		return x.Status
	}
	return ManagedInstance_STATUS_UNSPECIFIED
}

func (x *ManagedInstance) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ManagedInstance) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *ManagedInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ManagedInstance) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *ManagedInstance) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *ManagedInstance) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *ManagedInstance) GetStatusChangedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusChangedAt
	}
	return nil
}

type NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the network interface, generated by the server, 0,1,2... etc.
	// Currently only one network interface is supported per instance.
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// MAC address that is assigned to the network interface.
	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// ID of the subnet.
	SubnetId string `protobuf:"bytes,3,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Primary IPv4 address that is assigned to the instance for this network interface.
	PrimaryV4Address *PrimaryAddress `protobuf:"bytes,4,opt,name=primary_v4_address,json=primaryV4Address,proto3" json:"primary_v4_address,omitempty"`
	// Primary IPv6 address that is assigned to the instance for this network interface. IPv6 is not available yet.
	PrimaryV6Address *PrimaryAddress `protobuf:"bytes,5,opt,name=primary_v6_address,json=primaryV6Address,proto3" json:"primary_v6_address,omitempty"`
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{25}
}

func (x *NetworkInterface) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *NetworkInterface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NetworkInterface) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *NetworkInterface) GetPrimaryV4Address() *PrimaryAddress {
	if x != nil {
		return x.PrimaryV4Address
	}
	return nil
}

func (x *NetworkInterface) GetPrimaryV6Address() *PrimaryAddress {
	if x != nil {
		return x.PrimaryV6Address
	}
	return nil
}

type PrimaryAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An IPv4 internal network address that is assigned to the managed instance for this network interface.
	// If not specified by the user, an unused internal IP is assigned by the system.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// One-to-one NAT configuration. If missing, NAT has not been set up.
	OneToOneNat *OneToOneNat `protobuf:"bytes,2,opt,name=one_to_one_nat,json=oneToOneNat,proto3" json:"one_to_one_nat,omitempty"`
	// Internal DNS configuration.
	DnsRecords []*DnsRecord `protobuf:"bytes,3,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
}

func (x *PrimaryAddress) Reset() {
	*x = PrimaryAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryAddress) ProtoMessage() {}

func (x *PrimaryAddress) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryAddress.ProtoReflect.Descriptor instead.
func (*PrimaryAddress) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{26}
}

func (x *PrimaryAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PrimaryAddress) GetOneToOneNat() *OneToOneNat {
	if x != nil {
		return x.OneToOneNat
	}
	return nil
}

func (x *PrimaryAddress) GetDnsRecords() []*DnsRecord {
	if x != nil {
		return x.DnsRecords
	}
	return nil
}

type OneToOneNat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An IPv4 external network address that is assigned to the managed instance for this network interface.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// External IP address version.
	IpVersion IpVersion `protobuf:"varint,2,opt,name=ip_version,json=ipVersion,proto3,enum=yandex.cloud.compute.v1.instancegroup.IpVersion" json:"ip_version,omitempty"`
	// External DNS configuration.
	DnsRecords []*DnsRecord `protobuf:"bytes,3,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
}

func (x *OneToOneNat) Reset() {
	*x = OneToOneNat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneToOneNat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneToOneNat) ProtoMessage() {}

func (x *OneToOneNat) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneToOneNat.ProtoReflect.Descriptor instead.
func (*OneToOneNat) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{27}
}

func (x *OneToOneNat) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OneToOneNat) GetIpVersion() IpVersion {
	if x != nil {
		return x.IpVersion
	}
	return IpVersion_IP_VERSION_UNSPECIFIED
}

func (x *OneToOneNat) GetDnsRecords() []*DnsRecord {
	if x != nil {
		return x.DnsRecords
	}
	return nil
}

type DnsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the A/AAAA record as specified when creating the instance.
	// Note that if `fqdn' has no trailing '.', it is specified relative to the zone (@see dns_zone_id).
	Fqdn string `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// DNS zone id (optional, if not set, some private zone is used).
	DnsZoneId string `protobuf:"bytes,2,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// DNS record ttl (optional, if 0, a reasonable default is used).
	Ttl int64 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// When true, indicates there is a corresponding auto-created PTR DNS record.
	Ptr bool `protobuf:"varint,4,opt,name=ptr,proto3" json:"ptr,omitempty"`
}

func (x *DnsRecord) Reset() {
	*x = DnsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsRecord) ProtoMessage() {}

func (x *DnsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsRecord.ProtoReflect.Descriptor instead.
func (*DnsRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{28}
}

func (x *DnsRecord) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *DnsRecord) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *DnsRecord) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DnsRecord) GetPtr() bool {
	if x != nil {
		return x.Ptr
	}
	return false
}

type LogRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The log message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LogRecord) Reset() {
	*x = LogRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRecord) ProtoMessage() {}

func (x *LogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRecord.ProtoReflect.Descriptor instead.
func (*LogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{29}
}

func (x *LogRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogRecord) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ManagedInstancesState_Statuses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instance is being created.
	Creating int64 `protobuf:"varint,1,opt,name=creating,proto3" json:"creating,omitempty"`
	// Instance is being started.
	Starting int64 `protobuf:"varint,2,opt,name=starting,proto3" json:"starting,omitempty"`
	// Instance is being opened to receive traffic.
	Opening int64 `protobuf:"varint,3,opt,name=opening,proto3" json:"opening,omitempty"`
	// Instance is being warmed.
	Warming int64 `protobuf:"varint,4,opt,name=warming,proto3" json:"warming,omitempty"`
	// Instance is running normally.
	Running int64 `protobuf:"varint,5,opt,name=running,proto3" json:"running,omitempty"`
	// Instance is being closed to traffic.
	Closing int64 `protobuf:"varint,6,opt,name=closing,proto3" json:"closing,omitempty"`
	// Instance is being stopped.
	Stopping int64 `protobuf:"varint,7,opt,name=stopping,proto3" json:"stopping,omitempty"`
	// Instance is being updated.
	Updating int64 `protobuf:"varint,8,opt,name=updating,proto3" json:"updating,omitempty"`
	// Instance is being deleted.
	Deleting int64 `protobuf:"varint,9,opt,name=deleting,proto3" json:"deleting,omitempty"`
	// Instance failed and needs to be recreated.
	Failed int64 `protobuf:"varint,10,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *ManagedInstancesState_Statuses) Reset() {
	*x = ManagedInstancesState_Statuses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedInstancesState_Statuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedInstancesState_Statuses) ProtoMessage() {}

func (x *ManagedInstancesState_Statuses) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedInstancesState_Statuses.ProtoReflect.Descriptor instead.
func (*ManagedInstancesState_Statuses) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ManagedInstancesState_Statuses) GetCreating() int64 {
	if x != nil {
		return x.Creating
	}
	return 0
}

func (x *ManagedInstancesState_Statuses) GetStarting() int64 {
	if x != nil {
		return x.Starting
	}
	return 0
}

func (x *ManagedInstancesState_Statuses) GetOpening() int64 {
	if x != nil {
		return x.Opening
	}
	return 0
}

func (x *ManagedInstancesState_Statuses) GetWarming() int64 {
	if x != nil {
		return x.Warming
	}
	return 0
}

func (x *ManagedInstancesState_Statuses) GetRunning() int64 {
	if x != nil {
		return x.Running
	}
	return 0
}

func (x *ManagedInstancesState_Statuses) GetClosing() int64 {
	if x != nil {
		return x.Closing
	}
	return 0
}

func (x *ManagedInstancesState_Statuses) GetStopping() int64 {
	if x != nil {
		return x.Stopping
	}
	return 0
}

func (x *ManagedInstancesState_Statuses) GetUpdating() int64 {
	if x != nil {
		return x.Updating
	}
	return 0
}

func (x *ManagedInstancesState_Statuses) GetDeleting() int64 {
	if x != nil {
		return x.Deleting
	}
	return 0
}

func (x *ManagedInstancesState_Statuses) GetFailed() int64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

type ScalePolicy_AutoScale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lower limit for instance count in each zone.
	MinZoneSize int64 `protobuf:"varint,1,opt,name=min_zone_size,json=minZoneSize,proto3" json:"min_zone_size,omitempty"`
	// Upper limit for total instance count (across all zones).
	// 0 means maximum limit = 100.
	MaxSize int64 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	// Time in seconds allotted for averaging metrics.
	// 1 minute by default.
	MeasurementDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=measurement_duration,json=measurementDuration,proto3" json:"measurement_duration,omitempty"`
	// The warmup time of the instance in seconds. During this time,
	// traffic is sent to the instance, but instance metrics are not collected.
	WarmupDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=warmup_duration,json=warmupDuration,proto3" json:"warmup_duration,omitempty"`
	// Minimum amount of time in seconds allotted for monitoring before
	// Instance Groups can reduce the number of instances in the group.
	// During this time, the group size doesn't decrease, even if the new metric values
	// indicate that it should.
	StabilizationDuration *durationpb.Duration `protobuf:"bytes,5,opt,name=stabilization_duration,json=stabilizationDuration,proto3" json:"stabilization_duration,omitempty"`
	// Target group size.
	InitialSize int64 `protobuf:"varint,6,opt,name=initial_size,json=initialSize,proto3" json:"initial_size,omitempty"`
	// Defines an autoscaling rule based on the average CPU utilization of the instance group.
	//
	// If more than one rule is specified, e.g. CPU utilization and one or more Monitoring metrics ([custom_rules]),
	// the size of the instance group will be equal to the maximum of sizes calculated according to each metric.
	CpuUtilizationRule *ScalePolicy_CpuUtilizationRule `protobuf:"bytes,7,opt,name=cpu_utilization_rule,json=cpuUtilizationRule,proto3" json:"cpu_utilization_rule,omitempty"`
	// Defines an autoscaling rule based on a [custom metric](/docs/monitoring/operations/metric/add) from Monitoring.
	//
	// If more than one rule is specified, e.g. CPU utilization ([cpu_utilization_rule]) and one or more Monitoring
	// metrics, the size of the instance group will be equal to the maximum of sizes calculated according to each metric.
	CustomRules []*ScalePolicy_CustomRule `protobuf:"bytes,8,rep,name=custom_rules,json=customRules,proto3" json:"custom_rules,omitempty"`
	// Autoscaling type.
	AutoScaleType ScalePolicy_AutoScale_AutoScaleType `protobuf:"varint,9,opt,name=auto_scale_type,json=autoScaleType,proto3,enum=yandex.cloud.compute.v1.instancegroup.ScalePolicy_AutoScale_AutoScaleType" json:"auto_scale_type,omitempty"`
}

func (x *ScalePolicy_AutoScale) Reset() {
	*x = ScalePolicy_AutoScale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalePolicy_AutoScale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalePolicy_AutoScale) ProtoMessage() {}

func (x *ScalePolicy_AutoScale) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalePolicy_AutoScale.ProtoReflect.Descriptor instead.
func (*ScalePolicy_AutoScale) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ScalePolicy_AutoScale) GetMinZoneSize() int64 {
	if x != nil {
		return x.MinZoneSize
	}
	return 0
}

func (x *ScalePolicy_AutoScale) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *ScalePolicy_AutoScale) GetMeasurementDuration() *durationpb.Duration {
	if x != nil {
		return x.MeasurementDuration
	}
	return nil
}

func (x *ScalePolicy_AutoScale) GetWarmupDuration() *durationpb.Duration {
	if x != nil {
		return x.WarmupDuration
	}
	return nil
}

func (x *ScalePolicy_AutoScale) GetStabilizationDuration() *durationpb.Duration {
	if x != nil {
		return x.StabilizationDuration
	}
	return nil
}

func (x *ScalePolicy_AutoScale) GetInitialSize() int64 {
	if x != nil {
		return x.InitialSize
	}
	return 0
}

func (x *ScalePolicy_AutoScale) GetCpuUtilizationRule() *ScalePolicy_CpuUtilizationRule {
	if x != nil {
		return x.CpuUtilizationRule
	}
	return nil
}

func (x *ScalePolicy_AutoScale) GetCustomRules() []*ScalePolicy_CustomRule {
	if x != nil {
		return x.CustomRules
	}
	return nil
}

func (x *ScalePolicy_AutoScale) GetAutoScaleType() ScalePolicy_AutoScale_AutoScaleType {
	if x != nil {
		return x.AutoScaleType
	}
	return ScalePolicy_AutoScale_AUTO_SCALE_TYPE_UNSPECIFIED
}

type ScalePolicy_CpuUtilizationRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target CPU utilization level. Instance Groups maintains this level for each availability zone.
	UtilizationTarget float64 `protobuf:"fixed64,1,opt,name=utilization_target,json=utilizationTarget,proto3" json:"utilization_target,omitempty"`
}

func (x *ScalePolicy_CpuUtilizationRule) Reset() {
	*x = ScalePolicy_CpuUtilizationRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalePolicy_CpuUtilizationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalePolicy_CpuUtilizationRule) ProtoMessage() {}

func (x *ScalePolicy_CpuUtilizationRule) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalePolicy_CpuUtilizationRule.ProtoReflect.Descriptor instead.
func (*ScalePolicy_CpuUtilizationRule) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{5, 1}
}

func (x *ScalePolicy_CpuUtilizationRule) GetUtilizationTarget() float64 {
	if x != nil {
		return x.UtilizationTarget
	}
	return 0
}

type ScalePolicy_CustomRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Custom metric rule type. This field affects which label from
	// the custom metric should be used: `zone_id` or `instance_id`.
	RuleType ScalePolicy_CustomRule_RuleType `protobuf:"varint,1,opt,name=rule_type,json=ruleType,proto3,enum=yandex.cloud.compute.v1.instancegroup.ScalePolicy_CustomRule_RuleType" json:"rule_type,omitempty"`
	// Type of custom metric. This field affects how Instance Groups calculates the average metric value.
	MetricType ScalePolicy_CustomRule_MetricType `protobuf:"varint,2,opt,name=metric_type,json=metricType,proto3,enum=yandex.cloud.compute.v1.instancegroup.ScalePolicy_CustomRule_MetricType" json:"metric_type,omitempty"`
	// Name of custom metric in Monitoring that should be used for scaling.
	MetricName string `protobuf:"bytes,3,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	// Labels of custom metric in Monitoring that should be used for scaling.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Target value for the custom metric. Instance Groups maintains this level for each availability zone.
	Target float64 `protobuf:"fixed64,4,opt,name=target,proto3" json:"target,omitempty"`
	// Folder id of custom metric in Monitoring that should be used for scaling.
	FolderId string `protobuf:"bytes,6,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Service of custom metric in Monitoring that should be used for scaling.
	Service string `protobuf:"bytes,7,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *ScalePolicy_CustomRule) Reset() {
	*x = ScalePolicy_CustomRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalePolicy_CustomRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalePolicy_CustomRule) ProtoMessage() {}

func (x *ScalePolicy_CustomRule) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalePolicy_CustomRule.ProtoReflect.Descriptor instead.
func (*ScalePolicy_CustomRule) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{5, 2}
}

func (x *ScalePolicy_CustomRule) GetRuleType() ScalePolicy_CustomRule_RuleType {
	if x != nil {
		return x.RuleType
	}
	return ScalePolicy_CustomRule_RULE_TYPE_UNSPECIFIED
}

func (x *ScalePolicy_CustomRule) GetMetricType() ScalePolicy_CustomRule_MetricType {
	if x != nil {
		return x.MetricType
	}
	return ScalePolicy_CustomRule_METRIC_TYPE_UNSPECIFIED
}

func (x *ScalePolicy_CustomRule) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *ScalePolicy_CustomRule) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ScalePolicy_CustomRule) GetTarget() float64 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *ScalePolicy_CustomRule) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ScalePolicy_CustomRule) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type ScalePolicy_FixedScale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of instances in the instance group.
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ScalePolicy_FixedScale) Reset() {
	*x = ScalePolicy_FixedScale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalePolicy_FixedScale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalePolicy_FixedScale) ProtoMessage() {}

func (x *ScalePolicy_FixedScale) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalePolicy_FixedScale.ProtoReflect.Descriptor instead.
func (*ScalePolicy_FixedScale) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{5, 3}
}

func (x *ScalePolicy_FixedScale) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type AllocationPolicy_Zone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the availability zone where the instance resides.
	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
}

func (x *AllocationPolicy_Zone) Reset() {
	*x = AllocationPolicy_Zone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationPolicy_Zone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationPolicy_Zone) ProtoMessage() {}

func (x *AllocationPolicy_Zone) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationPolicy_Zone.ProtoReflect.Descriptor instead.
func (*AllocationPolicy_Zone) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{7, 0}
}

func (x *AllocationPolicy_Zone) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

// Affinity definition
type PlacementPolicy_HostAffinityRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Affinity label or one of reserved values - 'yc.hostId', 'yc.hostGroupId'
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Include or exclude action
	Op PlacementPolicy_HostAffinityRule_Operator `protobuf:"varint,2,opt,name=op,proto3,enum=yandex.cloud.compute.v1.instancegroup.PlacementPolicy_HostAffinityRule_Operator" json:"op,omitempty"`
	// Affinity value or host ID or host group ID
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *PlacementPolicy_HostAffinityRule) Reset() {
	*x = PlacementPolicy_HostAffinityRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementPolicy_HostAffinityRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementPolicy_HostAffinityRule) ProtoMessage() {}

func (x *PlacementPolicy_HostAffinityRule) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementPolicy_HostAffinityRule.ProtoReflect.Descriptor instead.
func (*PlacementPolicy_HostAffinityRule) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PlacementPolicy_HostAffinityRule) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PlacementPolicy_HostAffinityRule) GetOp() PlacementPolicy_HostAffinityRule_Operator {
	if x != nil {
		return x.Op
	}
	return PlacementPolicy_HostAffinityRule_OPERATOR_UNSPECIFIED
}

func (x *PlacementPolicy_HostAffinityRule) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type AttachedDiskSpec_DiskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the disk.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the disk type.
	TypeId string `protobuf:"bytes,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	// Size of the disk, specified in bytes.
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// Types that are assignable to SourceOneof:
	//	*AttachedDiskSpec_DiskSpec_ImageId
	//	*AttachedDiskSpec_DiskSpec_SnapshotId
	SourceOneof isAttachedDiskSpec_DiskSpec_SourceOneof `protobuf_oneof:"source_oneof"`
	// When set to true, disk will not be deleted even after managed instance is deleted.
	// It will be a user's responsibility to delete such disks.
	PreserveAfterInstanceDelete bool `protobuf:"varint,6,opt,name=preserve_after_instance_delete,json=preserveAfterInstanceDelete,proto3" json:"preserve_after_instance_delete,omitempty"`
}

func (x *AttachedDiskSpec_DiskSpec) Reset() {
	*x = AttachedDiskSpec_DiskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachedDiskSpec_DiskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedDiskSpec_DiskSpec) ProtoMessage() {}

func (x *AttachedDiskSpec_DiskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedDiskSpec_DiskSpec.ProtoReflect.Descriptor instead.
func (*AttachedDiskSpec_DiskSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{11, 0}
}

func (x *AttachedDiskSpec_DiskSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AttachedDiskSpec_DiskSpec) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *AttachedDiskSpec_DiskSpec) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (m *AttachedDiskSpec_DiskSpec) GetSourceOneof() isAttachedDiskSpec_DiskSpec_SourceOneof {
	if m != nil {
		return m.SourceOneof
	}
	return nil
}

func (x *AttachedDiskSpec_DiskSpec) GetImageId() string {
	if x, ok := x.GetSourceOneof().(*AttachedDiskSpec_DiskSpec_ImageId); ok {
		return x.ImageId
	}
	return ""
}

func (x *AttachedDiskSpec_DiskSpec) GetSnapshotId() string {
	if x, ok := x.GetSourceOneof().(*AttachedDiskSpec_DiskSpec_SnapshotId); ok {
		return x.SnapshotId
	}
	return ""
}

func (x *AttachedDiskSpec_DiskSpec) GetPreserveAfterInstanceDelete() bool {
	if x != nil {
		return x.PreserveAfterInstanceDelete
	}
	return false
}

type isAttachedDiskSpec_DiskSpec_SourceOneof interface {
	isAttachedDiskSpec_DiskSpec_SourceOneof()
}

type AttachedDiskSpec_DiskSpec_ImageId struct {
	// ID of the image that will be used for disk creation.
	ImageId string `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3,oneof"`
}

type AttachedDiskSpec_DiskSpec_SnapshotId struct {
	// ID of the snapshot that will be used for disk creation.
	SnapshotId string `protobuf:"bytes,5,opt,name=snapshot_id,json=snapshotId,proto3,oneof"`
}

func (*AttachedDiskSpec_DiskSpec_ImageId) isAttachedDiskSpec_DiskSpec_SourceOneof() {}

func (*AttachedDiskSpec_DiskSpec_SnapshotId) isAttachedDiskSpec_DiskSpec_SourceOneof() {}

type HealthCheckSpec_TcpOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port to use for TCP health checks.
	Port int64 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *HealthCheckSpec_TcpOptions) Reset() {
	*x = HealthCheckSpec_TcpOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckSpec_TcpOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckSpec_TcpOptions) ProtoMessage() {}

func (x *HealthCheckSpec_TcpOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckSpec_TcpOptions.ProtoReflect.Descriptor instead.
func (*HealthCheckSpec_TcpOptions) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{23, 0}
}

func (x *HealthCheckSpec_TcpOptions) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

type HealthCheckSpec_HttpOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port to use for HTTP health checks.
	Port int64 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// URL path to set for health checking requests.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *HealthCheckSpec_HttpOptions) Reset() {
	*x = HealthCheckSpec_HttpOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckSpec_HttpOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckSpec_HttpOptions) ProtoMessage() {}

func (x *HealthCheckSpec_HttpOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckSpec_HttpOptions.ProtoReflect.Descriptor instead.
func (*HealthCheckSpec_HttpOptions) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP(), []int{23, 1}
}

func (x *HealthCheckSpec_HttpOptions) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HealthCheckSpec_HttpOptions) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_yandex_cloud_compute_v1_instancegroup_instance_group_proto protoreflect.FileDescriptor

var file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x0d, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x64, 0x0a,
	0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x58, 0x0a, 0x0d, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x64, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x68, 0x0a, 0x13, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x10, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x65, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x1e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x8a, 0x01, 0x0a, 0x1f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x1c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6f, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x06, 0x22, 0x6d,
	0x0a, 0x1c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5b, 0x0a,
	0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x8a, 0xc8, 0x31, 0x05, 0x31, 0x2d, 0x31, 0x32,
	0x38, 0xf2, 0xc7, 0x31, 0x0f, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e,
	0x5f, 0x2d, 0x5d, 0x2a, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d,
	0x31, 0x32, 0x38, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x11, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe4,
	0x03, 0x0a, 0x15, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x96, 0x02, 0x0a,
	0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x77, 0x61,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0xb5, 0x10, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x60, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x0d, 0x74,
	0x65, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x1a, 0xb6, 0x06, 0x0a,
	0x09, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x6d, 0x69,
	0x6e, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0xc7, 0x31,
	0x05, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x58, 0x0a, 0x14, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x31, 0x6d,
	0x2d, 0x31, 0x30, 0x6d, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x77, 0x61, 0x72,
	0x6d, 0x75, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0xfa,
	0xc7, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x6d, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x31, 0x6d, 0x2d, 0x33, 0x30, 0x6d, 0x52,
	0x15, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0xc7,
	0x31, 0x03, 0x3e, 0x3d, 0x31, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x77, 0x0a, 0x14, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x12, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65,
	0x42, 0x07, 0x82, 0xc8, 0x31, 0x03, 0x3c, 0x3d, 0x33, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x41,
	0x55, 0x54, 0x4f, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x5a, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x4f, 0x0a, 0x12, 0x43, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x12, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x31, 0x30, 0x2d,
	0x31, 0x30, 0x30, 0x52, 0x11, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xb3, 0x06, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x69, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x6f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31, 0x32,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x40, 0x5f, 0x5d, 0x5b,
	0x20, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2e, 0x2f, 0x40, 0x5f, 0x2c, 0x3a,
	0x3b, 0x28, 0x29, 0x5c, 0x5b, 0x5c, 0x5d, 0x3c, 0x3e, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x39,
	0x38, 0x7d, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xbb,
	0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x58, 0xf2, 0xc7, 0x31, 0x32,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x40, 0x5f, 0x5d, 0x5b,
	0x20, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2e, 0x2f, 0x40, 0x5f, 0x2c, 0x3a,
	0x3b, 0x28, 0x29, 0x5c, 0x5b, 0x5c, 0x5d, 0x3c, 0x3e, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x39,
	0x38, 0x7d, 0xb2, 0xc8, 0x31, 0x1e, 0x12, 0x1c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5f, 0x5d, 0x7b, 0x30, 0x2c,
	0x33, 0x31, 0x7d, 0x24, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x06, 0xfa, 0xc7,
	0x31, 0x02, 0x3e, 0x30, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x30, 0x30, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x54,
	0x49, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57,
	0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x22, 0x41, 0x0a, 0x0a, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x55, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x2b, 0x0a, 0x0a,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x31, 0x2d,
	0x31, 0x30, 0x30, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x12, 0x0a, 0x0a, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0xc1, 0x03,
	0x0a, 0x0c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x32,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x30, 0x2d, 0x31,
	0x30, 0x30, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x30, 0x2d,
	0x31, 0x30, 0x30, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x2c, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x30, 0x2d, 0x31, 0x30,
	0x30, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2e,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x30, 0x2d, 0x31, 0x30, 0x30,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x30, 0x6d, 0x2d, 0x31, 0x68, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x58, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x46, 0x0a, 0x08, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10,
	0x02, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5b, 0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x5a,
	0x6f, 0x6e, 0x65, 0x42, 0x07, 0x82, 0xc8, 0x31, 0x03, 0x3e, 0x3d, 0x31, 0x52, 0x05, 0x7a, 0x6f,
	0x6e, 0x65, 0x73, 0x1a, 0x25, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7,
	0x31, 0x01, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xe6, 0x0a, 0x0a, 0x10, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x92, 0x01, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x35, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x8a, 0xc8, 0x31, 0x05,
	0x3c, 0x3d, 0x31, 0x32, 0x38, 0xb2, 0xc8, 0x31, 0x06, 0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0xb2,
	0xc8, 0x31, 0x16, 0x12, 0x14, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x2e, 0x2f, 0x5c,
	0x40, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x98, 0x01, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x35, 0x82, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38,
	0x8a, 0xc8, 0x31, 0x08, 0x3c, 0x3d, 0x32, 0x36, 0x32, 0x31, 0x34, 0x34, 0xb2, 0xc8, 0x31, 0x06,
	0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x12, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a,
	0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x63, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0c, 0x62,
	0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x72, 0x0a, 0x14, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x42, 0x07, 0x82, 0xc8, 0x31, 0x03, 0x3c, 0x3d, 0x33, 0x52, 0x12, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12,
	0x7a, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x05, 0x82,
	0xc8, 0x31, 0x01, 0x31, 0x52, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x64, 0x0a, 0x11, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x61, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x93, 0x03, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x77, 0x0a, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x68, 0x6f, 0x73,
	0x74, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0xd8,
	0x01, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x60, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x50, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x38, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x22, 0x82, 0x02, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0xfa, 0xc7, 0x31,
	0x0e, 0x3c, 0x3d, 0x38, 0x32, 0x34, 0x36, 0x33, 0x33, 0x37, 0x32, 0x30, 0x38, 0x33, 0x32, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x6c, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x56, 0xfa, 0xc7, 0x31, 0x52, 0x32, 0x2c, 0x34, 0x2c,
	0x36, 0x2c, 0x38, 0x2c, 0x31, 0x30, 0x2c, 0x31, 0x32, 0x2c, 0x31, 0x34, 0x2c, 0x31, 0x36, 0x2c,
	0x31, 0x38, 0x2c, 0x32, 0x30, 0x2c, 0x32, 0x32, 0x2c, 0x32, 0x34, 0x2c, 0x32, 0x36, 0x2c, 0x32,
	0x38, 0x2c, 0x33, 0x30, 0x2c, 0x33, 0x32, 0x2c, 0x33, 0x34, 0x2c, 0x33, 0x36, 0x2c, 0x34, 0x30,
	0x2c, 0x34, 0x34, 0x2c, 0x34, 0x38, 0x2c, 0x35, 0x32, 0x2c, 0x35, 0x36, 0x2c, 0x36, 0x30, 0x2c,
	0x36, 0x34, 0x2c, 0x36, 0x38, 0x2c, 0x37, 0x32, 0x2c, 0x37, 0x36, 0x2c, 0x38, 0x30, 0x52, 0x05,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0xfa, 0xc7,
	0x31, 0x0d, 0x30, 0x2c, 0x35, 0x2c, 0x32, 0x30, 0x2c, 0x35, 0x30, 0x2c, 0x31, 0x30, 0x30, 0x52,
	0x0c, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xfa, 0xc7, 0x31,
	0x07, 0x30, 0x2c, 0x31, 0x2c, 0x32, 0x2c, 0x34, 0x52, 0x04, 0x67, 0x70, 0x75, 0x73, 0x22, 0xb4,
	0x05, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x56, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xf2, 0xc7, 0x31, 0x16, 0x7c, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x39, 0x7d, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x42, 0x04, 0xe8,
	0xc7, 0x31, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x37, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38, 0xf2, 0xc7, 0x31, 0x11, 0x5b, 0x2d, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x7b, 0x7d, 0x5d, 0x2a, 0x52, 0x06,
	0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0xaf, 0x02, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d,
	0x32, 0x35, 0x36, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1a, 0xfa,
	0xc7, 0x31, 0x16, 0x34, 0x31, 0x39, 0x34, 0x33, 0x30, 0x34, 0x2d, 0x32, 0x38, 0x35, 0x38, 0x37,
	0x33, 0x30, 0x32, 0x33, 0x32, 0x32, 0x31, 0x37, 0x36, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x25, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x48, 0x00, 0x52, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31,
	0x04, 0x3c, 0x3d, 0x35, 0x30, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x3b, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x10, 0x02, 0x22, 0xe6, 0x02, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x70, 0x0a, 0x17,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x56, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x70,
	0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x56, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0xf4,
	0x01, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x64, 0x0a, 0x13, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4f, 0x6e, 0x65, 0x54, 0x6f,
	0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x54,
	0x6f, 0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5e, 0x0a, 0x10, 0x64,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x6e,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x64, 0x6e, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0f, 0x4f, 0x6e, 0x65, 0x54, 0x6f, 0x4f,
	0x6e, 0x65, 0x4e, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4f, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x73, 0x22, 0x7a, 0x0a, 0x0d, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12,
	0x1e, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xfa, 0xc7,
	0x31, 0x07, 0x30, 0x2d, 0x38, 0x36, 0x34, 0x30, 0x30, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x74, 0x72,
	0x22, 0x34, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4f, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x46, 0x54, 0x57,
	0x41, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x4c, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x4c, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0xdc, 0x01, 0x0a, 0x10,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x62, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x64, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x3e, 0x3d, 0x31, 0x73, 0x52,
	0x19, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x02, 0x0a, 0x0f, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x38,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xf2, 0xc7,
	0x31, 0x20, 0x7c, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x3f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a,
	0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa3, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x47, 0x82, 0xc8, 0x31, 0x04,
	0x3c, 0x3d, 0x36, 0x34, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0xf2, 0xc7, 0x31, 0x0f,
	0x5b, 0x2d, 0x5f, 0x2e, 0x2f, 0x5c, 0x40, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0xb2,
	0xc8, 0x31, 0x06, 0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x16, 0x12, 0x14, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x2e, 0x2f, 0x5c, 0x40, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x5d, 0x2a, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x73, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x70, 0x65, 0x63, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x64, 0x0a, 0x1c, 0x6d,
	0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0xc7,
	0x31, 0x04, 0x3e, 0x3d, 0x31, 0x73, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x6d, 0x0a,
	0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x42, 0x07, 0x82, 0xc8, 0x31, 0x03, 0x3e, 0x3d, 0x31, 0x52, 0x10, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x64, 0x0a, 0x1c,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa,
	0xc7, 0x31, 0x04, 0x3e, 0x3d, 0x31, 0x73, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x88, 0x05, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x31, 0x73, 0x2d, 0x33, 0x30, 0x30, 0x73,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x31, 0x73, 0x2d, 0x36,
	0x30, 0x73, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x13, 0x75,
	0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x18, 0xfa, 0xc7, 0x31, 0x14, 0x30, 0x2c,
	0x32, 0x2c, 0x33, 0x2c, 0x34, 0x2c, 0x35, 0x2c, 0x36, 0x2c, 0x37, 0x2c, 0x38, 0x2c, 0x39, 0x2c,
	0x31, 0x30, 0x52, 0x12, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x45, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x18, 0xfa, 0xc7, 0x31, 0x14, 0x30, 0x2c, 0x32, 0x2c, 0x33, 0x2c, 0x34, 0x2c, 0x35,
	0x2c, 0x36, 0x2c, 0x37, 0x2c, 0x38, 0x2c, 0x39, 0x2c, 0x31, 0x30, 0x52, 0x10, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x64, 0x0a,
	0x0b, 0x74, 0x63, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x63, 0x70, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x68, 0x74, 0x74, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2d, 0x0a, 0x0a,
	0x54, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x31, 0x2d,
	0x36, 0x35, 0x35, 0x33, 0x35, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x42, 0x0a, 0x0b, 0x48,
	0x74, 0x74, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x31, 0x2d,
	0x36, 0x35, 0x35, 0x33, 0x35, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x42,
	0x1c, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0xa0, 0x06,
	0x0a, 0x0f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x66, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xec, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0e,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x44, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x4f,
	0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x10, 0x12,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x41, 0x52,
	0x4d, 0x55, 0x50, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49,
	0x43, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x55, 0x54, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x16, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x17, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x50, 0x41,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x19,
	0x22, 0xb0, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x12, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x10, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x63,
	0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x57, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x4f, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x74, 0x52, 0x0b, 0x6f, 0x6e,
	0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x64, 0x6e, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x0a, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xcb, 0x01, 0x0a,
	0x0b, 0x4f, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a,
	0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x76, 0x0a, 0x09, 0x44, 0x6e,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x66, 0x71, 0x64,
	0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b,
	0xfa, 0xc7, 0x31, 0x07, 0x30, 0x2d, 0x38, 0x36, 0x34, 0x30, 0x30, 0x52, 0x03, 0x74, 0x74, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70,
	0x74, 0x72, 0x22, 0x5f, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2a, 0x3b, 0x0a, 0x09, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x16, 0x49, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02,
	0x42, 0x84, 0x01, 0x0a, 0x29, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5a, 0x57,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescOnce sync.Once
	file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescData = file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDesc
)

func file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescGZIP() []byte {
	file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescData)
	})
	return file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDescData
}

var file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_goTypes = []interface{}{
	(IpVersion)(0),                                 // 0: yandex.cloud.compute.v1.instancegroup.IpVersion
	(InstanceGroup_Status)(0),                      // 1: yandex.cloud.compute.v1.instancegroup.InstanceGroup.Status
	(ScalePolicy_AutoScale_AutoScaleType)(0),       // 2: yandex.cloud.compute.v1.instancegroup.ScalePolicy.AutoScale.AutoScaleType
	(ScalePolicy_CustomRule_RuleType)(0),           // 3: yandex.cloud.compute.v1.instancegroup.ScalePolicy.CustomRule.RuleType
	(ScalePolicy_CustomRule_MetricType)(0),         // 4: yandex.cloud.compute.v1.instancegroup.ScalePolicy.CustomRule.MetricType
	(DeployPolicy_Strategy)(0),                     // 5: yandex.cloud.compute.v1.instancegroup.DeployPolicy.Strategy
	(PlacementPolicy_HostAffinityRule_Operator)(0), // 6: yandex.cloud.compute.v1.instancegroup.PlacementPolicy.HostAffinityRule.Operator
	(AttachedDiskSpec_Mode)(0),                     // 7: yandex.cloud.compute.v1.instancegroup.AttachedDiskSpec.Mode
	(NetworkSettings_Type)(0),                      // 8: yandex.cloud.compute.v1.instancegroup.NetworkSettings.Type
	(ManagedInstance_Status)(0),                    // 9: yandex.cloud.compute.v1.instancegroup.ManagedInstance.Status
	(*InstanceGroup)(nil),                          // 10: yandex.cloud.compute.v1.instancegroup.InstanceGroup
	(*ApplicationLoadBalancerState)(nil),           // 11: yandex.cloud.compute.v1.instancegroup.ApplicationLoadBalancerState
	(*Variable)(nil),                               // 12: yandex.cloud.compute.v1.instancegroup.Variable
	(*LoadBalancerState)(nil),                      // 13: yandex.cloud.compute.v1.instancegroup.LoadBalancerState
	(*ManagedInstancesState)(nil),                  // 14: yandex.cloud.compute.v1.instancegroup.ManagedInstancesState
	(*ScalePolicy)(nil),                            // 15: yandex.cloud.compute.v1.instancegroup.ScalePolicy
	(*DeployPolicy)(nil),                           // 16: yandex.cloud.compute.v1.instancegroup.DeployPolicy
	(*AllocationPolicy)(nil),                       // 17: yandex.cloud.compute.v1.instancegroup.AllocationPolicy
	(*InstanceTemplate)(nil),                       // 18: yandex.cloud.compute.v1.instancegroup.InstanceTemplate
	(*PlacementPolicy)(nil),                        // 19: yandex.cloud.compute.v1.instancegroup.PlacementPolicy
	(*ResourcesSpec)(nil),                          // 20: yandex.cloud.compute.v1.instancegroup.ResourcesSpec
	(*AttachedDiskSpec)(nil),                       // 21: yandex.cloud.compute.v1.instancegroup.AttachedDiskSpec
	(*NetworkInterfaceSpec)(nil),                   // 22: yandex.cloud.compute.v1.instancegroup.NetworkInterfaceSpec
	(*PrimaryAddressSpec)(nil),                     // 23: yandex.cloud.compute.v1.instancegroup.PrimaryAddressSpec
	(*OneToOneNatSpec)(nil),                        // 24: yandex.cloud.compute.v1.instancegroup.OneToOneNatSpec
	(*DnsRecordSpec)(nil),                          // 25: yandex.cloud.compute.v1.instancegroup.DnsRecordSpec
	(*SchedulingPolicy)(nil),                       // 26: yandex.cloud.compute.v1.instancegroup.SchedulingPolicy
	(*NetworkSettings)(nil),                        // 27: yandex.cloud.compute.v1.instancegroup.NetworkSettings
	(*LoadBalancerSpec)(nil),                       // 28: yandex.cloud.compute.v1.instancegroup.LoadBalancerSpec
	(*TargetGroupSpec)(nil),                        // 29: yandex.cloud.compute.v1.instancegroup.TargetGroupSpec
	(*ApplicationLoadBalancerSpec)(nil),            // 30: yandex.cloud.compute.v1.instancegroup.ApplicationLoadBalancerSpec
	(*ApplicationTargetGroupSpec)(nil),             // 31: yandex.cloud.compute.v1.instancegroup.ApplicationTargetGroupSpec
	(*HealthChecksSpec)(nil),                       // 32: yandex.cloud.compute.v1.instancegroup.HealthChecksSpec
	(*HealthCheckSpec)(nil),                        // 33: yandex.cloud.compute.v1.instancegroup.HealthCheckSpec
	(*ManagedInstance)(nil),                        // 34: yandex.cloud.compute.v1.instancegroup.ManagedInstance
	(*NetworkInterface)(nil),                       // 35: yandex.cloud.compute.v1.instancegroup.NetworkInterface
	(*PrimaryAddress)(nil),                         // 36: yandex.cloud.compute.v1.instancegroup.PrimaryAddress
	(*OneToOneNat)(nil),                            // 37: yandex.cloud.compute.v1.instancegroup.OneToOneNat
	(*DnsRecord)(nil),                              // 38: yandex.cloud.compute.v1.instancegroup.DnsRecord
	(*LogRecord)(nil),                              // 39: yandex.cloud.compute.v1.instancegroup.LogRecord
	nil,                                            // 40: yandex.cloud.compute.v1.instancegroup.InstanceGroup.LabelsEntry
	(*ManagedInstancesState_Statuses)(nil),         // 41: yandex.cloud.compute.v1.instancegroup.ManagedInstancesState.Statuses
	(*ScalePolicy_AutoScale)(nil),                  // 42: yandex.cloud.compute.v1.instancegroup.ScalePolicy.AutoScale
	(*ScalePolicy_CpuUtilizationRule)(nil),         // 43: yandex.cloud.compute.v1.instancegroup.ScalePolicy.CpuUtilizationRule
	(*ScalePolicy_CustomRule)(nil),                 // 44: yandex.cloud.compute.v1.instancegroup.ScalePolicy.CustomRule
	(*ScalePolicy_FixedScale)(nil),                 // 45: yandex.cloud.compute.v1.instancegroup.ScalePolicy.FixedScale
	nil,                                            // 46: yandex.cloud.compute.v1.instancegroup.ScalePolicy.CustomRule.LabelsEntry
	(*AllocationPolicy_Zone)(nil),                  // 47: yandex.cloud.compute.v1.instancegroup.AllocationPolicy.Zone
	nil,                                            // 48: yandex.cloud.compute.v1.instancegroup.InstanceTemplate.LabelsEntry
	nil,                                            // 49: yandex.cloud.compute.v1.instancegroup.InstanceTemplate.MetadataEntry
	(*PlacementPolicy_HostAffinityRule)(nil),       // 50: yandex.cloud.compute.v1.instancegroup.PlacementPolicy.HostAffinityRule
	(*AttachedDiskSpec_DiskSpec)(nil),              // 51: yandex.cloud.compute.v1.instancegroup.AttachedDiskSpec.DiskSpec
	nil,                                            // 52: yandex.cloud.compute.v1.instancegroup.TargetGroupSpec.LabelsEntry
	nil,                                            // 53: yandex.cloud.compute.v1.instancegroup.ApplicationTargetGroupSpec.LabelsEntry
	(*HealthCheckSpec_TcpOptions)(nil),             // 54: yandex.cloud.compute.v1.instancegroup.HealthCheckSpec.TcpOptions
	(*HealthCheckSpec_HttpOptions)(nil),            // 55: yandex.cloud.compute.v1.instancegroup.HealthCheckSpec.HttpOptions
	(*timestamppb.Timestamp)(nil),                  // 56: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                    // 57: google.protobuf.Duration
}
var file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_depIdxs = []int32{
	56, // 0: yandex.cloud.compute.v1.instancegroup.InstanceGroup.created_at:type_name -> google.protobuf.Timestamp
	40, // 1: yandex.cloud.compute.v1.instancegroup.InstanceGroup.labels:type_name -> yandex.cloud.compute.v1.instancegroup.InstanceGroup.LabelsEntry
	18, // 2: yandex.cloud.compute.v1.instancegroup.InstanceGroup.instance_template:type_name -> yandex.cloud.compute.v1.instancegroup.InstanceTemplate
	15, // 3: yandex.cloud.compute.v1.instancegroup.InstanceGroup.scale_policy:type_name -> yandex.cloud.compute.v1.instancegroup.ScalePolicy
	16, // 4: yandex.cloud.compute.v1.instancegroup.InstanceGroup.deploy_policy:type_name -> yandex.cloud.compute.v1.instancegroup.DeployPolicy
	17, // 5: yandex.cloud.compute.v1.instancegroup.InstanceGroup.allocation_policy:type_name -> yandex.cloud.compute.v1.instancegroup.AllocationPolicy
	13, // 6: yandex.cloud.compute.v1.instancegroup.InstanceGroup.load_balancer_state:type_name -> yandex.cloud.compute.v1.instancegroup.LoadBalancerState
	14, // 7: yandex.cloud.compute.v1.instancegroup.InstanceGroup.managed_instances_state:type_name -> yandex.cloud.compute.v1.instancegroup.ManagedInstancesState
	28, // 8: yandex.cloud.compute.v1.instancegroup.InstanceGroup.load_balancer_spec:type_name -> yandex.cloud.compute.v1.instancegroup.LoadBalancerSpec
	32, // 9: yandex.cloud.compute.v1.instancegroup.InstanceGroup.health_checks_spec:type_name -> yandex.cloud.compute.v1.instancegroup.HealthChecksSpec
	1,  // 10: yandex.cloud.compute.v1.instancegroup.InstanceGroup.status:type_name -> yandex.cloud.compute.v1.instancegroup.InstanceGroup.Status
	12, // 11: yandex.cloud.compute.v1.instancegroup.InstanceGroup.variables:type_name -> yandex.cloud.compute.v1.instancegroup.Variable
	30, // 12: yandex.cloud.compute.v1.instancegroup.InstanceGroup.application_load_balancer_spec:type_name -> yandex.cloud.compute.v1.instancegroup.ApplicationLoadBalancerSpec
	11, // 13: yandex.cloud.compute.v1.instancegroup.InstanceGroup.application_load_balancer_state:type_name -> yandex.cloud.compute.v1.instancegroup.ApplicationLoadBalancerState
	45, // 14: yandex.cloud.compute.v1.instancegroup.ScalePolicy.fixed_scale:type_name -> yandex.cloud.compute.v1.instancegroup.ScalePolicy.FixedScale
	42, // 15: yandex.cloud.compute.v1.instancegroup.ScalePolicy.auto_scale:type_name -> yandex.cloud.compute.v1.instancegroup.ScalePolicy.AutoScale
	42, // 16: yandex.cloud.compute.v1.instancegroup.ScalePolicy.test_auto_scale:type_name -> yandex.cloud.compute.v1.instancegroup.ScalePolicy.AutoScale
	57, // 17: yandex.cloud.compute.v1.instancegroup.DeployPolicy.startup_duration:type_name -> google.protobuf.Duration
	5,  // 18: yandex.cloud.compute.v1.instancegroup.DeployPolicy.strategy:type_name -> yandex.cloud.compute.v1.instancegroup.DeployPolicy.Strategy
	47, // 19: yandex.cloud.compute.v1.instancegroup.AllocationPolicy.zones:type_name -> yandex.cloud.compute.v1.instancegroup.AllocationPolicy.Zone
	48, // 20: yandex.cloud.compute.v1.instancegroup.InstanceTemplate.labels:type_name -> yandex.cloud.compute.v1.instancegroup.InstanceTemplate.LabelsEntry
	20, // 21: yandex.cloud.compute.v1.instancegroup.InstanceTemplate.resources_spec:type_name -> yandex.cloud.compute.v1.instancegroup.ResourcesSpec
	49, // 22: yandex.cloud.compute.v1.instancegroup.InstanceTemplate.metadata:type_name -> yandex.cloud.compute.v1.instancegroup.InstanceTemplate.MetadataEntry
	21, // 23: yandex.cloud.compute.v1.instancegroup.InstanceTemplate.boot_disk_spec:type_name -> yandex.cloud.compute.v1.instancegroup.AttachedDiskSpec
	21, // 24: yandex.cloud.compute.v1.instancegroup.InstanceTemplate.secondary_disk_specs:type_name -> yandex.cloud.compute.v1.instancegroup.AttachedDiskSpec
	22, // 25: yandex.cloud.compute.v1.instancegroup.InstanceTemplate.network_interface_specs:type_name -> yandex.cloud.compute.v1.instancegroup.NetworkInterfaceSpec
	26, // 26: yandex.cloud.compute.v1.instancegroup.InstanceTemplate.scheduling_policy:type_name -> yandex.cloud.compute.v1.instancegroup.SchedulingPolicy
	27, // 27: yandex.cloud.compute.v1.instancegroup.InstanceTemplate.network_settings:type_name -> yandex.cloud.compute.v1.instancegroup.NetworkSettings
	19, // 28: yandex.cloud.compute.v1.instancegroup.InstanceTemplate.placement_policy:type_name -> yandex.cloud.compute.v1.instancegroup.PlacementPolicy
	50, // 29: yandex.cloud.compute.v1.instancegroup.PlacementPolicy.host_affinity_rules:type_name -> yandex.cloud.compute.v1.instancegroup.PlacementPolicy.HostAffinityRule
	7,  // 30: yandex.cloud.compute.v1.instancegroup.AttachedDiskSpec.mode:type_name -> yandex.cloud.compute.v1.instancegroup.AttachedDiskSpec.Mode
	51, // 31: yandex.cloud.compute.v1.instancegroup.AttachedDiskSpec.disk_spec:type_name -> yandex.cloud.compute.v1.instancegroup.AttachedDiskSpec.DiskSpec
	23, // 32: yandex.cloud.compute.v1.instancegroup.NetworkInterfaceSpec.primary_v4_address_spec:type_name -> yandex.cloud.compute.v1.instancegroup.PrimaryAddressSpec
	23, // 33: yandex.cloud.compute.v1.instancegroup.NetworkInterfaceSpec.primary_v6_address_spec:type_name -> yandex.cloud.compute.v1.instancegroup.PrimaryAddressSpec
	24, // 34: yandex.cloud.compute.v1.instancegroup.PrimaryAddressSpec.one_to_one_nat_spec:type_name -> yandex.cloud.compute.v1.instancegroup.OneToOneNatSpec
	25, // 35: yandex.cloud.compute.v1.instancegroup.PrimaryAddressSpec.dns_record_specs:type_name -> yandex.cloud.compute.v1.instancegroup.DnsRecordSpec
	0,  // 36: yandex.cloud.compute.v1.instancegroup.OneToOneNatSpec.ip_version:type_name -> yandex.cloud.compute.v1.instancegroup.IpVersion
	25, // 37: yandex.cloud.compute.v1.instancegroup.OneToOneNatSpec.dns_record_specs:type_name -> yandex.cloud.compute.v1.instancegroup.DnsRecordSpec
	8,  // 38: yandex.cloud.compute.v1.instancegroup.NetworkSettings.type:type_name -> yandex.cloud.compute.v1.instancegroup.NetworkSettings.Type
	29, // 39: yandex.cloud.compute.v1.instancegroup.LoadBalancerSpec.target_group_spec:type_name -> yandex.cloud.compute.v1.instancegroup.TargetGroupSpec
	57, // 40: yandex.cloud.compute.v1.instancegroup.LoadBalancerSpec.max_opening_traffic_duration:type_name -> google.protobuf.Duration
	52, // 41: yandex.cloud.compute.v1.instancegroup.TargetGroupSpec.labels:type_name -> yandex.cloud.compute.v1.instancegroup.TargetGroupSpec.LabelsEntry
	31, // 42: yandex.cloud.compute.v1.instancegroup.ApplicationLoadBalancerSpec.target_group_spec:type_name -> yandex.cloud.compute.v1.instancegroup.ApplicationTargetGroupSpec
	57, // 43: yandex.cloud.compute.v1.instancegroup.ApplicationLoadBalancerSpec.max_opening_traffic_duration:type_name -> google.protobuf.Duration
	53, // 44: yandex.cloud.compute.v1.instancegroup.ApplicationTargetGroupSpec.labels:type_name -> yandex.cloud.compute.v1.instancegroup.ApplicationTargetGroupSpec.LabelsEntry
	33, // 45: yandex.cloud.compute.v1.instancegroup.HealthChecksSpec.health_check_specs:type_name -> yandex.cloud.compute.v1.instancegroup.HealthCheckSpec
	57, // 46: yandex.cloud.compute.v1.instancegroup.HealthChecksSpec.max_checking_health_duration:type_name -> google.protobuf.Duration
	57, // 47: yandex.cloud.compute.v1.instancegroup.HealthCheckSpec.interval:type_name -> google.protobuf.Duration
	57, // 48: yandex.cloud.compute.v1.instancegroup.HealthCheckSpec.timeout:type_name -> google.protobuf.Duration
	54, // 49: yandex.cloud.compute.v1.instancegroup.HealthCheckSpec.tcp_options:type_name -> yandex.cloud.compute.v1.instancegroup.HealthCheckSpec.TcpOptions
	55, // 50: yandex.cloud.compute.v1.instancegroup.HealthCheckSpec.http_options:type_name -> yandex.cloud.compute.v1.instancegroup.HealthCheckSpec.HttpOptions
	9,  // 51: yandex.cloud.compute.v1.instancegroup.ManagedInstance.status:type_name -> yandex.cloud.compute.v1.instancegroup.ManagedInstance.Status
	35, // 52: yandex.cloud.compute.v1.instancegroup.ManagedInstance.network_interfaces:type_name -> yandex.cloud.compute.v1.instancegroup.NetworkInterface
	56, // 53: yandex.cloud.compute.v1.instancegroup.ManagedInstance.status_changed_at:type_name -> google.protobuf.Timestamp
	36, // 54: yandex.cloud.compute.v1.instancegroup.NetworkInterface.primary_v4_address:type_name -> yandex.cloud.compute.v1.instancegroup.PrimaryAddress
	36, // 55: yandex.cloud.compute.v1.instancegroup.NetworkInterface.primary_v6_address:type_name -> yandex.cloud.compute.v1.instancegroup.PrimaryAddress
	37, // 56: yandex.cloud.compute.v1.instancegroup.PrimaryAddress.one_to_one_nat:type_name -> yandex.cloud.compute.v1.instancegroup.OneToOneNat
	38, // 57: yandex.cloud.compute.v1.instancegroup.PrimaryAddress.dns_records:type_name -> yandex.cloud.compute.v1.instancegroup.DnsRecord
	0,  // 58: yandex.cloud.compute.v1.instancegroup.OneToOneNat.ip_version:type_name -> yandex.cloud.compute.v1.instancegroup.IpVersion
	38, // 59: yandex.cloud.compute.v1.instancegroup.OneToOneNat.dns_records:type_name -> yandex.cloud.compute.v1.instancegroup.DnsRecord
	56, // 60: yandex.cloud.compute.v1.instancegroup.LogRecord.timestamp:type_name -> google.protobuf.Timestamp
	57, // 61: yandex.cloud.compute.v1.instancegroup.ScalePolicy.AutoScale.measurement_duration:type_name -> google.protobuf.Duration
	57, // 62: yandex.cloud.compute.v1.instancegroup.ScalePolicy.AutoScale.warmup_duration:type_name -> google.protobuf.Duration
	57, // 63: yandex.cloud.compute.v1.instancegroup.ScalePolicy.AutoScale.stabilization_duration:type_name -> google.protobuf.Duration
	43, // 64: yandex.cloud.compute.v1.instancegroup.ScalePolicy.AutoScale.cpu_utilization_rule:type_name -> yandex.cloud.compute.v1.instancegroup.ScalePolicy.CpuUtilizationRule
	44, // 65: yandex.cloud.compute.v1.instancegroup.ScalePolicy.AutoScale.custom_rules:type_name -> yandex.cloud.compute.v1.instancegroup.ScalePolicy.CustomRule
	2,  // 66: yandex.cloud.compute.v1.instancegroup.ScalePolicy.AutoScale.auto_scale_type:type_name -> yandex.cloud.compute.v1.instancegroup.ScalePolicy.AutoScale.AutoScaleType
	3,  // 67: yandex.cloud.compute.v1.instancegroup.ScalePolicy.CustomRule.rule_type:type_name -> yandex.cloud.compute.v1.instancegroup.ScalePolicy.CustomRule.RuleType
	4,  // 68: yandex.cloud.compute.v1.instancegroup.ScalePolicy.CustomRule.metric_type:type_name -> yandex.cloud.compute.v1.instancegroup.ScalePolicy.CustomRule.MetricType
	46, // 69: yandex.cloud.compute.v1.instancegroup.ScalePolicy.CustomRule.labels:type_name -> yandex.cloud.compute.v1.instancegroup.ScalePolicy.CustomRule.LabelsEntry
	6,  // 70: yandex.cloud.compute.v1.instancegroup.PlacementPolicy.HostAffinityRule.op:type_name -> yandex.cloud.compute.v1.instancegroup.PlacementPolicy.HostAffinityRule.Operator
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_init() }
func file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_init() {
	if File_yandex_cloud_compute_v1_instancegroup_instance_group_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationLoadBalancerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedInstancesState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachedDiskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterfaceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryAddressSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneToOneNatSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsRecordSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetGroupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationLoadBalancerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationTargetGroupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthChecksSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneToOneNat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedInstancesState_Statuses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalePolicy_AutoScale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalePolicy_CpuUtilizationRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalePolicy_CustomRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalePolicy_FixedScale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationPolicy_Zone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementPolicy_HostAffinityRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachedDiskSpec_DiskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckSpec_TcpOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckSpec_HttpOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ScalePolicy_FixedScale_)(nil),
		(*ScalePolicy_AutoScale_)(nil),
	}
	file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*HealthCheckSpec_TcpOptions_)(nil),
		(*HealthCheckSpec_HttpOptions_)(nil),
	}
	file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*AttachedDiskSpec_DiskSpec_ImageId)(nil),
		(*AttachedDiskSpec_DiskSpec_SnapshotId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_msgTypes,
	}.Build()
	File_yandex_cloud_compute_v1_instancegroup_instance_group_proto = out.File
	file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_rawDesc = nil
	file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_goTypes = nil
	file_yandex_cloud_compute_v1_instancegroup_instance_group_proto_depIdxs = nil
}
