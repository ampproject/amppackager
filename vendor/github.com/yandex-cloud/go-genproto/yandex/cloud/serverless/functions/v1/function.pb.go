// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/serverless/functions/v1/function.proto

package functions

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	v1 "github.com/yandex-cloud/go-genproto/yandex/cloud/logging/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Function_Status int32

const (
	Function_STATUS_UNSPECIFIED Function_Status = 0
	// Function is being created.
	Function_CREATING Function_Status = 1
	// Function is ready to be invoked.
	Function_ACTIVE Function_Status = 2
	// Function is being deleted.
	Function_DELETING Function_Status = 3
	// Function failed.
	Function_ERROR Function_Status = 4
)

// Enum value maps for Function_Status.
var (
	Function_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "CREATING",
		2: "ACTIVE",
		3: "DELETING",
		4: "ERROR",
	}
	Function_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"CREATING":           1,
		"ACTIVE":             2,
		"DELETING":           3,
		"ERROR":              4,
	}
)

func (x Function_Status) Enum() *Function_Status {
	p := new(Function_Status)
	*p = x
	return p
}

func (x Function_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Function_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_serverless_functions_v1_function_proto_enumTypes[0].Descriptor()
}

func (Function_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_serverless_functions_v1_function_proto_enumTypes[0]
}

func (x Function_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Function_Status.Descriptor instead.
func (Function_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{0, 0}
}

type Version_Status int32

const (
	Version_STATUS_UNSPECIFIED Version_Status = 0
	// Version is being created.
	Version_CREATING Version_Status = 1
	// Version is ready to use.
	Version_ACTIVE Version_Status = 2
)

// Enum value maps for Version_Status.
var (
	Version_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "CREATING",
		2: "ACTIVE",
	}
	Version_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"CREATING":           1,
		"ACTIVE":             2,
	}
)

func (x Version_Status) Enum() *Version_Status {
	p := new(Version_Status)
	*p = x
	return p
}

func (x Version_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Version_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_serverless_functions_v1_function_proto_enumTypes[1].Descriptor()
}

func (Version_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_serverless_functions_v1_function_proto_enumTypes[1]
}

func (x Version_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Version_Status.Descriptor instead.
func (Version_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{1, 0}
}

type Mount_Mode int32

const (
	Mount_MODE_UNSPECIFIED Mount_Mode = 0
	Mount_READ_ONLY        Mount_Mode = 1
	Mount_READ_WRITE       Mount_Mode = 2
)

// Enum value maps for Mount_Mode.
var (
	Mount_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "READ_ONLY",
		2: "READ_WRITE",
	}
	Mount_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"READ_ONLY":        1,
		"READ_WRITE":       2,
	}
)

func (x Mount_Mode) Enum() *Mount_Mode {
	p := new(Mount_Mode)
	*p = x
	return p
}

func (x Mount_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mount_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_serverless_functions_v1_function_proto_enumTypes[2].Descriptor()
}

func (Mount_Mode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_serverless_functions_v1_function_proto_enumTypes[2]
}

func (x Mount_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mount_Mode.Descriptor instead.
func (Mount_Mode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{9, 0}
}

// A serverless function. For details about the concept, see [Functions](/docs/functions/concepts/function).
type Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the function. Generated at creation time.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the folder that the function belongs to.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Creation timestamp for the function.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Name of the function. The name is unique within the folder.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the function.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Function labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// URL that needs to be requested to invoke the function.
	HttpInvokeUrl string `protobuf:"bytes,8,opt,name=http_invoke_url,json=httpInvokeUrl,proto3" json:"http_invoke_url,omitempty"`
	// Status of the function.
	Status Function_Status `protobuf:"varint,9,opt,name=status,proto3,enum=yandex.cloud.serverless.functions.v1.Function_Status" json:"status,omitempty"`
}

func (x *Function) Reset() {
	*x = Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{0}
}

func (x *Function) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Function) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *Function) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Function) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Function) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Function) GetHttpInvokeUrl() string {
	if x != nil {
		return x.HttpInvokeUrl
	}
	return ""
}

func (x *Function) GetStatus() Function_Status {
	if x != nil {
		return x.Status
	}
	return Function_STATUS_UNSPECIFIED
}

// Version of a function. For details about the concept, see [Function versions](/docs/functions/concepts/function#version).
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the version.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the function that the version belongs to.
	FunctionId string `protobuf:"bytes,2,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	// Description of the version.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Creation timestamp for the version.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// ID of the runtime environment for the function.
	//
	// Supported environments and their identifiers are listed in the [Runtime environments](/docs/functions/concepts/runtime).
	Runtime string `protobuf:"bytes,6,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// Entrypoint for the function: the name of the function to be called as the handler.
	//
	// Specified in the format `<function file name>.<handler name>`, for example, `index.myFunction`.
	Entrypoint string `protobuf:"bytes,7,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	// Resources allocated to the version.
	Resources *Resources `protobuf:"bytes,8,opt,name=resources,proto3" json:"resources,omitempty"`
	// Timeout for the execution of the version.
	//
	// If the timeout is exceeded, Cloud Functions responds with a 504 HTTP code.
	ExecutionTimeout *durationpb.Duration `protobuf:"bytes,9,opt,name=execution_timeout,json=executionTimeout,proto3" json:"execution_timeout,omitempty"`
	// ID of the service account associated with the version.
	ServiceAccountId string `protobuf:"bytes,10,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Final size of the deployment package after unpacking.
	ImageSize int64 `protobuf:"varint,12,opt,name=image_size,json=imageSize,proto3" json:"image_size,omitempty"`
	// Status of the version.
	Status Version_Status `protobuf:"varint,13,opt,name=status,proto3,enum=yandex.cloud.serverless.functions.v1.Version_Status" json:"status,omitempty"`
	// Version tags. For details, see [Version tag](/docs/functions/concepts/function#tag).
	Tags []string `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	// Environment settings for the version.
	Environment map[string]string `protobuf:"bytes,16,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Network access. If specified the version will be attached to specified network/subnet(s).
	Connectivity *Connectivity `protobuf:"bytes,17,opt,name=connectivity,proto3" json:"connectivity,omitempty"`
	// Additional service accounts to be used by the version.
	NamedServiceAccounts map[string]string `protobuf:"bytes,18,rep,name=named_service_accounts,json=namedServiceAccounts,proto3" json:"named_service_accounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Yandex Lockbox secrets to be used by the version.
	Secrets []*Secret `protobuf:"bytes,19,rep,name=secrets,proto3" json:"secrets,omitempty"`
	// Options for logging from the function
	LogOptions *LogOptions `protobuf:"bytes,20,opt,name=log_options,json=logOptions,proto3" json:"log_options,omitempty"`
	// S3 mounts to be used by the version.
	StorageMounts []*StorageMount `protobuf:"bytes,21,rep,name=storage_mounts,json=storageMounts,proto3" json:"storage_mounts,omitempty"`
	// Config for asynchronous invocations of the version
	AsyncInvocationConfig *AsyncInvocationConfig `protobuf:"bytes,22,opt,name=async_invocation_config,json=asyncInvocationConfig,proto3" json:"async_invocation_config,omitempty"`
	// Optional size of in-memory mounted /tmp directory in bytes.
	TmpfsSize int64 `protobuf:"varint,23,opt,name=tmpfs_size,json=tmpfsSize,proto3" json:"tmpfs_size,omitempty"`
	// The maximum number of requests processed by a function instance at the same time
	Concurrency int64 `protobuf:"varint,24,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	// Mounts to be used by the version.
	Mounts []*Mount `protobuf:"bytes,25,rep,name=mounts,proto3" json:"mounts,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{1}
}

func (x *Version) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Version) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *Version) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Version) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Version) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *Version) GetEntrypoint() string {
	if x != nil {
		return x.Entrypoint
	}
	return ""
}

func (x *Version) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Version) GetExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExecutionTimeout
	}
	return nil
}

func (x *Version) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *Version) GetImageSize() int64 {
	if x != nil {
		return x.ImageSize
	}
	return 0
}

func (x *Version) GetStatus() Version_Status {
	if x != nil {
		return x.Status
	}
	return Version_STATUS_UNSPECIFIED
}

func (x *Version) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Version) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *Version) GetConnectivity() *Connectivity {
	if x != nil {
		return x.Connectivity
	}
	return nil
}

func (x *Version) GetNamedServiceAccounts() map[string]string {
	if x != nil {
		return x.NamedServiceAccounts
	}
	return nil
}

func (x *Version) GetSecrets() []*Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Version) GetLogOptions() *LogOptions {
	if x != nil {
		return x.LogOptions
	}
	return nil
}

func (x *Version) GetStorageMounts() []*StorageMount {
	if x != nil {
		return x.StorageMounts
	}
	return nil
}

func (x *Version) GetAsyncInvocationConfig() *AsyncInvocationConfig {
	if x != nil {
		return x.AsyncInvocationConfig
	}
	return nil
}

func (x *Version) GetTmpfsSize() int64 {
	if x != nil {
		return x.TmpfsSize
	}
	return 0
}

func (x *Version) GetConcurrency() int64 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *Version) GetMounts() []*Mount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

// Resources allocated to a version.
type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of memory available to the version, specified in bytes, multiple of 128MB.
	Memory int64 `protobuf:"varint,1,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{2}
}

func (x *Resources) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

// Version deployment package.
type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the bucket that stores the code for the version.
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// Name of the object in the bucket that stores the code for the version.
	ObjectName string `protobuf:"bytes,2,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	// SHA256 hash of the version deployment package.
	Sha256 string `protobuf:"bytes,3,opt,name=sha256,proto3" json:"sha256,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{3}
}

func (x *Package) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *Package) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *Package) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

// Version connectivity specification.
type Connectivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network the version will have access to.
	// It's essential to specify network with subnets in all availability zones.
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Complete list of subnets (from the same network) the version can be attached to.
	// It's essential to specify at least one subnet for each availability zones.
	SubnetId []string `protobuf:"bytes,2,rep,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
}

func (x *Connectivity) Reset() {
	*x = Connectivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connectivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connectivity) ProtoMessage() {}

func (x *Connectivity) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connectivity.ProtoReflect.Descriptor instead.
func (*Connectivity) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{4}
}

func (x *Connectivity) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *Connectivity) GetSubnetId() []string {
	if x != nil {
		return x.SubnetId
	}
	return nil
}

type ScalingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the function that the scaling policy belongs to.
	FunctionId string `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	// Tag of the version that the scaling policy belongs to. For details, see [Version tag](/docs/functions/concepts/function#tag).
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	// Creation timestamp for the scaling policy
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Modification timestamp for the scaling policy
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// Minimum guaranteed provisioned instances count for all zones in total.
	// Billed separately.
	ProvisionedInstancesCount int64 `protobuf:"varint,6,opt,name=provisioned_instances_count,json=provisionedInstancesCount,proto3" json:"provisioned_instances_count,omitempty"`
	// Upper limit for instance count in each zone.
	// 0 means no limit.
	ZoneInstancesLimit int64 `protobuf:"varint,7,opt,name=zone_instances_limit,json=zoneInstancesLimit,proto3" json:"zone_instances_limit,omitempty"`
	// Upper limit of requests count in each zone.
	// 0 means no limit.
	ZoneRequestsLimit int64 `protobuf:"varint,8,opt,name=zone_requests_limit,json=zoneRequestsLimit,proto3" json:"zone_requests_limit,omitempty"`
}

func (x *ScalingPolicy) Reset() {
	*x = ScalingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalingPolicy) ProtoMessage() {}

func (x *ScalingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalingPolicy.ProtoReflect.Descriptor instead.
func (*ScalingPolicy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{5}
}

func (x *ScalingPolicy) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *ScalingPolicy) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ScalingPolicy) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ScalingPolicy) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *ScalingPolicy) GetProvisionedInstancesCount() int64 {
	if x != nil {
		return x.ProvisionedInstancesCount
	}
	return 0
}

func (x *ScalingPolicy) GetZoneInstancesLimit() int64 {
	if x != nil {
		return x.ZoneInstancesLimit
	}
	return 0
}

func (x *ScalingPolicy) GetZoneRequestsLimit() int64 {
	if x != nil {
		return x.ZoneRequestsLimit
	}
	return 0
}

// Secret for serverless function.
type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of Yandex Lockbox secret.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of Yandex Lockbox version.
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Key in secret's payload, which value to be delivered into function environment.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to Reference:
	//
	//	*Secret_EnvironmentVariable
	Reference isSecret_Reference `protobuf_oneof:"reference"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{6}
}

func (x *Secret) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Secret) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *Secret) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *Secret) GetReference() isSecret_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *Secret) GetEnvironmentVariable() string {
	if x, ok := x.GetReference().(*Secret_EnvironmentVariable); ok {
		return x.EnvironmentVariable
	}
	return ""
}

type isSecret_Reference interface {
	isSecret_Reference()
}

type Secret_EnvironmentVariable struct {
	// environment variable in which secret's value to be delivered.
	EnvironmentVariable string `protobuf:"bytes,4,opt,name=environment_variable,json=environmentVariable,proto3,oneof"`
}

func (*Secret_EnvironmentVariable) isSecret_Reference() {}

type LogOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is logging from function disabled.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Log entries destination.
	//
	// Types that are assignable to Destination:
	//
	//	*LogOptions_LogGroupId
	//	*LogOptions_FolderId
	Destination isLogOptions_Destination `protobuf_oneof:"destination"`
	// Minimum log entry level.
	//
	// See [LogLevel.Level] for details.
	MinLevel v1.LogLevel_Level `protobuf:"varint,4,opt,name=min_level,json=minLevel,proto3,enum=yandex.cloud.logging.v1.LogLevel_Level" json:"min_level,omitempty"`
}

func (x *LogOptions) Reset() {
	*x = LogOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogOptions) ProtoMessage() {}

func (x *LogOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogOptions.ProtoReflect.Descriptor instead.
func (*LogOptions) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{7}
}

func (x *LogOptions) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (m *LogOptions) GetDestination() isLogOptions_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *LogOptions) GetLogGroupId() string {
	if x, ok := x.GetDestination().(*LogOptions_LogGroupId); ok {
		return x.LogGroupId
	}
	return ""
}

func (x *LogOptions) GetFolderId() string {
	if x, ok := x.GetDestination().(*LogOptions_FolderId); ok {
		return x.FolderId
	}
	return ""
}

func (x *LogOptions) GetMinLevel() v1.LogLevel_Level {
	if x != nil {
		return x.MinLevel
	}
	return v1.LogLevel_Level(0)
}

type isLogOptions_Destination interface {
	isLogOptions_Destination()
}

type LogOptions_LogGroupId struct {
	// Entry should be written to log group resolved by ID.
	LogGroupId string `protobuf:"bytes,2,opt,name=log_group_id,json=logGroupId,proto3,oneof"`
}

type LogOptions_FolderId struct {
	// Entry should be written to default log group for specified folder.
	FolderId string `protobuf:"bytes,3,opt,name=folder_id,json=folderId,proto3,oneof"`
}

func (*LogOptions_LogGroupId) isLogOptions_Destination() {}

func (*LogOptions_FolderId) isLogOptions_Destination() {}

// Deprecated: Marked as deprecated in yandex/cloud/serverless/functions/v1/function.proto.
type StorageMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// S3 bucket name for mounting.
	BucketId string `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// S3 bucket prefix for mounting.
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Mount point directory name (not path) for mounting.
	MountPointName string `protobuf:"bytes,3,opt,name=mount_point_name,json=mountPointName,proto3" json:"mount_point_name,omitempty"`
	// Is mount read only.
	ReadOnly bool `protobuf:"varint,4,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
}

func (x *StorageMount) Reset() {
	*x = StorageMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageMount) ProtoMessage() {}

func (x *StorageMount) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageMount.ProtoReflect.Descriptor instead.
func (*StorageMount) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{8}
}

func (x *StorageMount) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *StorageMount) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *StorageMount) GetMountPointName() string {
	if x != nil {
		return x.MountPointName
	}
	return ""
}

func (x *StorageMount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

// Mount contains an information about version's external storage mount
type Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique mount point name. Device will be mounted into /function/storage/<name>
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Mount's mode
	Mode Mount_Mode `protobuf:"varint,3,opt,name=mode,proto3,enum=yandex.cloud.serverless.functions.v1.Mount_Mode" json:"mode,omitempty"`
	// Target mount option
	//
	// Types that are assignable to Target:
	//
	//	*Mount_ObjectStorage_
	//	*Mount_EphemeralDiskSpec
	Target isMount_Target `protobuf_oneof:"target"`
}

func (x *Mount) Reset() {
	*x = Mount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mount) ProtoMessage() {}

func (x *Mount) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mount.ProtoReflect.Descriptor instead.
func (*Mount) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{9}
}

func (x *Mount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Mount) GetMode() Mount_Mode {
	if x != nil {
		return x.Mode
	}
	return Mount_MODE_UNSPECIFIED
}

func (m *Mount) GetTarget() isMount_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *Mount) GetObjectStorage() *Mount_ObjectStorage {
	if x, ok := x.GetTarget().(*Mount_ObjectStorage_); ok {
		return x.ObjectStorage
	}
	return nil
}

func (x *Mount) GetEphemeralDiskSpec() *Mount_DiskSpec {
	if x, ok := x.GetTarget().(*Mount_EphemeralDiskSpec); ok {
		return x.EphemeralDiskSpec
	}
	return nil
}

type isMount_Target interface {
	isMount_Target()
}

type Mount_ObjectStorage_ struct {
	// Object storage mounts
	ObjectStorage *Mount_ObjectStorage `protobuf:"bytes,10,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

type Mount_EphemeralDiskSpec struct {
	// Working disk (worker-local non-shared read-write NBS disk templates)
	EphemeralDiskSpec *Mount_DiskSpec `protobuf:"bytes,11,opt,name=ephemeral_disk_spec,json=ephemeralDiskSpec,proto3,oneof"`
}

func (*Mount_ObjectStorage_) isMount_Target() {}

func (*Mount_EphemeralDiskSpec) isMount_Target() {}

type AsyncInvocationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of retries of version invocation
	RetriesCount int64 `protobuf:"varint,1,opt,name=retries_count,json=retriesCount,proto3" json:"retries_count,omitempty"`
	// Target for successful result of the version's invocation
	SuccessTarget *AsyncInvocationConfig_ResponseTarget `protobuf:"bytes,2,opt,name=success_target,json=successTarget,proto3" json:"success_target,omitempty"`
	// Target for unsuccessful result, if all retries failed
	FailureTarget *AsyncInvocationConfig_ResponseTarget `protobuf:"bytes,3,opt,name=failure_target,json=failureTarget,proto3" json:"failure_target,omitempty"`
	// Service account which can invoke version
	ServiceAccountId string `protobuf:"bytes,4,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
}

func (x *AsyncInvocationConfig) Reset() {
	*x = AsyncInvocationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncInvocationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncInvocationConfig) ProtoMessage() {}

func (x *AsyncInvocationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncInvocationConfig.ProtoReflect.Descriptor instead.
func (*AsyncInvocationConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{10}
}

func (x *AsyncInvocationConfig) GetRetriesCount() int64 {
	if x != nil {
		return x.RetriesCount
	}
	return 0
}

func (x *AsyncInvocationConfig) GetSuccessTarget() *AsyncInvocationConfig_ResponseTarget {
	if x != nil {
		return x.SuccessTarget
	}
	return nil
}

func (x *AsyncInvocationConfig) GetFailureTarget() *AsyncInvocationConfig_ResponseTarget {
	if x != nil {
		return x.FailureTarget
	}
	return nil
}

func (x *AsyncInvocationConfig) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

type YMQTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queue ARN
	QueueArn string `protobuf:"bytes,1,opt,name=queue_arn,json=queueArn,proto3" json:"queue_arn,omitempty"`
	// Service account which has write permission on the queue.
	ServiceAccountId string `protobuf:"bytes,2,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
}

func (x *YMQTarget) Reset() {
	*x = YMQTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YMQTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YMQTarget) ProtoMessage() {}

func (x *YMQTarget) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YMQTarget.ProtoReflect.Descriptor instead.
func (*YMQTarget) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{11}
}

func (x *YMQTarget) GetQueueArn() string {
	if x != nil {
		return x.QueueArn
	}
	return ""
}

func (x *YMQTarget) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

type EmptyTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyTarget) Reset() {
	*x = EmptyTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyTarget) ProtoMessage() {}

func (x *EmptyTarget) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyTarget.ProtoReflect.Descriptor instead.
func (*EmptyTarget) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{12}
}

// ObjectStorage as a mount
type Mount_ObjectStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ObjectStorage bucket name for mounting.
	BucketId string `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// ObjectStorage bucket prefix for mounting.
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *Mount_ObjectStorage) Reset() {
	*x = Mount_ObjectStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mount_ObjectStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mount_ObjectStorage) ProtoMessage() {}

func (x *Mount_ObjectStorage) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mount_ObjectStorage.ProtoReflect.Descriptor instead.
func (*Mount_ObjectStorage) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Mount_ObjectStorage) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *Mount_ObjectStorage) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

// Disk as a mount
type Mount_DiskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The size of disk for mount in bytes
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Optional block size of disk for mount in bytes
	BlockSize int64 `protobuf:"varint,2,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
}

func (x *Mount_DiskSpec) Reset() {
	*x = Mount_DiskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mount_DiskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mount_DiskSpec) ProtoMessage() {}

func (x *Mount_DiskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mount_DiskSpec.ProtoReflect.Descriptor instead.
func (*Mount_DiskSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{9, 1}
}

func (x *Mount_DiskSpec) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Mount_DiskSpec) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

// Target to which a result of an invocation will be sent
type AsyncInvocationConfig_ResponseTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//
	//	*AsyncInvocationConfig_ResponseTarget_EmptyTarget
	//	*AsyncInvocationConfig_ResponseTarget_YmqTarget
	Target isAsyncInvocationConfig_ResponseTarget_Target `protobuf_oneof:"target"`
}

func (x *AsyncInvocationConfig_ResponseTarget) Reset() {
	*x = AsyncInvocationConfig_ResponseTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncInvocationConfig_ResponseTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncInvocationConfig_ResponseTarget) ProtoMessage() {}

func (x *AsyncInvocationConfig_ResponseTarget) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncInvocationConfig_ResponseTarget.ProtoReflect.Descriptor instead.
func (*AsyncInvocationConfig_ResponseTarget) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP(), []int{10, 0}
}

func (m *AsyncInvocationConfig_ResponseTarget) GetTarget() isAsyncInvocationConfig_ResponseTarget_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *AsyncInvocationConfig_ResponseTarget) GetEmptyTarget() *EmptyTarget {
	if x, ok := x.GetTarget().(*AsyncInvocationConfig_ResponseTarget_EmptyTarget); ok {
		return x.EmptyTarget
	}
	return nil
}

func (x *AsyncInvocationConfig_ResponseTarget) GetYmqTarget() *YMQTarget {
	if x, ok := x.GetTarget().(*AsyncInvocationConfig_ResponseTarget_YmqTarget); ok {
		return x.YmqTarget
	}
	return nil
}

type isAsyncInvocationConfig_ResponseTarget_Target interface {
	isAsyncInvocationConfig_ResponseTarget_Target()
}

type AsyncInvocationConfig_ResponseTarget_EmptyTarget struct {
	// Target to ignore a result
	EmptyTarget *EmptyTarget `protobuf:"bytes,1,opt,name=empty_target,json=emptyTarget,proto3,oneof"`
}

type AsyncInvocationConfig_ResponseTarget_YmqTarget struct {
	// Target to send a result to ymq
	YmqTarget *YMQTarget `protobuf:"bytes,2,opt,name=ymq_target,json=ymqTarget,proto3,oneof"`
}

func (*AsyncInvocationConfig_ResponseTarget_EmptyTarget) isAsyncInvocationConfig_ResponseTarget_Target() {
}

func (*AsyncInvocationConfig_ResponseTarget_YmqTarget) isAsyncInvocationConfig_ResponseTarget_Target() {
}

var File_yandex_cloud_serverless_functions_v1_function_proto protoreflect.FileDescriptor

var file_yandex_cloud_serverless_functions_v1_function_proto_rawDesc = []byte{
	0x0a, 0x33, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x04, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x33, 0x2d, 0x36,
	0x33, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8,
	0x31, 0x05, 0x30, 0x2d, 0x32, 0x35, 0x36, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x08, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x74, 0x74,
	0x70, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22,
	0xad, 0x0c, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x30, 0x2d, 0x32, 0x35, 0x36, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4d,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x7d,
	0x0a, 0x16, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x6c, 0x6f,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x73, 0x0a, 0x17, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x15, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6d, 0x70, 0x66,
	0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6d,
	0x70, 0x66, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xfa, 0xc7,
	0x31, 0x04, 0x30, 0x2d, 0x31, 0x36, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x22,
	0x3d, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x18, 0xfa, 0xc7,
	0x31, 0x14, 0x31, 0x33, 0x34, 0x32, 0x31, 0x37, 0x37, 0x32, 0x38, 0x2d, 0x38, 0x35, 0x38, 0x39,
	0x39, 0x33, 0x34, 0x35, 0x39, 0x32, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x6f,
	0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x22,
	0x56, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0x90, 0xc8, 0x31, 0x01, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x22, 0xe2, 0x02, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x8b, 0x01, 0x0a,
	0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x14, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x0a, 0x4c,
	0x6f, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xf2, 0xc7, 0x31,
	0x1f, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x33, 0x7d, 0x29, 0x3f,
	0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0xf2, 0xc7, 0x31, 0x1f, 0x28, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d,
	0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x7b, 0x30,
	0x2c, 0x36, 0x33, 0x7d, 0x29, 0x3f, 0x48, 0x00, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe8, 0xc7, 0x31,
	0x01, 0xf2, 0xc7, 0x31, 0x0e, 0x5b, 0x2d, 0x2e, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x5d, 0x2a, 0x8a, 0xc8, 0x31, 0x04, 0x33, 0x2d, 0x36, 0x33, 0x52, 0x08, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x49, 0x0a,
	0x10, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31,
	0x0e, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x8a,
	0xc8, 0x31, 0x05, 0x31, 0x2d, 0x31, 0x30, 0x30, 0x52, 0x0e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xd4, 0x04, 0x0a, 0x05, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31, 0x0e, 0x5b, 0x2d, 0x5f, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x8a, 0xc8, 0x31, 0x05, 0x31, 0x2d, 0x31,
	0x30, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73,
	0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x62,
	0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73,
	0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x11, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72,
	0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x64, 0x0a, 0x0d, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31, 0x0e, 0x5b, 0x2d, 0x2e, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x8a, 0xc8, 0x31, 0x04, 0x33, 0x2d, 0x36, 0x33, 0x52, 0x08,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x1a, 0x45, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xfa, 0xc7, 0x31, 0x02,
	0x3e, 0x30, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3b, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x04,
	0xc0, 0xc1, 0x31, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x0a,
	0x22, 0xb4, 0x04, 0x0a, 0x15, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x0d, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x52, 0x0c, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x0e, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49,
	0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x77, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0xca, 0x01, 0x0a, 0x0e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x56, 0x0a,
	0x0c, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x79, 0x6d, 0x71, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x59, 0x4d, 0x51, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x79, 0x6d,
	0x71, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0x6a, 0x0a, 0x09, 0x59, 0x4d, 0x51, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x08, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x3a, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35,
	0x30, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x42, 0x7e, 0x0a, 0x28, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73,
	0x73, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x5a, 0x52,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_serverless_functions_v1_function_proto_rawDescOnce sync.Once
	file_yandex_cloud_serverless_functions_v1_function_proto_rawDescData = file_yandex_cloud_serverless_functions_v1_function_proto_rawDesc
)

func file_yandex_cloud_serverless_functions_v1_function_proto_rawDescGZIP() []byte {
	file_yandex_cloud_serverless_functions_v1_function_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_serverless_functions_v1_function_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_serverless_functions_v1_function_proto_rawDescData)
	})
	return file_yandex_cloud_serverless_functions_v1_function_proto_rawDescData
}

var file_yandex_cloud_serverless_functions_v1_function_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_yandex_cloud_serverless_functions_v1_function_proto_goTypes = []interface{}{
	(Function_Status)(0),          // 0: yandex.cloud.serverless.functions.v1.Function.Status
	(Version_Status)(0),           // 1: yandex.cloud.serverless.functions.v1.Version.Status
	(Mount_Mode)(0),               // 2: yandex.cloud.serverless.functions.v1.Mount.Mode
	(*Function)(nil),              // 3: yandex.cloud.serverless.functions.v1.Function
	(*Version)(nil),               // 4: yandex.cloud.serverless.functions.v1.Version
	(*Resources)(nil),             // 5: yandex.cloud.serverless.functions.v1.Resources
	(*Package)(nil),               // 6: yandex.cloud.serverless.functions.v1.Package
	(*Connectivity)(nil),          // 7: yandex.cloud.serverless.functions.v1.Connectivity
	(*ScalingPolicy)(nil),         // 8: yandex.cloud.serverless.functions.v1.ScalingPolicy
	(*Secret)(nil),                // 9: yandex.cloud.serverless.functions.v1.Secret
	(*LogOptions)(nil),            // 10: yandex.cloud.serverless.functions.v1.LogOptions
	(*StorageMount)(nil),          // 11: yandex.cloud.serverless.functions.v1.StorageMount
	(*Mount)(nil),                 // 12: yandex.cloud.serverless.functions.v1.Mount
	(*AsyncInvocationConfig)(nil), // 13: yandex.cloud.serverless.functions.v1.AsyncInvocationConfig
	(*YMQTarget)(nil),             // 14: yandex.cloud.serverless.functions.v1.YMQTarget
	(*EmptyTarget)(nil),           // 15: yandex.cloud.serverless.functions.v1.EmptyTarget
	nil,                           // 16: yandex.cloud.serverless.functions.v1.Function.LabelsEntry
	nil,                           // 17: yandex.cloud.serverless.functions.v1.Version.EnvironmentEntry
	nil,                           // 18: yandex.cloud.serverless.functions.v1.Version.NamedServiceAccountsEntry
	(*Mount_ObjectStorage)(nil),   // 19: yandex.cloud.serverless.functions.v1.Mount.ObjectStorage
	(*Mount_DiskSpec)(nil),        // 20: yandex.cloud.serverless.functions.v1.Mount.DiskSpec
	(*AsyncInvocationConfig_ResponseTarget)(nil), // 21: yandex.cloud.serverless.functions.v1.AsyncInvocationConfig.ResponseTarget
	(*timestamppb.Timestamp)(nil),                // 22: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                  // 23: google.protobuf.Duration
	(v1.LogLevel_Level)(0),                       // 24: yandex.cloud.logging.v1.LogLevel.Level
}
var file_yandex_cloud_serverless_functions_v1_function_proto_depIdxs = []int32{
	22, // 0: yandex.cloud.serverless.functions.v1.Function.created_at:type_name -> google.protobuf.Timestamp
	16, // 1: yandex.cloud.serverless.functions.v1.Function.labels:type_name -> yandex.cloud.serverless.functions.v1.Function.LabelsEntry
	0,  // 2: yandex.cloud.serverless.functions.v1.Function.status:type_name -> yandex.cloud.serverless.functions.v1.Function.Status
	22, // 3: yandex.cloud.serverless.functions.v1.Version.created_at:type_name -> google.protobuf.Timestamp
	5,  // 4: yandex.cloud.serverless.functions.v1.Version.resources:type_name -> yandex.cloud.serverless.functions.v1.Resources
	23, // 5: yandex.cloud.serverless.functions.v1.Version.execution_timeout:type_name -> google.protobuf.Duration
	1,  // 6: yandex.cloud.serverless.functions.v1.Version.status:type_name -> yandex.cloud.serverless.functions.v1.Version.Status
	17, // 7: yandex.cloud.serverless.functions.v1.Version.environment:type_name -> yandex.cloud.serverless.functions.v1.Version.EnvironmentEntry
	7,  // 8: yandex.cloud.serverless.functions.v1.Version.connectivity:type_name -> yandex.cloud.serverless.functions.v1.Connectivity
	18, // 9: yandex.cloud.serverless.functions.v1.Version.named_service_accounts:type_name -> yandex.cloud.serverless.functions.v1.Version.NamedServiceAccountsEntry
	9,  // 10: yandex.cloud.serverless.functions.v1.Version.secrets:type_name -> yandex.cloud.serverless.functions.v1.Secret
	10, // 11: yandex.cloud.serverless.functions.v1.Version.log_options:type_name -> yandex.cloud.serverless.functions.v1.LogOptions
	11, // 12: yandex.cloud.serverless.functions.v1.Version.storage_mounts:type_name -> yandex.cloud.serverless.functions.v1.StorageMount
	13, // 13: yandex.cloud.serverless.functions.v1.Version.async_invocation_config:type_name -> yandex.cloud.serverless.functions.v1.AsyncInvocationConfig
	12, // 14: yandex.cloud.serverless.functions.v1.Version.mounts:type_name -> yandex.cloud.serverless.functions.v1.Mount
	22, // 15: yandex.cloud.serverless.functions.v1.ScalingPolicy.created_at:type_name -> google.protobuf.Timestamp
	22, // 16: yandex.cloud.serverless.functions.v1.ScalingPolicy.modified_at:type_name -> google.protobuf.Timestamp
	24, // 17: yandex.cloud.serverless.functions.v1.LogOptions.min_level:type_name -> yandex.cloud.logging.v1.LogLevel.Level
	2,  // 18: yandex.cloud.serverless.functions.v1.Mount.mode:type_name -> yandex.cloud.serverless.functions.v1.Mount.Mode
	19, // 19: yandex.cloud.serverless.functions.v1.Mount.object_storage:type_name -> yandex.cloud.serverless.functions.v1.Mount.ObjectStorage
	20, // 20: yandex.cloud.serverless.functions.v1.Mount.ephemeral_disk_spec:type_name -> yandex.cloud.serverless.functions.v1.Mount.DiskSpec
	21, // 21: yandex.cloud.serverless.functions.v1.AsyncInvocationConfig.success_target:type_name -> yandex.cloud.serverless.functions.v1.AsyncInvocationConfig.ResponseTarget
	21, // 22: yandex.cloud.serverless.functions.v1.AsyncInvocationConfig.failure_target:type_name -> yandex.cloud.serverless.functions.v1.AsyncInvocationConfig.ResponseTarget
	15, // 23: yandex.cloud.serverless.functions.v1.AsyncInvocationConfig.ResponseTarget.empty_target:type_name -> yandex.cloud.serverless.functions.v1.EmptyTarget
	14, // 24: yandex.cloud.serverless.functions.v1.AsyncInvocationConfig.ResponseTarget.ymq_target:type_name -> yandex.cloud.serverless.functions.v1.YMQTarget
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_yandex_cloud_serverless_functions_v1_function_proto_init() }
func file_yandex_cloud_serverless_functions_v1_function_proto_init() {
	if File_yandex_cloud_serverless_functions_v1_function_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connectivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncInvocationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YMQTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mount_ObjectStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mount_DiskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncInvocationConfig_ResponseTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Secret_EnvironmentVariable)(nil),
	}
	file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*LogOptions_LogGroupId)(nil),
		(*LogOptions_FolderId)(nil),
	}
	file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Mount_ObjectStorage_)(nil),
		(*Mount_EphemeralDiskSpec)(nil),
	}
	file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*AsyncInvocationConfig_ResponseTarget_EmptyTarget)(nil),
		(*AsyncInvocationConfig_ResponseTarget_YmqTarget)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_serverless_functions_v1_function_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_serverless_functions_v1_function_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_serverless_functions_v1_function_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_serverless_functions_v1_function_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_serverless_functions_v1_function_proto_msgTypes,
	}.Build()
	File_yandex_cloud_serverless_functions_v1_function_proto = out.File
	file_yandex_cloud_serverless_functions_v1_function_proto_rawDesc = nil
	file_yandex_cloud_serverless_functions_v1_function_proto_goTypes = nil
	file_yandex_cloud_serverless_functions_v1_function_proto_depIdxs = nil
}
