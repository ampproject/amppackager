// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yandex/cloud/serverless/apigateway/v1/apigateway_service.proto

package apigateway

import (
	context "context"
	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiGatewayServiceClient is the client API for ApiGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiGatewayServiceClient interface {
	// Returns the specified API gateway. Note that only API gateway basic attributes are returned.
	// To get associated openapi specification, make a [GetOpenapiSpec] request.
	//
	// To get the list of all available API gateways, make a [List] request.
	Get(ctx context.Context, in *GetApiGatewayRequest, opts ...grpc.CallOption) (*ApiGateway, error)
	// Retrieves the list of API gateways in the specified folder.
	List(ctx context.Context, in *ListApiGatewayRequest, opts ...grpc.CallOption) (*ListApiGatewayResponse, error)
	// Creates an API gateway in the specified folder.
	Create(ctx context.Context, in *CreateApiGatewayRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates the specified API gateway.
	Update(ctx context.Context, in *UpdateApiGatewayRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified API gateway.
	Delete(ctx context.Context, in *DeleteApiGatewayRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Attaches domain to the specified API gateway.
	AddDomain(ctx context.Context, in *AddDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Detaches domain from the specified API gateway.
	RemoveDomain(ctx context.Context, in *RemoveDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Returns the OpenAPI specification of specified API gateway.
	GetOpenapiSpec(ctx context.Context, in *GetOpenapiSpecRequest, opts ...grpc.CallOption) (*GetOpenapiSpecResponse, error)
	// Lists operations for the specified API gateway.
	ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...grpc.CallOption) (*ListOperationsResponse, error)
	// Lists existing access bindings for the specified API gateway.
	ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	// Sets access bindings for the specified API gateway.
	SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates access bindings for the specified API gateway.
	UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type apiGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiGatewayServiceClient(cc grpc.ClientConnInterface) ApiGatewayServiceClient {
	return &apiGatewayServiceClient{cc}
}

func (c *apiGatewayServiceClient) Get(ctx context.Context, in *GetApiGatewayRequest, opts ...grpc.CallOption) (*ApiGateway, error) {
	out := new(ApiGateway)
	err := c.cc.Invoke(ctx, "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) List(ctx context.Context, in *ListApiGatewayRequest, opts ...grpc.CallOption) (*ListApiGatewayResponse, error) {
	out := new(ListApiGatewayResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) Create(ctx context.Context, in *CreateApiGatewayRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) Update(ctx context.Context, in *UpdateApiGatewayRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) Delete(ctx context.Context, in *DeleteApiGatewayRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) AddDomain(ctx context.Context, in *AddDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/AddDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) RemoveDomain(ctx context.Context, in *RemoveDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/RemoveDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) GetOpenapiSpec(ctx context.Context, in *GetOpenapiSpecRequest, opts ...grpc.CallOption) (*GetOpenapiSpecResponse, error) {
	out := new(GetOpenapiSpecResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/GetOpenapiSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...grpc.CallOption) (*ListOperationsResponse, error) {
	out := new(ListOperationsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	out := new(access.ListAccessBindingsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/ListAccessBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/SetAccessBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayServiceClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/UpdateAccessBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiGatewayServiceServer is the server API for ApiGatewayService service.
// All implementations should embed UnimplementedApiGatewayServiceServer
// for forward compatibility
type ApiGatewayServiceServer interface {
	// Returns the specified API gateway. Note that only API gateway basic attributes are returned.
	// To get associated openapi specification, make a [GetOpenapiSpec] request.
	//
	// To get the list of all available API gateways, make a [List] request.
	Get(context.Context, *GetApiGatewayRequest) (*ApiGateway, error)
	// Retrieves the list of API gateways in the specified folder.
	List(context.Context, *ListApiGatewayRequest) (*ListApiGatewayResponse, error)
	// Creates an API gateway in the specified folder.
	Create(context.Context, *CreateApiGatewayRequest) (*operation.Operation, error)
	// Updates the specified API gateway.
	Update(context.Context, *UpdateApiGatewayRequest) (*operation.Operation, error)
	// Deletes the specified API gateway.
	Delete(context.Context, *DeleteApiGatewayRequest) (*operation.Operation, error)
	// Attaches domain to the specified API gateway.
	AddDomain(context.Context, *AddDomainRequest) (*operation.Operation, error)
	// Detaches domain from the specified API gateway.
	RemoveDomain(context.Context, *RemoveDomainRequest) (*operation.Operation, error)
	// Returns the OpenAPI specification of specified API gateway.
	GetOpenapiSpec(context.Context, *GetOpenapiSpecRequest) (*GetOpenapiSpecResponse, error)
	// Lists operations for the specified API gateway.
	ListOperations(context.Context, *ListOperationsRequest) (*ListOperationsResponse, error)
	// Lists existing access bindings for the specified API gateway.
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)
	// Sets access bindings for the specified API gateway.
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)
	// Updates access bindings for the specified API gateway.
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)
}

// UnimplementedApiGatewayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApiGatewayServiceServer struct {
}

func (UnimplementedApiGatewayServiceServer) Get(context.Context, *GetApiGatewayRequest) (*ApiGateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApiGatewayServiceServer) List(context.Context, *ListApiGatewayRequest) (*ListApiGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedApiGatewayServiceServer) Create(context.Context, *CreateApiGatewayRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApiGatewayServiceServer) Update(context.Context, *UpdateApiGatewayRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApiGatewayServiceServer) Delete(context.Context, *DeleteApiGatewayRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApiGatewayServiceServer) AddDomain(context.Context, *AddDomainRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDomain not implemented")
}
func (UnimplementedApiGatewayServiceServer) RemoveDomain(context.Context, *RemoveDomainRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDomain not implemented")
}
func (UnimplementedApiGatewayServiceServer) GetOpenapiSpec(context.Context, *GetOpenapiSpecRequest) (*GetOpenapiSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenapiSpec not implemented")
}
func (UnimplementedApiGatewayServiceServer) ListOperations(context.Context, *ListOperationsRequest) (*ListOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedApiGatewayServiceServer) ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessBindings not implemented")
}
func (UnimplementedApiGatewayServiceServer) SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccessBindings not implemented")
}
func (UnimplementedApiGatewayServiceServer) UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessBindings not implemented")
}

// UnsafeApiGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiGatewayServiceServer will
// result in compilation errors.
type UnsafeApiGatewayServiceServer interface {
	mustEmbedUnimplementedApiGatewayServiceServer()
}

func RegisterApiGatewayServiceServer(s grpc.ServiceRegistrar, srv ApiGatewayServiceServer) {
	s.RegisterService(&ApiGatewayService_ServiceDesc, srv)
}

func _ApiGatewayService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).Get(ctx, req.(*GetApiGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApiGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).List(ctx, req.(*ListApiGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).Create(ctx, req.(*CreateApiGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).Update(ctx, req.(*UpdateApiGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).Delete(ctx, req.(*DeleteApiGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_AddDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).AddDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/AddDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).AddDomain(ctx, req.(*AddDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_RemoveDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).RemoveDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/RemoveDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).RemoveDomain(ctx, req.(*RemoveDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_GetOpenapiSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenapiSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).GetOpenapiSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/GetOpenapiSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).GetOpenapiSpec(ctx, req.(*GetOpenapiSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).ListOperations(ctx, req.(*ListOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_ListAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.ListAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).ListAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/ListAccessBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).ListAccessBindings(ctx, req.(*access.ListAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_SetAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.SetAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).SetAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/SetAccessBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).SetAccessBindings(ctx, req.(*access.SetAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGatewayService_UpdateAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.UpdateAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServiceServer).UpdateAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.serverless.apigateway.v1.ApiGatewayService/UpdateAccessBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServiceServer).UpdateAccessBindings(ctx, req.(*access.UpdateAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiGatewayService_ServiceDesc is the grpc.ServiceDesc for ApiGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.serverless.apigateway.v1.ApiGatewayService",
	HandlerType: (*ApiGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ApiGatewayService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApiGatewayService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ApiGatewayService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApiGatewayService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApiGatewayService_Delete_Handler,
		},
		{
			MethodName: "AddDomain",
			Handler:    _ApiGatewayService_AddDomain_Handler,
		},
		{
			MethodName: "RemoveDomain",
			Handler:    _ApiGatewayService_RemoveDomain_Handler,
		},
		{
			MethodName: "GetOpenapiSpec",
			Handler:    _ApiGatewayService_GetOpenapiSpec_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _ApiGatewayService_ListOperations_Handler,
		},
		{
			MethodName: "ListAccessBindings",
			Handler:    _ApiGatewayService_ListAccessBindings_Handler,
		},
		{
			MethodName: "SetAccessBindings",
			Handler:    _ApiGatewayService_SetAccessBindings_Handler,
		},
		{
			MethodName: "UpdateAccessBindings",
			Handler:    _ApiGatewayService_UpdateAccessBindings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/serverless/apigateway/v1/apigateway_service.proto",
}
