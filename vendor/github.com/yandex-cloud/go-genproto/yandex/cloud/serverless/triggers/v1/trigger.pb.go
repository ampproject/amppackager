// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: yandex/cloud/serverless/triggers/v1/trigger.proto

package triggers

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	v1 "github.com/yandex-cloud/go-genproto/yandex/cloud/logging/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TriggerType int32

const (
	TriggerType_TRIGGER_TYPE_UNSPECIFIED TriggerType = 0
	// The trigger is activated on a timer.
	TriggerType_TIMER TriggerType = 2
	// The trigger is activated by messages from a message queue.
	//
	// Only Message Queue is currently supported.
	TriggerType_MESSAGE_QUEUE TriggerType = 3
	// The trigger is activated by messages from IoT Core.
	TriggerType_IOT_MESSAGE        TriggerType = 4
	TriggerType_OBJECT_STORAGE     TriggerType = 5
	TriggerType_CONTAINER_REGISTRY TriggerType = 6
	// The trigger is activated by cloud log group events
	TriggerType_CLOUD_LOGS TriggerType = 7
	// The trigger is activated by logging group events
	TriggerType_LOGGING TriggerType = 8
	// The trigger is activated by billing events
	TriggerType_BILLING_BUDGET TriggerType = 9
	// The trigger is activated by YDS events
	TriggerType_YDS TriggerType = 10
	// The trigger is activated by email
	TriggerType_MAIL TriggerType = 11
)

// Enum value maps for TriggerType.
var (
	TriggerType_name = map[int32]string{
		0:  "TRIGGER_TYPE_UNSPECIFIED",
		2:  "TIMER",
		3:  "MESSAGE_QUEUE",
		4:  "IOT_MESSAGE",
		5:  "OBJECT_STORAGE",
		6:  "CONTAINER_REGISTRY",
		7:  "CLOUD_LOGS",
		8:  "LOGGING",
		9:  "BILLING_BUDGET",
		10: "YDS",
		11: "MAIL",
	}
	TriggerType_value = map[string]int32{
		"TRIGGER_TYPE_UNSPECIFIED": 0,
		"TIMER":                    2,
		"MESSAGE_QUEUE":            3,
		"IOT_MESSAGE":              4,
		"OBJECT_STORAGE":           5,
		"CONTAINER_REGISTRY":       6,
		"CLOUD_LOGS":               7,
		"LOGGING":                  8,
		"BILLING_BUDGET":           9,
		"YDS":                      10,
		"MAIL":                     11,
	}
)

func (x TriggerType) Enum() *TriggerType {
	p := new(TriggerType)
	*p = x
	return p
}

func (x TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_enumTypes[0].Descriptor()
}

func (TriggerType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_serverless_triggers_v1_trigger_proto_enumTypes[0]
}

func (x TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerType.Descriptor instead.
func (TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0}
}

type Trigger_ObjectStorageEventType int32

const (
	Trigger_OBJECT_STORAGE_EVENT_TYPE_UNSPECIFIED   Trigger_ObjectStorageEventType = 0
	Trigger_OBJECT_STORAGE_EVENT_TYPE_CREATE_OBJECT Trigger_ObjectStorageEventType = 1
	Trigger_OBJECT_STORAGE_EVENT_TYPE_UPDATE_OBJECT Trigger_ObjectStorageEventType = 2
	Trigger_OBJECT_STORAGE_EVENT_TYPE_DELETE_OBJECT Trigger_ObjectStorageEventType = 3
)

// Enum value maps for Trigger_ObjectStorageEventType.
var (
	Trigger_ObjectStorageEventType_name = map[int32]string{
		0: "OBJECT_STORAGE_EVENT_TYPE_UNSPECIFIED",
		1: "OBJECT_STORAGE_EVENT_TYPE_CREATE_OBJECT",
		2: "OBJECT_STORAGE_EVENT_TYPE_UPDATE_OBJECT",
		3: "OBJECT_STORAGE_EVENT_TYPE_DELETE_OBJECT",
	}
	Trigger_ObjectStorageEventType_value = map[string]int32{
		"OBJECT_STORAGE_EVENT_TYPE_UNSPECIFIED":   0,
		"OBJECT_STORAGE_EVENT_TYPE_CREATE_OBJECT": 1,
		"OBJECT_STORAGE_EVENT_TYPE_UPDATE_OBJECT": 2,
		"OBJECT_STORAGE_EVENT_TYPE_DELETE_OBJECT": 3,
	}
)

func (x Trigger_ObjectStorageEventType) Enum() *Trigger_ObjectStorageEventType {
	p := new(Trigger_ObjectStorageEventType)
	*p = x
	return p
}

func (x Trigger_ObjectStorageEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trigger_ObjectStorageEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_enumTypes[1].Descriptor()
}

func (Trigger_ObjectStorageEventType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_serverless_triggers_v1_trigger_proto_enumTypes[1]
}

func (x Trigger_ObjectStorageEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trigger_ObjectStorageEventType.Descriptor instead.
func (Trigger_ObjectStorageEventType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0, 0}
}

type Trigger_ContainerRegistryEventType int32

const (
	Trigger_CONTAINER_REGISTRY_EVENT_TYPE_UNSPECIFIED      Trigger_ContainerRegistryEventType = 0
	Trigger_CONTAINER_REGISTRY_EVENT_TYPE_CREATE_IMAGE     Trigger_ContainerRegistryEventType = 1
	Trigger_CONTAINER_REGISTRY_EVENT_TYPE_DELETE_IMAGE     Trigger_ContainerRegistryEventType = 2
	Trigger_CONTAINER_REGISTRY_EVENT_TYPE_CREATE_IMAGE_TAG Trigger_ContainerRegistryEventType = 3
	Trigger_CONTAINER_REGISTRY_EVENT_TYPE_DELETE_IMAGE_TAG Trigger_ContainerRegistryEventType = 4
)

// Enum value maps for Trigger_ContainerRegistryEventType.
var (
	Trigger_ContainerRegistryEventType_name = map[int32]string{
		0: "CONTAINER_REGISTRY_EVENT_TYPE_UNSPECIFIED",
		1: "CONTAINER_REGISTRY_EVENT_TYPE_CREATE_IMAGE",
		2: "CONTAINER_REGISTRY_EVENT_TYPE_DELETE_IMAGE",
		3: "CONTAINER_REGISTRY_EVENT_TYPE_CREATE_IMAGE_TAG",
		4: "CONTAINER_REGISTRY_EVENT_TYPE_DELETE_IMAGE_TAG",
	}
	Trigger_ContainerRegistryEventType_value = map[string]int32{
		"CONTAINER_REGISTRY_EVENT_TYPE_UNSPECIFIED":      0,
		"CONTAINER_REGISTRY_EVENT_TYPE_CREATE_IMAGE":     1,
		"CONTAINER_REGISTRY_EVENT_TYPE_DELETE_IMAGE":     2,
		"CONTAINER_REGISTRY_EVENT_TYPE_CREATE_IMAGE_TAG": 3,
		"CONTAINER_REGISTRY_EVENT_TYPE_DELETE_IMAGE_TAG": 4,
	}
)

func (x Trigger_ContainerRegistryEventType) Enum() *Trigger_ContainerRegistryEventType {
	p := new(Trigger_ContainerRegistryEventType)
	*p = x
	return p
}

func (x Trigger_ContainerRegistryEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trigger_ContainerRegistryEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_enumTypes[2].Descriptor()
}

func (Trigger_ContainerRegistryEventType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_serverless_triggers_v1_trigger_proto_enumTypes[2]
}

func (x Trigger_ContainerRegistryEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trigger_ContainerRegistryEventType.Descriptor instead.
func (Trigger_ContainerRegistryEventType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0, 1}
}

type Trigger_Status int32

const (
	Trigger_STATUS_UNSPECIFIED Trigger_Status = 0
	Trigger_ACTIVE             Trigger_Status = 1
	Trigger_PAUSED             Trigger_Status = 2
)

// Enum value maps for Trigger_Status.
var (
	Trigger_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "ACTIVE",
		2: "PAUSED",
	}
	Trigger_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"ACTIVE":             1,
		"PAUSED":             2,
	}
)

func (x Trigger_Status) Enum() *Trigger_Status {
	p := new(Trigger_Status)
	*p = x
	return p
}

func (x Trigger_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trigger_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_enumTypes[3].Descriptor()
}

func (Trigger_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_serverless_triggers_v1_trigger_proto_enumTypes[3]
}

func (x Trigger_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trigger_Status.Descriptor instead.
func (Trigger_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0, 2}
}

// A trigger to invoke a serverless function. For more information, see [Triggers](/docs/functions/concepts/trigger).
type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the trigger. Generated at creation time.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the folder that the trigger belongs to.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Creation timestamp for the trigger.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Name of the trigger.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the trigger.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Trigger labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Rule for trigger activation (always consistent with the trigger type).
	Rule *Trigger_Rule `protobuf:"bytes,8,opt,name=rule,proto3" json:"rule,omitempty"`
	// Trigger status.
	Status Trigger_Status `protobuf:"varint,9,opt,name=status,proto3,enum=yandex.cloud.serverless.triggers.v1.Trigger_Status" json:"status,omitempty"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0}
}

func (x *Trigger) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trigger) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *Trigger) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Trigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Trigger) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Trigger) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Trigger) GetRule() *Trigger_Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Trigger) GetStatus() Trigger_Status {
	if x != nil {
		return x.Status
	}
	return Trigger_STATUS_UNSPECIFIED
}

// A single function invocation.
type InvokeFunctionOnce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the function to invoke.
	FunctionId string `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	// Version tag of the function to execute.
	FunctionTag string `protobuf:"bytes,2,opt,name=function_tag,json=functionTag,proto3" json:"function_tag,omitempty"`
	// ID of the service account that should be used to invoke the function.
	ServiceAccountId string `protobuf:"bytes,3,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
}

func (x *InvokeFunctionOnce) Reset() {
	*x = InvokeFunctionOnce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeFunctionOnce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeFunctionOnce) ProtoMessage() {}

func (x *InvokeFunctionOnce) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeFunctionOnce.ProtoReflect.Descriptor instead.
func (*InvokeFunctionOnce) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{1}
}

func (x *InvokeFunctionOnce) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *InvokeFunctionOnce) GetFunctionTag() string {
	if x != nil {
		return x.FunctionTag
	}
	return ""
}

func (x *InvokeFunctionOnce) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

// A function invocation with retries.
type InvokeFunctionWithRetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the function to invoke.
	FunctionId string `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	// Version tag of the function to execute.
	FunctionTag string `protobuf:"bytes,2,opt,name=function_tag,json=functionTag,proto3" json:"function_tag,omitempty"`
	// ID of the service account which has permission to invoke the function.
	ServiceAccountId string `protobuf:"bytes,3,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Retry policy. If the field is not specified, or the value is empty, no retries will be attempted.
	RetrySettings *RetrySettings `protobuf:"bytes,4,opt,name=retry_settings,json=retrySettings,proto3" json:"retry_settings,omitempty"`
	// DLQ policy (no value means discarding a message).
	DeadLetterQueue *PutQueueMessage `protobuf:"bytes,5,opt,name=dead_letter_queue,json=deadLetterQueue,proto3" json:"dead_letter_queue,omitempty"`
}

func (x *InvokeFunctionWithRetry) Reset() {
	*x = InvokeFunctionWithRetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeFunctionWithRetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeFunctionWithRetry) ProtoMessage() {}

func (x *InvokeFunctionWithRetry) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeFunctionWithRetry.ProtoReflect.Descriptor instead.
func (*InvokeFunctionWithRetry) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{2}
}

func (x *InvokeFunctionWithRetry) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *InvokeFunctionWithRetry) GetFunctionTag() string {
	if x != nil {
		return x.FunctionTag
	}
	return ""
}

func (x *InvokeFunctionWithRetry) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *InvokeFunctionWithRetry) GetRetrySettings() *RetrySettings {
	if x != nil {
		return x.RetrySettings
	}
	return nil
}

func (x *InvokeFunctionWithRetry) GetDeadLetterQueue() *PutQueueMessage {
	if x != nil {
		return x.DeadLetterQueue
	}
	return nil
}

// A single container invocation.
type InvokeContainerOnce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the container to invoke.
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Endpoint HTTP path to invoke.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// ID of the service account which has permission to invoke the container.
	ServiceAccountId string `protobuf:"bytes,4,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
}

func (x *InvokeContainerOnce) Reset() {
	*x = InvokeContainerOnce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeContainerOnce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeContainerOnce) ProtoMessage() {}

func (x *InvokeContainerOnce) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeContainerOnce.ProtoReflect.Descriptor instead.
func (*InvokeContainerOnce) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{3}
}

func (x *InvokeContainerOnce) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *InvokeContainerOnce) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *InvokeContainerOnce) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

// A container invocation with retries.
type InvokeContainerWithRetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the container to invoke.
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Endpoint HTTP path to invoke.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// ID of the service account which has permission to invoke the container.
	ServiceAccountId string `protobuf:"bytes,4,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Retry policy. If the field is not specified, or the value is empty, no retries will be attempted.
	RetrySettings *RetrySettings `protobuf:"bytes,5,opt,name=retry_settings,json=retrySettings,proto3" json:"retry_settings,omitempty"`
	// DLQ policy (no value means discarding a message).
	DeadLetterQueue *PutQueueMessage `protobuf:"bytes,6,opt,name=dead_letter_queue,json=deadLetterQueue,proto3" json:"dead_letter_queue,omitempty"`
}

func (x *InvokeContainerWithRetry) Reset() {
	*x = InvokeContainerWithRetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeContainerWithRetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeContainerWithRetry) ProtoMessage() {}

func (x *InvokeContainerWithRetry) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeContainerWithRetry.ProtoReflect.Descriptor instead.
func (*InvokeContainerWithRetry) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{4}
}

func (x *InvokeContainerWithRetry) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *InvokeContainerWithRetry) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *InvokeContainerWithRetry) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *InvokeContainerWithRetry) GetRetrySettings() *RetrySettings {
	if x != nil {
		return x.RetrySettings
	}
	return nil
}

func (x *InvokeContainerWithRetry) GetDeadLetterQueue() *PutQueueMessage {
	if x != nil {
		return x.DeadLetterQueue
	}
	return nil
}

type PutQueueMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the queue.
	QueueId string `protobuf:"bytes,11,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	// Service account which has write permission on the queue.
	ServiceAccountId string `protobuf:"bytes,2,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
}

func (x *PutQueueMessage) Reset() {
	*x = PutQueueMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutQueueMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutQueueMessage) ProtoMessage() {}

func (x *PutQueueMessage) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutQueueMessage.ProtoReflect.Descriptor instead.
func (*PutQueueMessage) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{5}
}

func (x *PutQueueMessage) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

func (x *PutQueueMessage) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

// Settings for batch processing of messages in a queue.
type BatchSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch size. Trigger will send the batch of messages to the function
	// when the number of messages in the queue reaches [size], or the [cutoff] time has passed.
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Maximum wait time. Trigger will send the batch of messages to the function when
	// the number of messages in the queue reaches [size], or the [cutoff] time has passed.
	Cutoff *durationpb.Duration `protobuf:"bytes,2,opt,name=cutoff,proto3" json:"cutoff,omitempty"`
}

func (x *BatchSettings) Reset() {
	*x = BatchSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSettings) ProtoMessage() {}

func (x *BatchSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSettings.ProtoReflect.Descriptor instead.
func (*BatchSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{6}
}

func (x *BatchSettings) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BatchSettings) GetCutoff() *durationpb.Duration {
	if x != nil {
		return x.Cutoff
	}
	return nil
}

type CloudLogsBatchSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch size. Trigger will send the batch of messages to the function
	// when the number of messages in the log group reaches [size], or the [cutoff] time has passed.
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Maximum wait time. Trigger will send the batch of messages to the function when
	// the number of messages in the log group reaches [size], or the [cutoff] time has passed.
	Cutoff *durationpb.Duration `protobuf:"bytes,2,opt,name=cutoff,proto3" json:"cutoff,omitempty"`
}

func (x *CloudLogsBatchSettings) Reset() {
	*x = CloudLogsBatchSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudLogsBatchSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudLogsBatchSettings) ProtoMessage() {}

func (x *CloudLogsBatchSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudLogsBatchSettings.ProtoReflect.Descriptor instead.
func (*CloudLogsBatchSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{7}
}

func (x *CloudLogsBatchSettings) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CloudLogsBatchSettings) GetCutoff() *durationpb.Duration {
	if x != nil {
		return x.Cutoff
	}
	return nil
}

type LoggingBatchSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch size. Trigger will send the batch of messages to the associated function
	// when the number of log events reaches this value, or the [cutoff] time has passed.
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Maximum wait time. Trigger will send the batch of messages the time since the last batch
	// exceeds the `cutoff` value, regardless of the amount of log events.
	Cutoff *durationpb.Duration `protobuf:"bytes,2,opt,name=cutoff,proto3" json:"cutoff,omitempty"`
}

func (x *LoggingBatchSettings) Reset() {
	*x = LoggingBatchSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingBatchSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingBatchSettings) ProtoMessage() {}

func (x *LoggingBatchSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingBatchSettings.ProtoReflect.Descriptor instead.
func (*LoggingBatchSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{8}
}

func (x *LoggingBatchSettings) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *LoggingBatchSettings) GetCutoff() *durationpb.Duration {
	if x != nil {
		return x.Cutoff
	}
	return nil
}

// Settings for retrying to invoke a function.
type RetrySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of retries (extra invokes) before the action is considered failed.
	RetryAttempts int64 `protobuf:"varint,1,opt,name=retry_attempts,json=retryAttempts,proto3" json:"retry_attempts,omitempty"`
	// Time in seconds to wait between individual retries.
	Interval *durationpb.Duration `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *RetrySettings) Reset() {
	*x = RetrySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrySettings) ProtoMessage() {}

func (x *RetrySettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrySettings.ProtoReflect.Descriptor instead.
func (*RetrySettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{9}
}

func (x *RetrySettings) GetRetryAttempts() int64 {
	if x != nil {
		return x.RetryAttempts
	}
	return 0
}

func (x *RetrySettings) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

type BillingBudget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillingAccountId string `protobuf:"bytes,1,opt,name=billing_account_id,json=billingAccountId,proto3" json:"billing_account_id,omitempty"`
	BudgetId         string `protobuf:"bytes,2,opt,name=budget_id,json=budgetId,proto3" json:"budget_id,omitempty"`
	// Types that are assignable to Action:
	//	*BillingBudget_InvokeFunction
	//	*BillingBudget_InvokeContainer
	Action isBillingBudget_Action `protobuf_oneof:"action"`
}

func (x *BillingBudget) Reset() {
	*x = BillingBudget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillingBudget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingBudget) ProtoMessage() {}

func (x *BillingBudget) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingBudget.ProtoReflect.Descriptor instead.
func (*BillingBudget) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{10}
}

func (x *BillingBudget) GetBillingAccountId() string {
	if x != nil {
		return x.BillingAccountId
	}
	return ""
}

func (x *BillingBudget) GetBudgetId() string {
	if x != nil {
		return x.BudgetId
	}
	return ""
}

func (m *BillingBudget) GetAction() isBillingBudget_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *BillingBudget) GetInvokeFunction() *InvokeFunctionWithRetry {
	if x, ok := x.GetAction().(*BillingBudget_InvokeFunction); ok {
		return x.InvokeFunction
	}
	return nil
}

func (x *BillingBudget) GetInvokeContainer() *InvokeContainerWithRetry {
	if x, ok := x.GetAction().(*BillingBudget_InvokeContainer); ok {
		return x.InvokeContainer
	}
	return nil
}

type isBillingBudget_Action interface {
	isBillingBudget_Action()
}

type BillingBudget_InvokeFunction struct {
	InvokeFunction *InvokeFunctionWithRetry `protobuf:"bytes,101,opt,name=invoke_function,json=invokeFunction,proto3,oneof"`
}

type BillingBudget_InvokeContainer struct {
	InvokeContainer *InvokeContainerWithRetry `protobuf:"bytes,103,opt,name=invoke_container,json=invokeContainer,proto3,oneof"`
}

func (*BillingBudget_InvokeFunction) isBillingBudget_Action() {}

func (*BillingBudget_InvokeContainer) isBillingBudget_Action() {}

type DataStreamBatchSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch size in bytes. Trigger will send the batch of messages to the associated function
	// when size of log events reaches this value, or the [cutoff] time has passed.
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Maximum wait time. Trigger will send the batch of messages the time since the last batch
	// exceeds the `cutoff` value, regardless of the amount of log events.
	Cutoff *durationpb.Duration `protobuf:"bytes,2,opt,name=cutoff,proto3" json:"cutoff,omitempty"`
}

func (x *DataStreamBatchSettings) Reset() {
	*x = DataStreamBatchSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataStreamBatchSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStreamBatchSettings) ProtoMessage() {}

func (x *DataStreamBatchSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStreamBatchSettings.ProtoReflect.Descriptor instead.
func (*DataStreamBatchSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{11}
}

func (x *DataStreamBatchSettings) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DataStreamBatchSettings) GetCutoff() *durationpb.Duration {
	if x != nil {
		return x.Cutoff
	}
	return nil
}

type DataStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data stream endpoint.
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Data stream database.
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// Stream name.
	Stream string `protobuf:"bytes,3,opt,name=stream,proto3" json:"stream,omitempty"`
	// ID of the service account which has permission to read data stream.
	ServiceAccountId string `protobuf:"bytes,4,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Batch settings for processing events.
	BatchSettings *DataStreamBatchSettings `protobuf:"bytes,5,opt,name=batch_settings,json=batchSettings,proto3" json:"batch_settings,omitempty"`
	// Types that are assignable to Action:
	//	*DataStream_InvokeFunction
	//	*DataStream_InvokeContainer
	Action isDataStream_Action `protobuf_oneof:"action"`
}

func (x *DataStream) Reset() {
	*x = DataStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStream) ProtoMessage() {}

func (x *DataStream) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStream.ProtoReflect.Descriptor instead.
func (*DataStream) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{12}
}

func (x *DataStream) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *DataStream) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DataStream) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *DataStream) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *DataStream) GetBatchSettings() *DataStreamBatchSettings {
	if x != nil {
		return x.BatchSettings
	}
	return nil
}

func (m *DataStream) GetAction() isDataStream_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *DataStream) GetInvokeFunction() *InvokeFunctionWithRetry {
	if x, ok := x.GetAction().(*DataStream_InvokeFunction); ok {
		return x.InvokeFunction
	}
	return nil
}

func (x *DataStream) GetInvokeContainer() *InvokeContainerWithRetry {
	if x, ok := x.GetAction().(*DataStream_InvokeContainer); ok {
		return x.InvokeContainer
	}
	return nil
}

type isDataStream_Action interface {
	isDataStream_Action()
}

type DataStream_InvokeFunction struct {
	InvokeFunction *InvokeFunctionWithRetry `protobuf:"bytes,13,opt,name=invoke_function,json=invokeFunction,proto3,oneof"`
}

type DataStream_InvokeContainer struct {
	InvokeContainer *InvokeContainerWithRetry `protobuf:"bytes,15,opt,name=invoke_container,json=invokeContainer,proto3,oneof"`
}

func (*DataStream_InvokeFunction) isDataStream_Action() {}

func (*DataStream_InvokeContainer) isDataStream_Action() {}

type Mail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address to receive emails for trigger activation.
	// Field is ignored for write requests and populated on trigger creation.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Types that are assignable to Action:
	//	*Mail_InvokeFunction
	//	*Mail_InvokeContainer
	Action isMail_Action `protobuf_oneof:"action"`
}

func (x *Mail) Reset() {
	*x = Mail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mail) ProtoMessage() {}

func (x *Mail) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mail.ProtoReflect.Descriptor instead.
func (*Mail) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{13}
}

func (x *Mail) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (m *Mail) GetAction() isMail_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Mail) GetInvokeFunction() *InvokeFunctionWithRetry {
	if x, ok := x.GetAction().(*Mail_InvokeFunction); ok {
		return x.InvokeFunction
	}
	return nil
}

func (x *Mail) GetInvokeContainer() *InvokeContainerWithRetry {
	if x, ok := x.GetAction().(*Mail_InvokeContainer); ok {
		return x.InvokeContainer
	}
	return nil
}

type isMail_Action interface {
	isMail_Action()
}

type Mail_InvokeFunction struct {
	InvokeFunction *InvokeFunctionWithRetry `protobuf:"bytes,101,opt,name=invoke_function,json=invokeFunction,proto3,oneof"`
}

type Mail_InvokeContainer struct {
	InvokeContainer *InvokeContainerWithRetry `protobuf:"bytes,103,opt,name=invoke_container,json=invokeContainer,proto3,oneof"`
}

func (*Mail_InvokeFunction) isMail_Action() {}

func (*Mail_InvokeContainer) isMail_Action() {}

// Description of a rule for trigger activation.
type Trigger_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rule:
	//	*Trigger_Rule_Timer
	//	*Trigger_Rule_MessageQueue
	//	*Trigger_Rule_IotMessage
	//	*Trigger_Rule_ObjectStorage
	//	*Trigger_Rule_ContainerRegistry
	//	*Trigger_Rule_CloudLogs
	//	*Trigger_Rule_Logging
	//	*Trigger_Rule_BillingBudget
	//	*Trigger_Rule_DataStream
	//	*Trigger_Rule_Mail
	Rule isTrigger_Rule_Rule `protobuf_oneof:"rule"`
}

func (x *Trigger_Rule) Reset() {
	*x = Trigger_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Rule) ProtoMessage() {}

func (x *Trigger_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Rule.ProtoReflect.Descriptor instead.
func (*Trigger_Rule) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Trigger_Rule) GetRule() isTrigger_Rule_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (x *Trigger_Rule) GetTimer() *Trigger_Timer {
	if x, ok := x.GetRule().(*Trigger_Rule_Timer); ok {
		return x.Timer
	}
	return nil
}

func (x *Trigger_Rule) GetMessageQueue() *Trigger_MessageQueue {
	if x, ok := x.GetRule().(*Trigger_Rule_MessageQueue); ok {
		return x.MessageQueue
	}
	return nil
}

func (x *Trigger_Rule) GetIotMessage() *Trigger_IoTMessage {
	if x, ok := x.GetRule().(*Trigger_Rule_IotMessage); ok {
		return x.IotMessage
	}
	return nil
}

func (x *Trigger_Rule) GetObjectStorage() *Trigger_ObjectStorage {
	if x, ok := x.GetRule().(*Trigger_Rule_ObjectStorage); ok {
		return x.ObjectStorage
	}
	return nil
}

func (x *Trigger_Rule) GetContainerRegistry() *Trigger_ContainerRegistry {
	if x, ok := x.GetRule().(*Trigger_Rule_ContainerRegistry); ok {
		return x.ContainerRegistry
	}
	return nil
}

func (x *Trigger_Rule) GetCloudLogs() *Trigger_CloudLogs {
	if x, ok := x.GetRule().(*Trigger_Rule_CloudLogs); ok {
		return x.CloudLogs
	}
	return nil
}

func (x *Trigger_Rule) GetLogging() *Trigger_Logging {
	if x, ok := x.GetRule().(*Trigger_Rule_Logging); ok {
		return x.Logging
	}
	return nil
}

func (x *Trigger_Rule) GetBillingBudget() *BillingBudget {
	if x, ok := x.GetRule().(*Trigger_Rule_BillingBudget); ok {
		return x.BillingBudget
	}
	return nil
}

func (x *Trigger_Rule) GetDataStream() *DataStream {
	if x, ok := x.GetRule().(*Trigger_Rule_DataStream); ok {
		return x.DataStream
	}
	return nil
}

func (x *Trigger_Rule) GetMail() *Mail {
	if x, ok := x.GetRule().(*Trigger_Rule_Mail); ok {
		return x.Mail
	}
	return nil
}

type isTrigger_Rule_Rule interface {
	isTrigger_Rule_Rule()
}

type Trigger_Rule_Timer struct {
	// Rule for a timed trigger.
	Timer *Trigger_Timer `protobuf:"bytes,2,opt,name=timer,proto3,oneof"`
}

type Trigger_Rule_MessageQueue struct {
	// Rule for a message queue trigger.
	MessageQueue *Trigger_MessageQueue `protobuf:"bytes,3,opt,name=message_queue,json=messageQueue,proto3,oneof"`
}

type Trigger_Rule_IotMessage struct {
	// Rule for a IoT Core trigger.
	IotMessage *Trigger_IoTMessage `protobuf:"bytes,4,opt,name=iot_message,json=iotMessage,proto3,oneof"`
}

type Trigger_Rule_ObjectStorage struct {
	ObjectStorage *Trigger_ObjectStorage `protobuf:"bytes,5,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

type Trigger_Rule_ContainerRegistry struct {
	ContainerRegistry *Trigger_ContainerRegistry `protobuf:"bytes,6,opt,name=container_registry,json=containerRegistry,proto3,oneof"`
}

type Trigger_Rule_CloudLogs struct {
	CloudLogs *Trigger_CloudLogs `protobuf:"bytes,9,opt,name=cloud_logs,json=cloudLogs,proto3,oneof"`
}

type Trigger_Rule_Logging struct {
	Logging *Trigger_Logging `protobuf:"bytes,10,opt,name=logging,proto3,oneof"`
}

type Trigger_Rule_BillingBudget struct {
	BillingBudget *BillingBudget `protobuf:"bytes,11,opt,name=billing_budget,json=billingBudget,proto3,oneof"`
}

type Trigger_Rule_DataStream struct {
	DataStream *DataStream `protobuf:"bytes,12,opt,name=data_stream,json=dataStream,proto3,oneof"`
}

type Trigger_Rule_Mail struct {
	Mail *Mail `protobuf:"bytes,13,opt,name=mail,proto3,oneof"`
}

func (*Trigger_Rule_Timer) isTrigger_Rule_Rule() {}

func (*Trigger_Rule_MessageQueue) isTrigger_Rule_Rule() {}

func (*Trigger_Rule_IotMessage) isTrigger_Rule_Rule() {}

func (*Trigger_Rule_ObjectStorage) isTrigger_Rule_Rule() {}

func (*Trigger_Rule_ContainerRegistry) isTrigger_Rule_Rule() {}

func (*Trigger_Rule_CloudLogs) isTrigger_Rule_Rule() {}

func (*Trigger_Rule_Logging) isTrigger_Rule_Rule() {}

func (*Trigger_Rule_BillingBudget) isTrigger_Rule_Rule() {}

func (*Trigger_Rule_DataStream) isTrigger_Rule_Rule() {}

func (*Trigger_Rule_Mail) isTrigger_Rule_Rule() {}

// Rule for activating a timed trigger.
type Trigger_Timer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of a schedule as a [cron expression](/docs/functions/concepts/trigger/timer).
	CronExpression string `protobuf:"bytes,1,opt,name=cron_expression,json=cronExpression,proto3" json:"cron_expression,omitempty"`
	// Action to be executed when the current time matches the [cron_expression].
	//
	// Types that are assignable to Action:
	//	*Trigger_Timer_InvokeFunction
	//	*Trigger_Timer_InvokeFunctionWithRetry
	//	*Trigger_Timer_InvokeContainerWithRetry
	Action isTrigger_Timer_Action `protobuf_oneof:"action"`
}

func (x *Trigger_Timer) Reset() {
	*x = Trigger_Timer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Timer) ProtoMessage() {}

func (x *Trigger_Timer) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Timer.ProtoReflect.Descriptor instead.
func (*Trigger_Timer) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Trigger_Timer) GetCronExpression() string {
	if x != nil {
		return x.CronExpression
	}
	return ""
}

func (m *Trigger_Timer) GetAction() isTrigger_Timer_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Trigger_Timer) GetInvokeFunction() *InvokeFunctionOnce {
	if x, ok := x.GetAction().(*Trigger_Timer_InvokeFunction); ok {
		return x.InvokeFunction
	}
	return nil
}

func (x *Trigger_Timer) GetInvokeFunctionWithRetry() *InvokeFunctionWithRetry {
	if x, ok := x.GetAction().(*Trigger_Timer_InvokeFunctionWithRetry); ok {
		return x.InvokeFunctionWithRetry
	}
	return nil
}

func (x *Trigger_Timer) GetInvokeContainerWithRetry() *InvokeContainerWithRetry {
	if x, ok := x.GetAction().(*Trigger_Timer_InvokeContainerWithRetry); ok {
		return x.InvokeContainerWithRetry
	}
	return nil
}

type isTrigger_Timer_Action interface {
	isTrigger_Timer_Action()
}

type Trigger_Timer_InvokeFunction struct {
	// Instructions for invoking a function once.
	InvokeFunction *InvokeFunctionOnce `protobuf:"bytes,101,opt,name=invoke_function,json=invokeFunction,proto3,oneof"`
}

type Trigger_Timer_InvokeFunctionWithRetry struct {
	// Instructions for invoking a function with retry.
	InvokeFunctionWithRetry *InvokeFunctionWithRetry `protobuf:"bytes,103,opt,name=invoke_function_with_retry,json=invokeFunctionWithRetry,proto3,oneof"`
}

type Trigger_Timer_InvokeContainerWithRetry struct {
	// Instructions for invoking a container with retry.
	InvokeContainerWithRetry *InvokeContainerWithRetry `protobuf:"bytes,104,opt,name=invoke_container_with_retry,json=invokeContainerWithRetry,proto3,oneof"`
}

func (*Trigger_Timer_InvokeFunction) isTrigger_Timer_Action() {}

func (*Trigger_Timer_InvokeFunctionWithRetry) isTrigger_Timer_Action() {}

func (*Trigger_Timer_InvokeContainerWithRetry) isTrigger_Timer_Action() {}

// Rule for activating a message queue trigger.
type Trigger_MessageQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the message queue in Message Queue.
	QueueId string `protobuf:"bytes,11,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	// ID of the service account which has read access to the message queue.
	ServiceAccountId string `protobuf:"bytes,3,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Batch settings for processing messages in the queue.
	BatchSettings *BatchSettings `protobuf:"bytes,4,opt,name=batch_settings,json=batchSettings,proto3" json:"batch_settings,omitempty"`
	// Queue visibility timeout override.
	VisibilityTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=visibility_timeout,json=visibilityTimeout,proto3" json:"visibility_timeout,omitempty"`
	// Action to be executed when the there's a new message in the queue.
	//
	// Types that are assignable to Action:
	//	*Trigger_MessageQueue_InvokeFunction
	//	*Trigger_MessageQueue_InvokeContainer
	Action isTrigger_MessageQueue_Action `protobuf_oneof:"action"`
}

func (x *Trigger_MessageQueue) Reset() {
	*x = Trigger_MessageQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_MessageQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_MessageQueue) ProtoMessage() {}

func (x *Trigger_MessageQueue) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_MessageQueue.ProtoReflect.Descriptor instead.
func (*Trigger_MessageQueue) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Trigger_MessageQueue) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

func (x *Trigger_MessageQueue) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *Trigger_MessageQueue) GetBatchSettings() *BatchSettings {
	if x != nil {
		return x.BatchSettings
	}
	return nil
}

func (x *Trigger_MessageQueue) GetVisibilityTimeout() *durationpb.Duration {
	if x != nil {
		return x.VisibilityTimeout
	}
	return nil
}

func (m *Trigger_MessageQueue) GetAction() isTrigger_MessageQueue_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Trigger_MessageQueue) GetInvokeFunction() *InvokeFunctionOnce {
	if x, ok := x.GetAction().(*Trigger_MessageQueue_InvokeFunction); ok {
		return x.InvokeFunction
	}
	return nil
}

func (x *Trigger_MessageQueue) GetInvokeContainer() *InvokeContainerOnce {
	if x, ok := x.GetAction().(*Trigger_MessageQueue_InvokeContainer); ok {
		return x.InvokeContainer
	}
	return nil
}

type isTrigger_MessageQueue_Action interface {
	isTrigger_MessageQueue_Action()
}

type Trigger_MessageQueue_InvokeFunction struct {
	// Instructions for invoking a function once.
	InvokeFunction *InvokeFunctionOnce `protobuf:"bytes,101,opt,name=invoke_function,json=invokeFunction,proto3,oneof"`
}

type Trigger_MessageQueue_InvokeContainer struct {
	// Instructions for invoking a container once.
	InvokeContainer *InvokeContainerOnce `protobuf:"bytes,102,opt,name=invoke_container,json=invokeContainer,proto3,oneof"`
}

func (*Trigger_MessageQueue_InvokeFunction) isTrigger_MessageQueue_Action() {}

func (*Trigger_MessageQueue_InvokeContainer) isTrigger_MessageQueue_Action() {}

// Rule for activating a IoT Core trigger.
type Trigger_IoTMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the IoT Core registry.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// ID of the IoT Core device in the registry.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// MQTT topic whose messages activate the trigger.
	MqttTopic string `protobuf:"bytes,3,opt,name=mqtt_topic,json=mqttTopic,proto3" json:"mqtt_topic,omitempty"`
	// Action to be executed when the there's a new message in the MQTT topic.
	//
	// Types that are assignable to Action:
	//	*Trigger_IoTMessage_InvokeFunction
	//	*Trigger_IoTMessage_InvokeContainer
	Action isTrigger_IoTMessage_Action `protobuf_oneof:"action"`
}

func (x *Trigger_IoTMessage) Reset() {
	*x = Trigger_IoTMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_IoTMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_IoTMessage) ProtoMessage() {}

func (x *Trigger_IoTMessage) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_IoTMessage.ProtoReflect.Descriptor instead.
func (*Trigger_IoTMessage) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Trigger_IoTMessage) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *Trigger_IoTMessage) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Trigger_IoTMessage) GetMqttTopic() string {
	if x != nil {
		return x.MqttTopic
	}
	return ""
}

func (m *Trigger_IoTMessage) GetAction() isTrigger_IoTMessage_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Trigger_IoTMessage) GetInvokeFunction() *InvokeFunctionWithRetry {
	if x, ok := x.GetAction().(*Trigger_IoTMessage_InvokeFunction); ok {
		return x.InvokeFunction
	}
	return nil
}

func (x *Trigger_IoTMessage) GetInvokeContainer() *InvokeContainerWithRetry {
	if x, ok := x.GetAction().(*Trigger_IoTMessage_InvokeContainer); ok {
		return x.InvokeContainer
	}
	return nil
}

type isTrigger_IoTMessage_Action interface {
	isTrigger_IoTMessage_Action()
}

type Trigger_IoTMessage_InvokeFunction struct {
	// Instructions for invoking a function with retries as needed.
	InvokeFunction *InvokeFunctionWithRetry `protobuf:"bytes,101,opt,name=invoke_function,json=invokeFunction,proto3,oneof"`
}

type Trigger_IoTMessage_InvokeContainer struct {
	// Instructions for invoking a container with retries as needed.
	InvokeContainer *InvokeContainerWithRetry `protobuf:"bytes,102,opt,name=invoke_container,json=invokeContainer,proto3,oneof"`
}

func (*Trigger_IoTMessage_InvokeFunction) isTrigger_IoTMessage_Action() {}

func (*Trigger_IoTMessage_InvokeContainer) isTrigger_IoTMessage_Action() {}

type Trigger_ObjectStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type (name) of events, at least one value is required.
	EventType []Trigger_ObjectStorageEventType `protobuf:"varint,3,rep,packed,name=event_type,json=eventType,proto3,enum=yandex.cloud.serverless.triggers.v1.Trigger_ObjectStorageEventType" json:"event_type,omitempty"`
	// ID of the bucket.
	BucketId string `protobuf:"bytes,4,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// Prefix of the object key. Filter, optional.
	Prefix string `protobuf:"bytes,6,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Suffix of the object key. Filter, optional.
	Suffix string `protobuf:"bytes,7,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// Types that are assignable to Action:
	//	*Trigger_ObjectStorage_InvokeFunction
	//	*Trigger_ObjectStorage_InvokeContainer
	Action isTrigger_ObjectStorage_Action `protobuf_oneof:"action"`
}

func (x *Trigger_ObjectStorage) Reset() {
	*x = Trigger_ObjectStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_ObjectStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_ObjectStorage) ProtoMessage() {}

func (x *Trigger_ObjectStorage) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_ObjectStorage.ProtoReflect.Descriptor instead.
func (*Trigger_ObjectStorage) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Trigger_ObjectStorage) GetEventType() []Trigger_ObjectStorageEventType {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *Trigger_ObjectStorage) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *Trigger_ObjectStorage) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Trigger_ObjectStorage) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (m *Trigger_ObjectStorage) GetAction() isTrigger_ObjectStorage_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Trigger_ObjectStorage) GetInvokeFunction() *InvokeFunctionWithRetry {
	if x, ok := x.GetAction().(*Trigger_ObjectStorage_InvokeFunction); ok {
		return x.InvokeFunction
	}
	return nil
}

func (x *Trigger_ObjectStorage) GetInvokeContainer() *InvokeContainerWithRetry {
	if x, ok := x.GetAction().(*Trigger_ObjectStorage_InvokeContainer); ok {
		return x.InvokeContainer
	}
	return nil
}

type isTrigger_ObjectStorage_Action interface {
	isTrigger_ObjectStorage_Action()
}

type Trigger_ObjectStorage_InvokeFunction struct {
	// Instructions for invoking a function with retries as needed.
	InvokeFunction *InvokeFunctionWithRetry `protobuf:"bytes,101,opt,name=invoke_function,json=invokeFunction,proto3,oneof"`
}

type Trigger_ObjectStorage_InvokeContainer struct {
	// Instructions for invoking a container with retries as needed.
	InvokeContainer *InvokeContainerWithRetry `protobuf:"bytes,102,opt,name=invoke_container,json=invokeContainer,proto3,oneof"`
}

func (*Trigger_ObjectStorage_InvokeFunction) isTrigger_ObjectStorage_Action() {}

func (*Trigger_ObjectStorage_InvokeContainer) isTrigger_ObjectStorage_Action() {}

type Trigger_ContainerRegistry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type (name) of events, at least one value is required.
	EventType []Trigger_ContainerRegistryEventType `protobuf:"varint,3,rep,packed,name=event_type,json=eventType,proto3,enum=yandex.cloud.serverless.triggers.v1.Trigger_ContainerRegistryEventType" json:"event_type,omitempty"`
	// ID of the registry.
	RegistryId string `protobuf:"bytes,4,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// Docker-image name. Filter, optional.
	ImageName string `protobuf:"bytes,5,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	// Docker-image tag. Filter, optional.
	Tag string `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`
	// Types that are assignable to Action:
	//	*Trigger_ContainerRegistry_InvokeFunction
	//	*Trigger_ContainerRegistry_InvokeContainer
	Action isTrigger_ContainerRegistry_Action `protobuf_oneof:"action"`
}

func (x *Trigger_ContainerRegistry) Reset() {
	*x = Trigger_ContainerRegistry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_ContainerRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_ContainerRegistry) ProtoMessage() {}

func (x *Trigger_ContainerRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_ContainerRegistry.ProtoReflect.Descriptor instead.
func (*Trigger_ContainerRegistry) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Trigger_ContainerRegistry) GetEventType() []Trigger_ContainerRegistryEventType {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *Trigger_ContainerRegistry) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *Trigger_ContainerRegistry) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *Trigger_ContainerRegistry) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (m *Trigger_ContainerRegistry) GetAction() isTrigger_ContainerRegistry_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Trigger_ContainerRegistry) GetInvokeFunction() *InvokeFunctionWithRetry {
	if x, ok := x.GetAction().(*Trigger_ContainerRegistry_InvokeFunction); ok {
		return x.InvokeFunction
	}
	return nil
}

func (x *Trigger_ContainerRegistry) GetInvokeContainer() *InvokeContainerWithRetry {
	if x, ok := x.GetAction().(*Trigger_ContainerRegistry_InvokeContainer); ok {
		return x.InvokeContainer
	}
	return nil
}

type isTrigger_ContainerRegistry_Action interface {
	isTrigger_ContainerRegistry_Action()
}

type Trigger_ContainerRegistry_InvokeFunction struct {
	// Instructions for invoking a function with retries as needed.
	InvokeFunction *InvokeFunctionWithRetry `protobuf:"bytes,101,opt,name=invoke_function,json=invokeFunction,proto3,oneof"`
}

type Trigger_ContainerRegistry_InvokeContainer struct {
	// Instructions for invoking a container with retries as needed.
	InvokeContainer *InvokeContainerWithRetry `protobuf:"bytes,102,opt,name=invoke_container,json=invokeContainer,proto3,oneof"`
}

func (*Trigger_ContainerRegistry_InvokeFunction) isTrigger_ContainerRegistry_Action() {}

func (*Trigger_ContainerRegistry_InvokeContainer) isTrigger_ContainerRegistry_Action() {}

type Trigger_CloudLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log group identifiers, at least one value is required.
	LogGroupId []string `protobuf:"bytes,1,rep,name=log_group_id,json=logGroupId,proto3" json:"log_group_id,omitempty"`
	// Batch settings for processing log events.
	BatchSettings *CloudLogsBatchSettings `protobuf:"bytes,2,opt,name=batch_settings,json=batchSettings,proto3" json:"batch_settings,omitempty"`
	// Types that are assignable to Action:
	//	*Trigger_CloudLogs_InvokeFunction
	//	*Trigger_CloudLogs_InvokeContainer
	Action isTrigger_CloudLogs_Action `protobuf_oneof:"action"`
}

func (x *Trigger_CloudLogs) Reset() {
	*x = Trigger_CloudLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_CloudLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_CloudLogs) ProtoMessage() {}

func (x *Trigger_CloudLogs) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_CloudLogs.ProtoReflect.Descriptor instead.
func (*Trigger_CloudLogs) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Trigger_CloudLogs) GetLogGroupId() []string {
	if x != nil {
		return x.LogGroupId
	}
	return nil
}

func (x *Trigger_CloudLogs) GetBatchSettings() *CloudLogsBatchSettings {
	if x != nil {
		return x.BatchSettings
	}
	return nil
}

func (m *Trigger_CloudLogs) GetAction() isTrigger_CloudLogs_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Trigger_CloudLogs) GetInvokeFunction() *InvokeFunctionWithRetry {
	if x, ok := x.GetAction().(*Trigger_CloudLogs_InvokeFunction); ok {
		return x.InvokeFunction
	}
	return nil
}

func (x *Trigger_CloudLogs) GetInvokeContainer() *InvokeContainerWithRetry {
	if x, ok := x.GetAction().(*Trigger_CloudLogs_InvokeContainer); ok {
		return x.InvokeContainer
	}
	return nil
}

type isTrigger_CloudLogs_Action interface {
	isTrigger_CloudLogs_Action()
}

type Trigger_CloudLogs_InvokeFunction struct {
	// Instructions for invoking a function with retries as needed.
	InvokeFunction *InvokeFunctionWithRetry `protobuf:"bytes,101,opt,name=invoke_function,json=invokeFunction,proto3,oneof"`
}

type Trigger_CloudLogs_InvokeContainer struct {
	// Instructions for invoking a container with retries as needed.
	InvokeContainer *InvokeContainerWithRetry `protobuf:"bytes,102,opt,name=invoke_container,json=invokeContainer,proto3,oneof"`
}

func (*Trigger_CloudLogs_InvokeFunction) isTrigger_CloudLogs_Action() {}

func (*Trigger_CloudLogs_InvokeContainer) isTrigger_CloudLogs_Action() {}

type Trigger_Logging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log events filter settings.
	LogGroupId   string              `protobuf:"bytes,1,opt,name=log_group_id,json=logGroupId,proto3" json:"log_group_id,omitempty"`
	ResourceType []string            `protobuf:"bytes,3,rep,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	ResourceId   []string            `protobuf:"bytes,4,rep,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Levels       []v1.LogLevel_Level `protobuf:"varint,5,rep,packed,name=levels,proto3,enum=yandex.cloud.logging.v1.LogLevel_Level" json:"levels,omitempty"`
	// Batch settings for processing log events.
	BatchSettings *LoggingBatchSettings `protobuf:"bytes,6,opt,name=batch_settings,json=batchSettings,proto3" json:"batch_settings,omitempty"`
	// Types that are assignable to Action:
	//	*Trigger_Logging_InvokeFunction
	//	*Trigger_Logging_InvokeContainer
	Action isTrigger_Logging_Action `protobuf_oneof:"action"`
}

func (x *Trigger_Logging) Reset() {
	*x = Trigger_Logging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Logging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Logging) ProtoMessage() {}

func (x *Trigger_Logging) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Logging.ProtoReflect.Descriptor instead.
func (*Trigger_Logging) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Trigger_Logging) GetLogGroupId() string {
	if x != nil {
		return x.LogGroupId
	}
	return ""
}

func (x *Trigger_Logging) GetResourceType() []string {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *Trigger_Logging) GetResourceId() []string {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *Trigger_Logging) GetLevels() []v1.LogLevel_Level {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *Trigger_Logging) GetBatchSettings() *LoggingBatchSettings {
	if x != nil {
		return x.BatchSettings
	}
	return nil
}

func (m *Trigger_Logging) GetAction() isTrigger_Logging_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Trigger_Logging) GetInvokeFunction() *InvokeFunctionWithRetry {
	if x, ok := x.GetAction().(*Trigger_Logging_InvokeFunction); ok {
		return x.InvokeFunction
	}
	return nil
}

func (x *Trigger_Logging) GetInvokeContainer() *InvokeContainerWithRetry {
	if x, ok := x.GetAction().(*Trigger_Logging_InvokeContainer); ok {
		return x.InvokeContainer
	}
	return nil
}

type isTrigger_Logging_Action interface {
	isTrigger_Logging_Action()
}

type Trigger_Logging_InvokeFunction struct {
	// Instructions for invoking a function with retries as needed.
	InvokeFunction *InvokeFunctionWithRetry `protobuf:"bytes,101,opt,name=invoke_function,json=invokeFunction,proto3,oneof"`
}

type Trigger_Logging_InvokeContainer struct {
	// Instructions for invoking a container with retries as needed.
	InvokeContainer *InvokeContainerWithRetry `protobuf:"bytes,103,opt,name=invoke_container,json=invokeContainer,proto3,oneof"`
}

func (*Trigger_Logging_InvokeFunction) isTrigger_Logging_Action() {}

func (*Trigger_Logging_InvokeContainer) isTrigger_Logging_Action() {}

var File_yandex_cloud_serverless_triggers_v1_trigger_proto protoreflect.FileDescriptor

var file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDesc = []byte{
	0x0a, 0x31, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x23, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x83, 0x28, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x33, 0x2d, 0x36, 0x33, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x30, 0x2d, 0x32, 0x35,
	0x36, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x4b, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x4b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x91, 0x07, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x4a,
	0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x0d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x5a, 0x0a, 0x0b,
	0x69, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x49, 0x6f, 0x54, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6f,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x6f, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x57,
	0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x5b, 0x0a, 0x0e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x42,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3f, 0x0a, 0x04, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0c, 0x0a, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x1a, 0xb0, 0x03, 0x0a, 0x05, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe8, 0xc7,
	0x31, 0x01, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x0e, 0x63, 0x72, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x7b, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x7e, 0x0a, 0x1b,
	0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x1a, 0xfc, 0x03, 0x0a,
	0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01,
	0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0d, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x68, 0x52, 0x11, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x62, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4f, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x1a, 0xd4, 0x02, 0x0a, 0x0a,
	0x49, 0x6f, 0x54, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x67, 0x0a,
	0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73,
	0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x42, 0x0e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x04, 0xc0, 0xc1,
	0x31, 0x01, 0x1a, 0xad, 0x03, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x6a, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x82,
	0xc8, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x67, 0x0a,
	0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73,
	0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x42, 0x0e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x04, 0xc0, 0xc1,
	0x31, 0x01, 0x1a, 0xba, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x6e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x82, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x67, 0x0a, 0x0f, 0x69, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f,
	0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42,
	0x0e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x1a,
	0xfc, 0x02, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x68, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73,
	0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x67, 0x0a, 0x0f, 0x69, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x69,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x0e,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x1a, 0xe9,
	0x04, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x29, 0xf2,
	0xc7, 0x31, 0x1c, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x2d, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x7b, 0x31, 0x2c, 0x36, 0x32, 0x7d, 0x82,
	0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x29, 0xf2, 0xc7, 0x31,
	0x1c, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x7b, 0x31, 0x2c, 0x36, 0x32, 0x7d, 0x82, 0xc8, 0x31,
	0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x08, 0x82, 0xc8, 0x31,
	0x04, 0x3c, 0x3d, 0x31, 0x30, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x66, 0x0a,
	0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x67, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e,
	0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a,
	0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x16, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x2b, 0x0a,
	0x27, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x03, 0x22, 0x93, 0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x04, 0x22, 0x38, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x2d,
	0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35,
	0x30, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd6,
	0x02, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x0b, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0a, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0e, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x11, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4f, 0x6e, 0x63, 0x65, 0x12,
	0x2f, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c,
	0x3d, 0x35, 0x30, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xca, 0x02, 0x0a, 0x18, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12,
	0x2f, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c,
	0x3d, 0x35, 0x30, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x59, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a,
	0x11, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f,
	0x64, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22,
	0x68, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a,
	0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x0d, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xfa, 0xc7, 0x31, 0x04, 0x30, 0x2d,
	0x31, 0x30, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x75, 0x74, 0x6f,
	0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x06, 0x63, 0x75, 0x74, 0x6f, 0x66,
	0x66, 0x22, 0x75, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x30,
	0x2d, 0x31, 0x30, 0x30, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x75,
	0x74, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x31, 0x73, 0x2d, 0x31, 0x6d,
	0x52, 0x06, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x22, 0x73, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09,
	0xfa, 0xc7, 0x31, 0x05, 0x31, 0x2d, 0x31, 0x30, 0x30, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x3c, 0x0a, 0x06, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05,
	0x31, 0x73, 0x2d, 0x31, 0x6d, 0x52, 0x06, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x22, 0x7c, 0x0a,
	0x0d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e,
	0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0xc7, 0x31, 0x03, 0x31, 0x2d, 0x35, 0x52,
	0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x3b,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe8, 0xc7, 0x31,
	0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xd7, 0x02, 0x0a, 0x0d,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x3a, 0x0a,
	0x12, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a,
	0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x62, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8,
	0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x67, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x10, 0x69, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0x78, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1f, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b,
	0xfa, 0xc7, 0x31, 0x07, 0x31, 0x2d, 0x36, 0x35, 0x35, 0x33, 0x36, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0xfa, 0xc7,
	0x31, 0x05, 0x31, 0x73, 0x2d, 0x31, 0x6d, 0x52, 0x06, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x22,
	0xd4, 0x03, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x0e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x67, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x10, 0x69, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0x81, 0x02, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x67, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e,
	0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a,
	0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x2a, 0xca, 0x01, 0x0a, 0x0b, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x4d, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4f, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x59, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4c, 0x4f, 0x47,
	0x53, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x08,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x55, 0x44, 0x47,
	0x45, 0x54, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x44, 0x53, 0x10, 0x0a, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x0b, 0x42, 0x7b, 0x0a, 0x27, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescOnce sync.Once
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescData = file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDesc
)

func file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescGZIP() []byte {
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescData)
	})
	return file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDescData
}

var file_yandex_cloud_serverless_triggers_v1_trigger_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_yandex_cloud_serverless_triggers_v1_trigger_proto_goTypes = []interface{}{
	(TriggerType)(0),                        // 0: yandex.cloud.serverless.triggers.v1.TriggerType
	(Trigger_ObjectStorageEventType)(0),     // 1: yandex.cloud.serverless.triggers.v1.Trigger.ObjectStorageEventType
	(Trigger_ContainerRegistryEventType)(0), // 2: yandex.cloud.serverless.triggers.v1.Trigger.ContainerRegistryEventType
	(Trigger_Status)(0),                     // 3: yandex.cloud.serverless.triggers.v1.Trigger.Status
	(*Trigger)(nil),                         // 4: yandex.cloud.serverless.triggers.v1.Trigger
	(*InvokeFunctionOnce)(nil),              // 5: yandex.cloud.serverless.triggers.v1.InvokeFunctionOnce
	(*InvokeFunctionWithRetry)(nil),         // 6: yandex.cloud.serverless.triggers.v1.InvokeFunctionWithRetry
	(*InvokeContainerOnce)(nil),             // 7: yandex.cloud.serverless.triggers.v1.InvokeContainerOnce
	(*InvokeContainerWithRetry)(nil),        // 8: yandex.cloud.serverless.triggers.v1.InvokeContainerWithRetry
	(*PutQueueMessage)(nil),                 // 9: yandex.cloud.serverless.triggers.v1.PutQueueMessage
	(*BatchSettings)(nil),                   // 10: yandex.cloud.serverless.triggers.v1.BatchSettings
	(*CloudLogsBatchSettings)(nil),          // 11: yandex.cloud.serverless.triggers.v1.CloudLogsBatchSettings
	(*LoggingBatchSettings)(nil),            // 12: yandex.cloud.serverless.triggers.v1.LoggingBatchSettings
	(*RetrySettings)(nil),                   // 13: yandex.cloud.serverless.triggers.v1.RetrySettings
	(*BillingBudget)(nil),                   // 14: yandex.cloud.serverless.triggers.v1.BillingBudget
	(*DataStreamBatchSettings)(nil),         // 15: yandex.cloud.serverless.triggers.v1.DataStreamBatchSettings
	(*DataStream)(nil),                      // 16: yandex.cloud.serverless.triggers.v1.DataStream
	(*Mail)(nil),                            // 17: yandex.cloud.serverless.triggers.v1.Mail
	nil,                                     // 18: yandex.cloud.serverless.triggers.v1.Trigger.LabelsEntry
	(*Trigger_Rule)(nil),                    // 19: yandex.cloud.serverless.triggers.v1.Trigger.Rule
	(*Trigger_Timer)(nil),                   // 20: yandex.cloud.serverless.triggers.v1.Trigger.Timer
	(*Trigger_MessageQueue)(nil),            // 21: yandex.cloud.serverless.triggers.v1.Trigger.MessageQueue
	(*Trigger_IoTMessage)(nil),              // 22: yandex.cloud.serverless.triggers.v1.Trigger.IoTMessage
	(*Trigger_ObjectStorage)(nil),           // 23: yandex.cloud.serverless.triggers.v1.Trigger.ObjectStorage
	(*Trigger_ContainerRegistry)(nil),       // 24: yandex.cloud.serverless.triggers.v1.Trigger.ContainerRegistry
	(*Trigger_CloudLogs)(nil),               // 25: yandex.cloud.serverless.triggers.v1.Trigger.CloudLogs
	(*Trigger_Logging)(nil),                 // 26: yandex.cloud.serverless.triggers.v1.Trigger.Logging
	(*timestamppb.Timestamp)(nil),           // 27: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),             // 28: google.protobuf.Duration
	(v1.LogLevel_Level)(0),                  // 29: yandex.cloud.logging.v1.LogLevel.Level
}
var file_yandex_cloud_serverless_triggers_v1_trigger_proto_depIdxs = []int32{
	27, // 0: yandex.cloud.serverless.triggers.v1.Trigger.created_at:type_name -> google.protobuf.Timestamp
	18, // 1: yandex.cloud.serverless.triggers.v1.Trigger.labels:type_name -> yandex.cloud.serverless.triggers.v1.Trigger.LabelsEntry
	19, // 2: yandex.cloud.serverless.triggers.v1.Trigger.rule:type_name -> yandex.cloud.serverless.triggers.v1.Trigger.Rule
	3,  // 3: yandex.cloud.serverless.triggers.v1.Trigger.status:type_name -> yandex.cloud.serverless.triggers.v1.Trigger.Status
	13, // 4: yandex.cloud.serverless.triggers.v1.InvokeFunctionWithRetry.retry_settings:type_name -> yandex.cloud.serverless.triggers.v1.RetrySettings
	9,  // 5: yandex.cloud.serverless.triggers.v1.InvokeFunctionWithRetry.dead_letter_queue:type_name -> yandex.cloud.serverless.triggers.v1.PutQueueMessage
	13, // 6: yandex.cloud.serverless.triggers.v1.InvokeContainerWithRetry.retry_settings:type_name -> yandex.cloud.serverless.triggers.v1.RetrySettings
	9,  // 7: yandex.cloud.serverless.triggers.v1.InvokeContainerWithRetry.dead_letter_queue:type_name -> yandex.cloud.serverless.triggers.v1.PutQueueMessage
	28, // 8: yandex.cloud.serverless.triggers.v1.BatchSettings.cutoff:type_name -> google.protobuf.Duration
	28, // 9: yandex.cloud.serverless.triggers.v1.CloudLogsBatchSettings.cutoff:type_name -> google.protobuf.Duration
	28, // 10: yandex.cloud.serverless.triggers.v1.LoggingBatchSettings.cutoff:type_name -> google.protobuf.Duration
	28, // 11: yandex.cloud.serverless.triggers.v1.RetrySettings.interval:type_name -> google.protobuf.Duration
	6,  // 12: yandex.cloud.serverless.triggers.v1.BillingBudget.invoke_function:type_name -> yandex.cloud.serverless.triggers.v1.InvokeFunctionWithRetry
	8,  // 13: yandex.cloud.serverless.triggers.v1.BillingBudget.invoke_container:type_name -> yandex.cloud.serverless.triggers.v1.InvokeContainerWithRetry
	28, // 14: yandex.cloud.serverless.triggers.v1.DataStreamBatchSettings.cutoff:type_name -> google.protobuf.Duration
	15, // 15: yandex.cloud.serverless.triggers.v1.DataStream.batch_settings:type_name -> yandex.cloud.serverless.triggers.v1.DataStreamBatchSettings
	6,  // 16: yandex.cloud.serverless.triggers.v1.DataStream.invoke_function:type_name -> yandex.cloud.serverless.triggers.v1.InvokeFunctionWithRetry
	8,  // 17: yandex.cloud.serverless.triggers.v1.DataStream.invoke_container:type_name -> yandex.cloud.serverless.triggers.v1.InvokeContainerWithRetry
	6,  // 18: yandex.cloud.serverless.triggers.v1.Mail.invoke_function:type_name -> yandex.cloud.serverless.triggers.v1.InvokeFunctionWithRetry
	8,  // 19: yandex.cloud.serverless.triggers.v1.Mail.invoke_container:type_name -> yandex.cloud.serverless.triggers.v1.InvokeContainerWithRetry
	20, // 20: yandex.cloud.serverless.triggers.v1.Trigger.Rule.timer:type_name -> yandex.cloud.serverless.triggers.v1.Trigger.Timer
	21, // 21: yandex.cloud.serverless.triggers.v1.Trigger.Rule.message_queue:type_name -> yandex.cloud.serverless.triggers.v1.Trigger.MessageQueue
	22, // 22: yandex.cloud.serverless.triggers.v1.Trigger.Rule.iot_message:type_name -> yandex.cloud.serverless.triggers.v1.Trigger.IoTMessage
	23, // 23: yandex.cloud.serverless.triggers.v1.Trigger.Rule.object_storage:type_name -> yandex.cloud.serverless.triggers.v1.Trigger.ObjectStorage
	24, // 24: yandex.cloud.serverless.triggers.v1.Trigger.Rule.container_registry:type_name -> yandex.cloud.serverless.triggers.v1.Trigger.ContainerRegistry
	25, // 25: yandex.cloud.serverless.triggers.v1.Trigger.Rule.cloud_logs:type_name -> yandex.cloud.serverless.triggers.v1.Trigger.CloudLogs
	26, // 26: yandex.cloud.serverless.triggers.v1.Trigger.Rule.logging:type_name -> yandex.cloud.serverless.triggers.v1.Trigger.Logging
	14, // 27: yandex.cloud.serverless.triggers.v1.Trigger.Rule.billing_budget:type_name -> yandex.cloud.serverless.triggers.v1.BillingBudget
	16, // 28: yandex.cloud.serverless.triggers.v1.Trigger.Rule.data_stream:type_name -> yandex.cloud.serverless.triggers.v1.DataStream
	17, // 29: yandex.cloud.serverless.triggers.v1.Trigger.Rule.mail:type_name -> yandex.cloud.serverless.triggers.v1.Mail
	5,  // 30: yandex.cloud.serverless.triggers.v1.Trigger.Timer.invoke_function:type_name -> yandex.cloud.serverless.triggers.v1.InvokeFunctionOnce
	6,  // 31: yandex.cloud.serverless.triggers.v1.Trigger.Timer.invoke_function_with_retry:type_name -> yandex.cloud.serverless.triggers.v1.InvokeFunctionWithRetry
	8,  // 32: yandex.cloud.serverless.triggers.v1.Trigger.Timer.invoke_container_with_retry:type_name -> yandex.cloud.serverless.triggers.v1.InvokeContainerWithRetry
	10, // 33: yandex.cloud.serverless.triggers.v1.Trigger.MessageQueue.batch_settings:type_name -> yandex.cloud.serverless.triggers.v1.BatchSettings
	28, // 34: yandex.cloud.serverless.triggers.v1.Trigger.MessageQueue.visibility_timeout:type_name -> google.protobuf.Duration
	5,  // 35: yandex.cloud.serverless.triggers.v1.Trigger.MessageQueue.invoke_function:type_name -> yandex.cloud.serverless.triggers.v1.InvokeFunctionOnce
	7,  // 36: yandex.cloud.serverless.triggers.v1.Trigger.MessageQueue.invoke_container:type_name -> yandex.cloud.serverless.triggers.v1.InvokeContainerOnce
	6,  // 37: yandex.cloud.serverless.triggers.v1.Trigger.IoTMessage.invoke_function:type_name -> yandex.cloud.serverless.triggers.v1.InvokeFunctionWithRetry
	8,  // 38: yandex.cloud.serverless.triggers.v1.Trigger.IoTMessage.invoke_container:type_name -> yandex.cloud.serverless.triggers.v1.InvokeContainerWithRetry
	1,  // 39: yandex.cloud.serverless.triggers.v1.Trigger.ObjectStorage.event_type:type_name -> yandex.cloud.serverless.triggers.v1.Trigger.ObjectStorageEventType
	6,  // 40: yandex.cloud.serverless.triggers.v1.Trigger.ObjectStorage.invoke_function:type_name -> yandex.cloud.serverless.triggers.v1.InvokeFunctionWithRetry
	8,  // 41: yandex.cloud.serverless.triggers.v1.Trigger.ObjectStorage.invoke_container:type_name -> yandex.cloud.serverless.triggers.v1.InvokeContainerWithRetry
	2,  // 42: yandex.cloud.serverless.triggers.v1.Trigger.ContainerRegistry.event_type:type_name -> yandex.cloud.serverless.triggers.v1.Trigger.ContainerRegistryEventType
	6,  // 43: yandex.cloud.serverless.triggers.v1.Trigger.ContainerRegistry.invoke_function:type_name -> yandex.cloud.serverless.triggers.v1.InvokeFunctionWithRetry
	8,  // 44: yandex.cloud.serverless.triggers.v1.Trigger.ContainerRegistry.invoke_container:type_name -> yandex.cloud.serverless.triggers.v1.InvokeContainerWithRetry
	11, // 45: yandex.cloud.serverless.triggers.v1.Trigger.CloudLogs.batch_settings:type_name -> yandex.cloud.serverless.triggers.v1.CloudLogsBatchSettings
	6,  // 46: yandex.cloud.serverless.triggers.v1.Trigger.CloudLogs.invoke_function:type_name -> yandex.cloud.serverless.triggers.v1.InvokeFunctionWithRetry
	8,  // 47: yandex.cloud.serverless.triggers.v1.Trigger.CloudLogs.invoke_container:type_name -> yandex.cloud.serverless.triggers.v1.InvokeContainerWithRetry
	29, // 48: yandex.cloud.serverless.triggers.v1.Trigger.Logging.levels:type_name -> yandex.cloud.logging.v1.LogLevel.Level
	12, // 49: yandex.cloud.serverless.triggers.v1.Trigger.Logging.batch_settings:type_name -> yandex.cloud.serverless.triggers.v1.LoggingBatchSettings
	6,  // 50: yandex.cloud.serverless.triggers.v1.Trigger.Logging.invoke_function:type_name -> yandex.cloud.serverless.triggers.v1.InvokeFunctionWithRetry
	8,  // 51: yandex.cloud.serverless.triggers.v1.Trigger.Logging.invoke_container:type_name -> yandex.cloud.serverless.triggers.v1.InvokeContainerWithRetry
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_yandex_cloud_serverless_triggers_v1_trigger_proto_init() }
func file_yandex_cloud_serverless_triggers_v1_trigger_proto_init() {
	if File_yandex_cloud_serverless_triggers_v1_trigger_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeFunctionOnce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeFunctionWithRetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeContainerOnce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeContainerWithRetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutQueueMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudLogsBatchSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingBatchSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillingBudget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataStreamBatchSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Timer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_MessageQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_IoTMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_ObjectStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_ContainerRegistry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_CloudLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Logging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*BillingBudget_InvokeFunction)(nil),
		(*BillingBudget_InvokeContainer)(nil),
	}
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*DataStream_InvokeFunction)(nil),
		(*DataStream_InvokeContainer)(nil),
	}
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Mail_InvokeFunction)(nil),
		(*Mail_InvokeContainer)(nil),
	}
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Trigger_Rule_Timer)(nil),
		(*Trigger_Rule_MessageQueue)(nil),
		(*Trigger_Rule_IotMessage)(nil),
		(*Trigger_Rule_ObjectStorage)(nil),
		(*Trigger_Rule_ContainerRegistry)(nil),
		(*Trigger_Rule_CloudLogs)(nil),
		(*Trigger_Rule_Logging)(nil),
		(*Trigger_Rule_BillingBudget)(nil),
		(*Trigger_Rule_DataStream)(nil),
		(*Trigger_Rule_Mail)(nil),
	}
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Trigger_Timer_InvokeFunction)(nil),
		(*Trigger_Timer_InvokeFunctionWithRetry)(nil),
		(*Trigger_Timer_InvokeContainerWithRetry)(nil),
	}
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Trigger_MessageQueue_InvokeFunction)(nil),
		(*Trigger_MessageQueue_InvokeContainer)(nil),
	}
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Trigger_IoTMessage_InvokeFunction)(nil),
		(*Trigger_IoTMessage_InvokeContainer)(nil),
	}
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Trigger_ObjectStorage_InvokeFunction)(nil),
		(*Trigger_ObjectStorage_InvokeContainer)(nil),
	}
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Trigger_ContainerRegistry_InvokeFunction)(nil),
		(*Trigger_ContainerRegistry_InvokeContainer)(nil),
	}
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*Trigger_CloudLogs_InvokeFunction)(nil),
		(*Trigger_CloudLogs_InvokeContainer)(nil),
	}
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Trigger_Logging_InvokeFunction)(nil),
		(*Trigger_Logging_InvokeContainer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_serverless_triggers_v1_trigger_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_serverless_triggers_v1_trigger_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_serverless_triggers_v1_trigger_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_serverless_triggers_v1_trigger_proto_msgTypes,
	}.Build()
	File_yandex_cloud_serverless_triggers_v1_trigger_proto = out.File
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_rawDesc = nil
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_goTypes = nil
	file_yandex_cloud_serverless_triggers_v1_trigger_proto_depIdxs = nil
}
