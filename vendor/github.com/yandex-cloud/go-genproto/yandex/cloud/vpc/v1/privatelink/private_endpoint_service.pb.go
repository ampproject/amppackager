// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/vpc/v1/privatelink/private_endpoint_service.proto

package privatelink

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPrivateEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the PrivateEndpoint resource to return.
	//
	// To get PrivateEndpoint resource ID make a [PrivateEndpointService.List]
	// request.
	PrivateEndpointId string `protobuf:"bytes,1,opt,name=private_endpoint_id,json=privateEndpointId,proto3" json:"private_endpoint_id,omitempty"`
}

func (x *GetPrivateEndpointRequest) Reset() {
	*x = GetPrivateEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivateEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateEndpointRequest) ProtoMessage() {}

func (x *GetPrivateEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivateEndpointRequest.ProtoReflect.Descriptor instead.
func (*GetPrivateEndpointRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetPrivateEndpointRequest) GetPrivateEndpointId() string {
	if x != nil {
		return x.PrivateEndpointId
	}
	return ""
}

type InternalIpv4AddressSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the subnet that address belongs to.
	SubnetId string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Value of address.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *InternalIpv4AddressSpec) Reset() {
	*x = InternalIpv4AddressSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalIpv4AddressSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalIpv4AddressSpec) ProtoMessage() {}

func (x *InternalIpv4AddressSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalIpv4AddressSpec.ProtoReflect.Descriptor instead.
func (*InternalIpv4AddressSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{1}
}

func (x *InternalIpv4AddressSpec) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *InternalIpv4AddressSpec) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type AddressSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Address:
	//
	//	*AddressSpec_AddressId
	//	*AddressSpec_InternalIpv4AddressSpec
	Address isAddressSpec_Address `protobuf_oneof:"address"`
}

func (x *AddressSpec) Reset() {
	*x = AddressSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressSpec) ProtoMessage() {}

func (x *AddressSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressSpec.ProtoReflect.Descriptor instead.
func (*AddressSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{2}
}

func (m *AddressSpec) GetAddress() isAddressSpec_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (x *AddressSpec) GetAddressId() string {
	if x, ok := x.GetAddress().(*AddressSpec_AddressId); ok {
		return x.AddressId
	}
	return ""
}

func (x *AddressSpec) GetInternalIpv4AddressSpec() *InternalIpv4AddressSpec {
	if x, ok := x.GetAddress().(*AddressSpec_InternalIpv4AddressSpec); ok {
		return x.InternalIpv4AddressSpec
	}
	return nil
}

type isAddressSpec_Address interface {
	isAddressSpec_Address()
}

type AddressSpec_AddressId struct {
	// ID of IP address to associate with private endpoint.
	AddressId string `protobuf:"bytes,1,opt,name=address_id,json=addressId,proto3,oneof"`
}

type AddressSpec_InternalIpv4AddressSpec struct {
	// Internal ipv4 address specification.
	InternalIpv4AddressSpec *InternalIpv4AddressSpec `protobuf:"bytes,2,opt,name=internal_ipv4_address_spec,json=internalIpv4AddressSpec,proto3,oneof"`
}

func (*AddressSpec_AddressId) isAddressSpec_Address() {}

func (*AddressSpec_InternalIpv4AddressSpec) isAddressSpec_Address() {}

type CreatePrivateEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the folder to create a private endpoint in.
	//
	// To get a folder ID make a
	// [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the private endpoint.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the private endpoint.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Private endpoint labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of the network to create a private endpoint in.
	NetworkId string `protobuf:"bytes,5,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Private endpoint address specification.
	AddressSpec *AddressSpec `protobuf:"bytes,6,opt,name=address_spec,json=addressSpec,proto3" json:"address_spec,omitempty"`
	// Private endpoint dns options.
	DnsOptions *PrivateEndpoint_DnsOptions `protobuf:"bytes,8,opt,name=dns_options,json=dnsOptions,proto3" json:"dns_options,omitempty"`
	// Service to connect with via private endpoint.
	//
	// Types that are assignable to Service:
	//
	//	*CreatePrivateEndpointRequest_ObjectStorage
	Service isCreatePrivateEndpointRequest_Service `protobuf_oneof:"service"`
}

func (x *CreatePrivateEndpointRequest) Reset() {
	*x = CreatePrivateEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrivateEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrivateEndpointRequest) ProtoMessage() {}

func (x *CreatePrivateEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrivateEndpointRequest.ProtoReflect.Descriptor instead.
func (*CreatePrivateEndpointRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePrivateEndpointRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreatePrivateEndpointRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePrivateEndpointRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePrivateEndpointRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreatePrivateEndpointRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CreatePrivateEndpointRequest) GetAddressSpec() *AddressSpec {
	if x != nil {
		return x.AddressSpec
	}
	return nil
}

func (x *CreatePrivateEndpointRequest) GetDnsOptions() *PrivateEndpoint_DnsOptions {
	if x != nil {
		return x.DnsOptions
	}
	return nil
}

func (m *CreatePrivateEndpointRequest) GetService() isCreatePrivateEndpointRequest_Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (x *CreatePrivateEndpointRequest) GetObjectStorage() *PrivateEndpoint_ObjectStorage {
	if x, ok := x.GetService().(*CreatePrivateEndpointRequest_ObjectStorage); ok {
		return x.ObjectStorage
	}
	return nil
}

type isCreatePrivateEndpointRequest_Service interface {
	isCreatePrivateEndpointRequest_Service()
}

type CreatePrivateEndpointRequest_ObjectStorage struct {
	// Yandex Cloud Object Storage.
	ObjectStorage *PrivateEndpoint_ObjectStorage `protobuf:"bytes,9,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

func (*CreatePrivateEndpointRequest_ObjectStorage) isCreatePrivateEndpointRequest_Service() {}

type CreatePrivateEndpointMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the private endpoint that is being created.
	PrivateEndpointId string `protobuf:"bytes,1,opt,name=private_endpoint_id,json=privateEndpointId,proto3" json:"private_endpoint_id,omitempty"`
}

func (x *CreatePrivateEndpointMetadata) Reset() {
	*x = CreatePrivateEndpointMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrivateEndpointMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrivateEndpointMetadata) ProtoMessage() {}

func (x *CreatePrivateEndpointMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrivateEndpointMetadata.ProtoReflect.Descriptor instead.
func (*CreatePrivateEndpointMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePrivateEndpointMetadata) GetPrivateEndpointId() string {
	if x != nil {
		return x.PrivateEndpointId
	}
	return ""
}

type UpdatePrivateEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the private endpoint to update.
	//
	// To get the private endpoint ID make a [PrivateEndpointService.List]
	// request.
	PrivateEndpointId string `protobuf:"bytes,1,opt,name=private_endpoint_id,json=privateEndpointId,proto3" json:"private_endpoint_id,omitempty"`
	// Field mask that specifies which attributes of the PrivateEndpoint should be
	// updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New name for the private endpoint.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// New description of the private endpoint.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Private endpoint labels as `key:value` pairs.
	//
	// Existing set of labels is completely replaced by the provided set, so if
	// you just want to add or remove a label:
	// 1. Get the current set of labels with a [PrivateEndpointService.Get]
	// request.
	// 2. Add or remove a label in this set.
	// 3. Send the new set in this field.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Private endpoint address specification.
	AddressSpec *AddressSpec `protobuf:"bytes,6,opt,name=address_spec,json=addressSpec,proto3" json:"address_spec,omitempty"`
	// Private endpoint dns options.
	DnsOptions *PrivateEndpoint_DnsOptions `protobuf:"bytes,8,opt,name=dns_options,json=dnsOptions,proto3" json:"dns_options,omitempty"`
}

func (x *UpdatePrivateEndpointRequest) Reset() {
	*x = UpdatePrivateEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrivateEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrivateEndpointRequest) ProtoMessage() {}

func (x *UpdatePrivateEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrivateEndpointRequest.ProtoReflect.Descriptor instead.
func (*UpdatePrivateEndpointRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdatePrivateEndpointRequest) GetPrivateEndpointId() string {
	if x != nil {
		return x.PrivateEndpointId
	}
	return ""
}

func (x *UpdatePrivateEndpointRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdatePrivateEndpointRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePrivateEndpointRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdatePrivateEndpointRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdatePrivateEndpointRequest) GetAddressSpec() *AddressSpec {
	if x != nil {
		return x.AddressSpec
	}
	return nil
}

func (x *UpdatePrivateEndpointRequest) GetDnsOptions() *PrivateEndpoint_DnsOptions {
	if x != nil {
		return x.DnsOptions
	}
	return nil
}

type UpdatePrivateEndpointMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the private endpoint that is being updated.
	PrivateEndpointId string `protobuf:"bytes,1,opt,name=private_endpoint_id,json=privateEndpointId,proto3" json:"private_endpoint_id,omitempty"`
}

func (x *UpdatePrivateEndpointMetadata) Reset() {
	*x = UpdatePrivateEndpointMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrivateEndpointMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrivateEndpointMetadata) ProtoMessage() {}

func (x *UpdatePrivateEndpointMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrivateEndpointMetadata.ProtoReflect.Descriptor instead.
func (*UpdatePrivateEndpointMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePrivateEndpointMetadata) GetPrivateEndpointId() string {
	if x != nil {
		return x.PrivateEndpointId
	}
	return ""
}

type DeletePrivateEndpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the private endpoint to delete.
	//
	// To get a private endpoint ID make a [PrivateEndpointService.List] request.
	PrivateEndpointId string `protobuf:"bytes,1,opt,name=private_endpoint_id,json=privateEndpointId,proto3" json:"private_endpoint_id,omitempty"`
}

func (x *DeletePrivateEndpointRequest) Reset() {
	*x = DeletePrivateEndpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePrivateEndpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePrivateEndpointRequest) ProtoMessage() {}

func (x *DeletePrivateEndpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePrivateEndpointRequest.ProtoReflect.Descriptor instead.
func (*DeletePrivateEndpointRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeletePrivateEndpointRequest) GetPrivateEndpointId() string {
	if x != nil {
		return x.PrivateEndpointId
	}
	return ""
}

type DeletePrivateEndpointMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the private endpoint that is being deleted.
	PrivateEndpointId string `protobuf:"bytes,1,opt,name=private_endpoint_id,json=privateEndpointId,proto3" json:"private_endpoint_id,omitempty"`
}

func (x *DeletePrivateEndpointMetadata) Reset() {
	*x = DeletePrivateEndpointMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePrivateEndpointMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePrivateEndpointMetadata) ProtoMessage() {}

func (x *DeletePrivateEndpointMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePrivateEndpointMetadata.ProtoReflect.Descriptor instead.
func (*DeletePrivateEndpointMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePrivateEndpointMetadata) GetPrivateEndpointId() string {
	if x != nil {
		return x.PrivateEndpointId
	}
	return ""
}

type ListPrivateEndpointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Container:
	//
	//	*ListPrivateEndpointsRequest_FolderId
	Container isListPrivateEndpointsRequest_Container `protobuf_oneof:"container"`
	// The maximum number of results per page to return. If the number of
	// available results is larger than `page_size`, the service returns a
	// [ListPrivateEndpointsResponse.next_page_token] that can be used to get the
	// next page of results in subsequent list requests. Default value: 100.
	PageSize int64 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListPrivateEndpointsResponse.next_page_token] returned by a previous list
	// request.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters PrivateEndpoint listed in the response.
	//
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on
	// [PrivateEndpoint.name] field.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 3-63 characters long and match
	// the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`. Example of a filter:
	// `name=my-private-endpoint`.
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListPrivateEndpointsRequest) Reset() {
	*x = ListPrivateEndpointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPrivateEndpointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPrivateEndpointsRequest) ProtoMessage() {}

func (x *ListPrivateEndpointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPrivateEndpointsRequest.ProtoReflect.Descriptor instead.
func (*ListPrivateEndpointsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{9}
}

func (m *ListPrivateEndpointsRequest) GetContainer() isListPrivateEndpointsRequest_Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (x *ListPrivateEndpointsRequest) GetFolderId() string {
	if x, ok := x.GetContainer().(*ListPrivateEndpointsRequest_FolderId); ok {
		return x.FolderId
	}
	return ""
}

func (x *ListPrivateEndpointsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPrivateEndpointsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListPrivateEndpointsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type isListPrivateEndpointsRequest_Container interface {
	isListPrivateEndpointsRequest_Container()
}

type ListPrivateEndpointsRequest_FolderId struct {
	// ID of the folder to list private endpoints in.
	//
	// To get the folder ID use a
	// [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3,oneof"`
}

func (*ListPrivateEndpointsRequest_FolderId) isListPrivateEndpointsRequest_Container() {}

type ListPrivateEndpointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of private endpoints.
	PrivateEndpoints []*PrivateEndpoint `protobuf:"bytes,1,rep,name=private_endpoints,json=privateEndpoints,proto3" json:"private_endpoints,omitempty"`
	// Token for getting the next page of the list. If the number of results is
	// greater than the specified [ListPrivateEndpointsRequest.page_size], use
	// `next_page_token` as the value for the
	// [ListPrivateEndpointsRequest.page_token] parameter in the next list
	// request.
	//
	// Each subsequent page will have its own `next_page_token` to continue paging
	// through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPrivateEndpointsResponse) Reset() {
	*x = ListPrivateEndpointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPrivateEndpointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPrivateEndpointsResponse) ProtoMessage() {}

func (x *ListPrivateEndpointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPrivateEndpointsResponse.ProtoReflect.Descriptor instead.
func (*ListPrivateEndpointsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListPrivateEndpointsResponse) GetPrivateEndpoints() []*PrivateEndpoint {
	if x != nil {
		return x.PrivateEndpoints
	}
	return nil
}

func (x *ListPrivateEndpointsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListPrivateEndpointOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the private endpoint to list operations for.
	//
	// To get a private endpoint ID make a [PrivateEndpointService.List] request.
	PrivateEndpointId string `protobuf:"bytes,1,opt,name=private_endpoint_id,json=privateEndpointId,proto3" json:"private_endpoint_id,omitempty"`
	// The maximum number of results per page to return. If the number of
	// available results is larger than [page_size], the service returns a
	// [ListPrivateEndpointOperationsResponse.next_page_token] that can be used to
	// get the next page of results in subsequent list requests. Default value:
	// 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListPrivateEndpointOperationsResponse.next_page_token] returned by a
	// previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListPrivateEndpointOperationsRequest) Reset() {
	*x = ListPrivateEndpointOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPrivateEndpointOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPrivateEndpointOperationsRequest) ProtoMessage() {}

func (x *ListPrivateEndpointOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPrivateEndpointOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListPrivateEndpointOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListPrivateEndpointOperationsRequest) GetPrivateEndpointId() string {
	if x != nil {
		return x.PrivateEndpointId
	}
	return ""
}

func (x *ListPrivateEndpointOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPrivateEndpointOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListPrivateEndpointOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of operations for the specified private endpoint.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// Token for getting the next page of the list. If the number of results is
	// greater than the specified
	// [ListPrivateEndpointOperationsRequest.page_size], use `next_page_token` as
	// the value for the [ListPrivateEndpointOperationsRequest.page_token]
	// parameter in the next list request.
	//
	// Each subsequent page will have its own `next_page_token` to continue paging
	// through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPrivateEndpointOperationsResponse) Reset() {
	*x = ListPrivateEndpointOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPrivateEndpointOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPrivateEndpointOperationsResponse) ProtoMessage() {}

func (x *ListPrivateEndpointOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPrivateEndpointOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListPrivateEndpointOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListPrivateEndpointOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListPrivateEndpointOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76,
	0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e,
	0x6b, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e,
	0x6b, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x59, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7,
	0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a,
	0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31,
	0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb2, 0x01,
	0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a,
	0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x77,
	0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x76,
	0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x17,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xf0, 0x05, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04,
	0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xf2, 0xc7,
	0x31, 0x20, 0x7c, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x29, 0x3f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a,
	0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa6, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x43, 0xf2, 0xc7, 0x31, 0x0f, 0x5b, 0x2d, 0x5f, 0x2e, 0x2f, 0x5c, 0x40, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x8a, 0xc8,
	0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x1c, 0x12, 0x14, 0x5b, 0x61, 0x2d, 0x7a,
	0x5d, 0x5b, 0x2d, 0x5f, 0x2e, 0x2f, 0x5c, 0x40, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a,
	0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2b,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0c, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5c, 0x0a, 0x0b,
	0x64, 0x6e, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x44, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a,
	0x64, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x0e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x4f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x99, 0x05, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xf2, 0xc7, 0x31, 0x20, 0x7c, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x2d, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa6, 0x01, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x43, 0xf2, 0xc7, 0x31, 0x0f, 0x5b, 0x2d, 0x5f, 0x2e, 0x2f,
	0x5c, 0x40, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x36, 0x34, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x1c, 0x12, 0x14,
	0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x2e, 0x2f, 0x5c, 0x40, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x5c, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x6e, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x22, 0x4f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x11,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x4f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a,
	0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d,
	0x31, 0x30, 0x30, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xa5, 0x01, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01,
	0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a,
	0xfa, 0xc7, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d,
	0x31, 0x30, 0x30, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x92, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xaa, 0x09, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xa4, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f,
	0x76, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0xb2, 0xd2, 0x2a, 0x30, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xd2, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x66, 0xb2, 0xd2, 0x2a, 0x30, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a,
	0x01, 0x2a, 0x32, 0x27, 0x2f, 0x76, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xd5, 0x01, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0xb2, 0xd2, 0x2a, 0x36, 0x0a, 0x1d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f, 0x76, 0x70, 0x63,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xdb, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f,
	0x76, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x76, 0x0a, 0x23, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x70, 0x63, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x3b, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescData = file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDesc
)

func file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescData)
	})
	return file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDescData
}

var file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_goTypes = []interface{}{
	(*GetPrivateEndpointRequest)(nil),             // 0: yandex.cloud.vpc.v1.privatelink.GetPrivateEndpointRequest
	(*InternalIpv4AddressSpec)(nil),               // 1: yandex.cloud.vpc.v1.privatelink.InternalIpv4AddressSpec
	(*AddressSpec)(nil),                           // 2: yandex.cloud.vpc.v1.privatelink.AddressSpec
	(*CreatePrivateEndpointRequest)(nil),          // 3: yandex.cloud.vpc.v1.privatelink.CreatePrivateEndpointRequest
	(*CreatePrivateEndpointMetadata)(nil),         // 4: yandex.cloud.vpc.v1.privatelink.CreatePrivateEndpointMetadata
	(*UpdatePrivateEndpointRequest)(nil),          // 5: yandex.cloud.vpc.v1.privatelink.UpdatePrivateEndpointRequest
	(*UpdatePrivateEndpointMetadata)(nil),         // 6: yandex.cloud.vpc.v1.privatelink.UpdatePrivateEndpointMetadata
	(*DeletePrivateEndpointRequest)(nil),          // 7: yandex.cloud.vpc.v1.privatelink.DeletePrivateEndpointRequest
	(*DeletePrivateEndpointMetadata)(nil),         // 8: yandex.cloud.vpc.v1.privatelink.DeletePrivateEndpointMetadata
	(*ListPrivateEndpointsRequest)(nil),           // 9: yandex.cloud.vpc.v1.privatelink.ListPrivateEndpointsRequest
	(*ListPrivateEndpointsResponse)(nil),          // 10: yandex.cloud.vpc.v1.privatelink.ListPrivateEndpointsResponse
	(*ListPrivateEndpointOperationsRequest)(nil),  // 11: yandex.cloud.vpc.v1.privatelink.ListPrivateEndpointOperationsRequest
	(*ListPrivateEndpointOperationsResponse)(nil), // 12: yandex.cloud.vpc.v1.privatelink.ListPrivateEndpointOperationsResponse
	nil,                                   // 13: yandex.cloud.vpc.v1.privatelink.CreatePrivateEndpointRequest.LabelsEntry
	nil,                                   // 14: yandex.cloud.vpc.v1.privatelink.UpdatePrivateEndpointRequest.LabelsEntry
	(*PrivateEndpoint_DnsOptions)(nil),    // 15: yandex.cloud.vpc.v1.privatelink.PrivateEndpoint.DnsOptions
	(*PrivateEndpoint_ObjectStorage)(nil), // 16: yandex.cloud.vpc.v1.privatelink.PrivateEndpoint.ObjectStorage
	(*fieldmaskpb.FieldMask)(nil),         // 17: google.protobuf.FieldMask
	(*PrivateEndpoint)(nil),               // 18: yandex.cloud.vpc.v1.privatelink.PrivateEndpoint
	(*operation.Operation)(nil),           // 19: yandex.cloud.operation.Operation
}
var file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_depIdxs = []int32{
	1,  // 0: yandex.cloud.vpc.v1.privatelink.AddressSpec.internal_ipv4_address_spec:type_name -> yandex.cloud.vpc.v1.privatelink.InternalIpv4AddressSpec
	13, // 1: yandex.cloud.vpc.v1.privatelink.CreatePrivateEndpointRequest.labels:type_name -> yandex.cloud.vpc.v1.privatelink.CreatePrivateEndpointRequest.LabelsEntry
	2,  // 2: yandex.cloud.vpc.v1.privatelink.CreatePrivateEndpointRequest.address_spec:type_name -> yandex.cloud.vpc.v1.privatelink.AddressSpec
	15, // 3: yandex.cloud.vpc.v1.privatelink.CreatePrivateEndpointRequest.dns_options:type_name -> yandex.cloud.vpc.v1.privatelink.PrivateEndpoint.DnsOptions
	16, // 4: yandex.cloud.vpc.v1.privatelink.CreatePrivateEndpointRequest.object_storage:type_name -> yandex.cloud.vpc.v1.privatelink.PrivateEndpoint.ObjectStorage
	17, // 5: yandex.cloud.vpc.v1.privatelink.UpdatePrivateEndpointRequest.update_mask:type_name -> google.protobuf.FieldMask
	14, // 6: yandex.cloud.vpc.v1.privatelink.UpdatePrivateEndpointRequest.labels:type_name -> yandex.cloud.vpc.v1.privatelink.UpdatePrivateEndpointRequest.LabelsEntry
	2,  // 7: yandex.cloud.vpc.v1.privatelink.UpdatePrivateEndpointRequest.address_spec:type_name -> yandex.cloud.vpc.v1.privatelink.AddressSpec
	15, // 8: yandex.cloud.vpc.v1.privatelink.UpdatePrivateEndpointRequest.dns_options:type_name -> yandex.cloud.vpc.v1.privatelink.PrivateEndpoint.DnsOptions
	18, // 9: yandex.cloud.vpc.v1.privatelink.ListPrivateEndpointsResponse.private_endpoints:type_name -> yandex.cloud.vpc.v1.privatelink.PrivateEndpoint
	19, // 10: yandex.cloud.vpc.v1.privatelink.ListPrivateEndpointOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	0,  // 11: yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.Get:input_type -> yandex.cloud.vpc.v1.privatelink.GetPrivateEndpointRequest
	9,  // 12: yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.List:input_type -> yandex.cloud.vpc.v1.privatelink.ListPrivateEndpointsRequest
	3,  // 13: yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.Create:input_type -> yandex.cloud.vpc.v1.privatelink.CreatePrivateEndpointRequest
	5,  // 14: yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.Update:input_type -> yandex.cloud.vpc.v1.privatelink.UpdatePrivateEndpointRequest
	7,  // 15: yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.Delete:input_type -> yandex.cloud.vpc.v1.privatelink.DeletePrivateEndpointRequest
	11, // 16: yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.ListOperations:input_type -> yandex.cloud.vpc.v1.privatelink.ListPrivateEndpointOperationsRequest
	18, // 17: yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.Get:output_type -> yandex.cloud.vpc.v1.privatelink.PrivateEndpoint
	10, // 18: yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.List:output_type -> yandex.cloud.vpc.v1.privatelink.ListPrivateEndpointsResponse
	19, // 19: yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.Create:output_type -> yandex.cloud.operation.Operation
	19, // 20: yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.Update:output_type -> yandex.cloud.operation.Operation
	19, // 21: yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.Delete:output_type -> yandex.cloud.operation.Operation
	12, // 22: yandex.cloud.vpc.v1.privatelink.PrivateEndpointService.ListOperations:output_type -> yandex.cloud.vpc.v1.privatelink.ListPrivateEndpointOperationsResponse
	17, // [17:23] is the sub-list for method output_type
	11, // [11:17] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_init() }
func file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_init() {
	if File_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto != nil {
		return
	}
	file_yandex_cloud_vpc_v1_privatelink_private_endpoint_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrivateEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalIpv4AddressSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePrivateEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePrivateEndpointMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePrivateEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePrivateEndpointMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePrivateEndpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePrivateEndpointMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPrivateEndpointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPrivateEndpointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPrivateEndpointOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPrivateEndpointOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AddressSpec_AddressId)(nil),
		(*AddressSpec_InternalIpv4AddressSpec)(nil),
	}
	file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CreatePrivateEndpointRequest_ObjectStorage)(nil),
	}
	file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ListPrivateEndpointsRequest_FolderId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto = out.File
	file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_rawDesc = nil
	file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_goTypes = nil
	file_yandex_cloud_vpc_v1_privatelink_private_endpoint_service_proto_depIdxs = nil
}
