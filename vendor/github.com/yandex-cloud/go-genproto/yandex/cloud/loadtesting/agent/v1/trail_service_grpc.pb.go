// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: yandex/cloud/loadtesting/agent/v1/trail_service.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TrailService_Create_FullMethodName = "/yandex.cloud.loadtesting.agent.v1.TrailService/Create"
)

// TrailServiceClient is the client API for TrailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrailServiceClient interface {
	// Creates trail for specified job.
	Create(ctx context.Context, in *CreateTrailRequest, opts ...grpc.CallOption) (*CreateTrailResponse, error)
}

type trailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrailServiceClient(cc grpc.ClientConnInterface) TrailServiceClient {
	return &trailServiceClient{cc}
}

func (c *trailServiceClient) Create(ctx context.Context, in *CreateTrailRequest, opts ...grpc.CallOption) (*CreateTrailResponse, error) {
	out := new(CreateTrailResponse)
	err := c.cc.Invoke(ctx, TrailService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrailServiceServer is the server API for TrailService service.
// All implementations should embed UnimplementedTrailServiceServer
// for forward compatibility
type TrailServiceServer interface {
	// Creates trail for specified job.
	Create(context.Context, *CreateTrailRequest) (*CreateTrailResponse, error)
}

// UnimplementedTrailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTrailServiceServer struct {
}

func (UnimplementedTrailServiceServer) Create(context.Context, *CreateTrailRequest) (*CreateTrailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

// UnsafeTrailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrailServiceServer will
// result in compilation errors.
type UnsafeTrailServiceServer interface {
	mustEmbedUnimplementedTrailServiceServer()
}

func RegisterTrailServiceServer(s grpc.ServiceRegistrar, srv TrailServiceServer) {
	s.RegisterService(&TrailService_ServiceDesc, srv)
}

func _TrailService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrailServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrailService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrailServiceServer).Create(ctx, req.(*CreateTrailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrailService_ServiceDesc is the grpc.ServiceDesc for TrailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.loadtesting.agent.v1.TrailService",
	HandlerType: (*TrailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TrailService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/loadtesting/agent/v1/trail_service.proto",
}
