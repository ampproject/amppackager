// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: yandex/cloud/loadtesting/agent/v1/agent_service.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentService_ClaimStatus_FullMethodName     = "/yandex.cloud.loadtesting.agent.v1.AgentService/ClaimStatus"
	AgentService_ReportEventLogs_FullMethodName = "/yandex.cloud.loadtesting.agent.v1.AgentService/ReportEventLogs"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	// Claims status for the specified agent.
	ClaimStatus(ctx context.Context, in *ClaimAgentStatusRequest, opts ...grpc.CallOption) (*ClaimAgentStatusResponse, error)
	ReportEventLogs(ctx context.Context, in *ReportEventLogsRequest, opts ...grpc.CallOption) (*ReportEventLogsResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) ClaimStatus(ctx context.Context, in *ClaimAgentStatusRequest, opts ...grpc.CallOption) (*ClaimAgentStatusResponse, error) {
	out := new(ClaimAgentStatusResponse)
	err := c.cc.Invoke(ctx, AgentService_ClaimStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ReportEventLogs(ctx context.Context, in *ReportEventLogsRequest, opts ...grpc.CallOption) (*ReportEventLogsResponse, error) {
	out := new(ReportEventLogsResponse)
	err := c.cc.Invoke(ctx, AgentService_ReportEventLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations should embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	// Claims status for the specified agent.
	ClaimStatus(context.Context, *ClaimAgentStatusRequest) (*ClaimAgentStatusResponse, error)
	ReportEventLogs(context.Context, *ReportEventLogsRequest) (*ReportEventLogsResponse, error)
}

// UnimplementedAgentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) ClaimStatus(context.Context, *ClaimAgentStatusRequest) (*ClaimAgentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimStatus not implemented")
}
func (UnimplementedAgentServiceServer) ReportEventLogs(context.Context, *ReportEventLogsRequest) (*ReportEventLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportEventLogs not implemented")
}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_ClaimStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimAgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ClaimStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ClaimStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ClaimStatus(ctx, req.(*ClaimAgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ReportEventLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportEventLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ReportEventLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ReportEventLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ReportEventLogs(ctx, req.(*ReportEventLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.loadtesting.agent.v1.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimStatus",
			Handler:    _AgentService_ClaimStatus_Handler,
		},
		{
			MethodName: "ReportEventLogs",
			Handler:    _AgentService_ReportEventLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/loadtesting/agent/v1/agent_service.proto",
}
