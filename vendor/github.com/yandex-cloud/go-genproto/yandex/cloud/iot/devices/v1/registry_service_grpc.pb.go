// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: yandex/cloud/iot/devices/v1/registry_service.proto

package devices

import (
	context "context"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegistryService_Get_FullMethodName                    = "/yandex.cloud.iot.devices.v1.RegistryService/Get"
	RegistryService_GetByName_FullMethodName              = "/yandex.cloud.iot.devices.v1.RegistryService/GetByName"
	RegistryService_List_FullMethodName                   = "/yandex.cloud.iot.devices.v1.RegistryService/List"
	RegistryService_Create_FullMethodName                 = "/yandex.cloud.iot.devices.v1.RegistryService/Create"
	RegistryService_Update_FullMethodName                 = "/yandex.cloud.iot.devices.v1.RegistryService/Update"
	RegistryService_Delete_FullMethodName                 = "/yandex.cloud.iot.devices.v1.RegistryService/Delete"
	RegistryService_ListCertificates_FullMethodName       = "/yandex.cloud.iot.devices.v1.RegistryService/ListCertificates"
	RegistryService_AddCertificate_FullMethodName         = "/yandex.cloud.iot.devices.v1.RegistryService/AddCertificate"
	RegistryService_DeleteCertificate_FullMethodName      = "/yandex.cloud.iot.devices.v1.RegistryService/DeleteCertificate"
	RegistryService_ListPasswords_FullMethodName          = "/yandex.cloud.iot.devices.v1.RegistryService/ListPasswords"
	RegistryService_AddPassword_FullMethodName            = "/yandex.cloud.iot.devices.v1.RegistryService/AddPassword"
	RegistryService_DeletePassword_FullMethodName         = "/yandex.cloud.iot.devices.v1.RegistryService/DeletePassword"
	RegistryService_ListDeviceTopicAliases_FullMethodName = "/yandex.cloud.iot.devices.v1.RegistryService/ListDeviceTopicAliases"
	RegistryService_ListDataStreamExports_FullMethodName  = "/yandex.cloud.iot.devices.v1.RegistryService/ListDataStreamExports"
	RegistryService_AddDataStreamExport_FullMethodName    = "/yandex.cloud.iot.devices.v1.RegistryService/AddDataStreamExport"
	RegistryService_DeleteDataStreamExport_FullMethodName = "/yandex.cloud.iot.devices.v1.RegistryService/DeleteDataStreamExport"
	RegistryService_ListOperations_FullMethodName         = "/yandex.cloud.iot.devices.v1.RegistryService/ListOperations"
	RegistryService_Disable_FullMethodName                = "/yandex.cloud.iot.devices.v1.RegistryService/Disable"
	RegistryService_Enable_FullMethodName                 = "/yandex.cloud.iot.devices.v1.RegistryService/Enable"
)

// RegistryServiceClient is the client API for RegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryServiceClient interface {
	// Returns the specified registry.
	//
	// To get the list of available registries, make a [List] request.
	Get(ctx context.Context, in *GetRegistryRequest, opts ...grpc.CallOption) (*Registry, error)
	GetByName(ctx context.Context, in *GetByNameRegistryRequest, opts ...grpc.CallOption) (*Registry, error)
	// Retrieves the list of registries in the specified folder.
	List(ctx context.Context, in *ListRegistriesRequest, opts ...grpc.CallOption) (*ListRegistriesResponse, error)
	// Creates a registry in the specified folder.
	Create(ctx context.Context, in *CreateRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates the specified registry.
	Update(ctx context.Context, in *UpdateRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified registry.
	Delete(ctx context.Context, in *DeleteRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Retrieves the list of registry certificates for the specified registry.
	ListCertificates(ctx context.Context, in *ListRegistryCertificatesRequest, opts ...grpc.CallOption) (*ListRegistryCertificatesResponse, error)
	// Adds a certificate.
	AddCertificate(ctx context.Context, in *AddRegistryCertificateRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified registry certificate.
	DeleteCertificate(ctx context.Context, in *DeleteRegistryCertificateRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Retrieves the list of passwords for the specified registry.
	ListPasswords(ctx context.Context, in *ListRegistryPasswordsRequest, opts ...grpc.CallOption) (*ListRegistryPasswordsResponse, error)
	// Adds password for the specified registry.
	AddPassword(ctx context.Context, in *AddRegistryPasswordRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified password.
	DeletePassword(ctx context.Context, in *DeleteRegistryPasswordRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Retrieves the list of device topic aliases for the specified registry.
	ListDeviceTopicAliases(ctx context.Context, in *ListDeviceTopicAliasesRequest, opts ...grpc.CallOption) (*ListDeviceTopicAliasesResponse, error)
	// Retrieves the list of YDS exports for the specified registry.
	ListDataStreamExports(ctx context.Context, in *ListDataStreamExportsRequest, opts ...grpc.CallOption) (*ListDataStreamExportsResponse, error)
	// Adds YDS export for the specified registry.
	AddDataStreamExport(ctx context.Context, in *AddDataStreamExportRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified YDS export.
	DeleteDataStreamExport(ctx context.Context, in *DeleteDataStreamExportRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Lists operations for the specified registry.
	ListOperations(ctx context.Context, in *ListRegistryOperationsRequest, opts ...grpc.CallOption) (*ListRegistryOperationsResponse, error)
	// Disables the specified registry.
	Disable(ctx context.Context, in *DisableRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Enables the specified registry.
	Enable(ctx context.Context, in *EnableRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type registryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryServiceClient(cc grpc.ClientConnInterface) RegistryServiceClient {
	return &registryServiceClient{cc}
}

func (c *registryServiceClient) Get(ctx context.Context, in *GetRegistryRequest, opts ...grpc.CallOption) (*Registry, error) {
	out := new(Registry)
	err := c.cc.Invoke(ctx, RegistryService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetByName(ctx context.Context, in *GetByNameRegistryRequest, opts ...grpc.CallOption) (*Registry, error) {
	out := new(Registry)
	err := c.cc.Invoke(ctx, RegistryService_GetByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) List(ctx context.Context, in *ListRegistriesRequest, opts ...grpc.CallOption) (*ListRegistriesResponse, error) {
	out := new(ListRegistriesResponse)
	err := c.cc.Invoke(ctx, RegistryService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) Create(ctx context.Context, in *CreateRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, RegistryService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) Update(ctx context.Context, in *UpdateRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, RegistryService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) Delete(ctx context.Context, in *DeleteRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, RegistryService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ListCertificates(ctx context.Context, in *ListRegistryCertificatesRequest, opts ...grpc.CallOption) (*ListRegistryCertificatesResponse, error) {
	out := new(ListRegistryCertificatesResponse)
	err := c.cc.Invoke(ctx, RegistryService_ListCertificates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) AddCertificate(ctx context.Context, in *AddRegistryCertificateRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, RegistryService_AddCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) DeleteCertificate(ctx context.Context, in *DeleteRegistryCertificateRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, RegistryService_DeleteCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ListPasswords(ctx context.Context, in *ListRegistryPasswordsRequest, opts ...grpc.CallOption) (*ListRegistryPasswordsResponse, error) {
	out := new(ListRegistryPasswordsResponse)
	err := c.cc.Invoke(ctx, RegistryService_ListPasswords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) AddPassword(ctx context.Context, in *AddRegistryPasswordRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, RegistryService_AddPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) DeletePassword(ctx context.Context, in *DeleteRegistryPasswordRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, RegistryService_DeletePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ListDeviceTopicAliases(ctx context.Context, in *ListDeviceTopicAliasesRequest, opts ...grpc.CallOption) (*ListDeviceTopicAliasesResponse, error) {
	out := new(ListDeviceTopicAliasesResponse)
	err := c.cc.Invoke(ctx, RegistryService_ListDeviceTopicAliases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ListDataStreamExports(ctx context.Context, in *ListDataStreamExportsRequest, opts ...grpc.CallOption) (*ListDataStreamExportsResponse, error) {
	out := new(ListDataStreamExportsResponse)
	err := c.cc.Invoke(ctx, RegistryService_ListDataStreamExports_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) AddDataStreamExport(ctx context.Context, in *AddDataStreamExportRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, RegistryService_AddDataStreamExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) DeleteDataStreamExport(ctx context.Context, in *DeleteDataStreamExportRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, RegistryService_DeleteDataStreamExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) ListOperations(ctx context.Context, in *ListRegistryOperationsRequest, opts ...grpc.CallOption) (*ListRegistryOperationsResponse, error) {
	out := new(ListRegistryOperationsResponse)
	err := c.cc.Invoke(ctx, RegistryService_ListOperations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) Disable(ctx context.Context, in *DisableRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, RegistryService_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) Enable(ctx context.Context, in *EnableRegistryRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, RegistryService_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServiceServer is the server API for RegistryService service.
// All implementations should embed UnimplementedRegistryServiceServer
// for forward compatibility
type RegistryServiceServer interface {
	// Returns the specified registry.
	//
	// To get the list of available registries, make a [List] request.
	Get(context.Context, *GetRegistryRequest) (*Registry, error)
	GetByName(context.Context, *GetByNameRegistryRequest) (*Registry, error)
	// Retrieves the list of registries in the specified folder.
	List(context.Context, *ListRegistriesRequest) (*ListRegistriesResponse, error)
	// Creates a registry in the specified folder.
	Create(context.Context, *CreateRegistryRequest) (*operation.Operation, error)
	// Updates the specified registry.
	Update(context.Context, *UpdateRegistryRequest) (*operation.Operation, error)
	// Deletes the specified registry.
	Delete(context.Context, *DeleteRegistryRequest) (*operation.Operation, error)
	// Retrieves the list of registry certificates for the specified registry.
	ListCertificates(context.Context, *ListRegistryCertificatesRequest) (*ListRegistryCertificatesResponse, error)
	// Adds a certificate.
	AddCertificate(context.Context, *AddRegistryCertificateRequest) (*operation.Operation, error)
	// Deletes the specified registry certificate.
	DeleteCertificate(context.Context, *DeleteRegistryCertificateRequest) (*operation.Operation, error)
	// Retrieves the list of passwords for the specified registry.
	ListPasswords(context.Context, *ListRegistryPasswordsRequest) (*ListRegistryPasswordsResponse, error)
	// Adds password for the specified registry.
	AddPassword(context.Context, *AddRegistryPasswordRequest) (*operation.Operation, error)
	// Deletes the specified password.
	DeletePassword(context.Context, *DeleteRegistryPasswordRequest) (*operation.Operation, error)
	// Retrieves the list of device topic aliases for the specified registry.
	ListDeviceTopicAliases(context.Context, *ListDeviceTopicAliasesRequest) (*ListDeviceTopicAliasesResponse, error)
	// Retrieves the list of YDS exports for the specified registry.
	ListDataStreamExports(context.Context, *ListDataStreamExportsRequest) (*ListDataStreamExportsResponse, error)
	// Adds YDS export for the specified registry.
	AddDataStreamExport(context.Context, *AddDataStreamExportRequest) (*operation.Operation, error)
	// Deletes the specified YDS export.
	DeleteDataStreamExport(context.Context, *DeleteDataStreamExportRequest) (*operation.Operation, error)
	// Lists operations for the specified registry.
	ListOperations(context.Context, *ListRegistryOperationsRequest) (*ListRegistryOperationsResponse, error)
	// Disables the specified registry.
	Disable(context.Context, *DisableRegistryRequest) (*operation.Operation, error)
	// Enables the specified registry.
	Enable(context.Context, *EnableRegistryRequest) (*operation.Operation, error)
}

// UnimplementedRegistryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRegistryServiceServer struct {
}

func (UnimplementedRegistryServiceServer) Get(context.Context, *GetRegistryRequest) (*Registry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRegistryServiceServer) GetByName(context.Context, *GetByNameRegistryRequest) (*Registry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedRegistryServiceServer) List(context.Context, *ListRegistriesRequest) (*ListRegistriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRegistryServiceServer) Create(context.Context, *CreateRegistryRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRegistryServiceServer) Update(context.Context, *UpdateRegistryRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRegistryServiceServer) Delete(context.Context, *DeleteRegistryRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRegistryServiceServer) ListCertificates(context.Context, *ListRegistryCertificatesRequest) (*ListRegistryCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificates not implemented")
}
func (UnimplementedRegistryServiceServer) AddCertificate(context.Context, *AddRegistryCertificateRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCertificate not implemented")
}
func (UnimplementedRegistryServiceServer) DeleteCertificate(context.Context, *DeleteRegistryCertificateRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCertificate not implemented")
}
func (UnimplementedRegistryServiceServer) ListPasswords(context.Context, *ListRegistryPasswordsRequest) (*ListRegistryPasswordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPasswords not implemented")
}
func (UnimplementedRegistryServiceServer) AddPassword(context.Context, *AddRegistryPasswordRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPassword not implemented")
}
func (UnimplementedRegistryServiceServer) DeletePassword(context.Context, *DeleteRegistryPasswordRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassword not implemented")
}
func (UnimplementedRegistryServiceServer) ListDeviceTopicAliases(context.Context, *ListDeviceTopicAliasesRequest) (*ListDeviceTopicAliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceTopicAliases not implemented")
}
func (UnimplementedRegistryServiceServer) ListDataStreamExports(context.Context, *ListDataStreamExportsRequest) (*ListDataStreamExportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataStreamExports not implemented")
}
func (UnimplementedRegistryServiceServer) AddDataStreamExport(context.Context, *AddDataStreamExportRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDataStreamExport not implemented")
}
func (UnimplementedRegistryServiceServer) DeleteDataStreamExport(context.Context, *DeleteDataStreamExportRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataStreamExport not implemented")
}
func (UnimplementedRegistryServiceServer) ListOperations(context.Context, *ListRegistryOperationsRequest) (*ListRegistryOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedRegistryServiceServer) Disable(context.Context, *DisableRegistryRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedRegistryServiceServer) Enable(context.Context, *EnableRegistryRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}

// UnsafeRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServiceServer will
// result in compilation errors.
type UnsafeRegistryServiceServer interface {
	mustEmbedUnimplementedRegistryServiceServer()
}

func RegisterRegistryServiceServer(s grpc.ServiceRegistrar, srv RegistryServiceServer) {
	s.RegisterService(&RegistryService_ServiceDesc, srv)
}

func _RegistryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).Get(ctx, req.(*GetRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNameRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetByName(ctx, req.(*GetByNameRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).List(ctx, req.(*ListRegistriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).Create(ctx, req.(*CreateRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).Update(ctx, req.(*UpdateRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).Delete(ctx, req.(*DeleteRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ListCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistryCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_ListCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListCertificates(ctx, req.(*ListRegistryCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_AddCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRegistryCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).AddCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_AddCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).AddCertificate(ctx, req.(*AddRegistryCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_DeleteCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistryCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).DeleteCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_DeleteCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).DeleteCertificate(ctx, req.(*DeleteRegistryCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ListPasswords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistryPasswordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListPasswords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_ListPasswords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListPasswords(ctx, req.(*ListRegistryPasswordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_AddPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRegistryPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).AddPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_AddPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).AddPassword(ctx, req.(*AddRegistryPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_DeletePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistryPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).DeletePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_DeletePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).DeletePassword(ctx, req.(*DeleteRegistryPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ListDeviceTopicAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceTopicAliasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListDeviceTopicAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_ListDeviceTopicAliases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListDeviceTopicAliases(ctx, req.(*ListDeviceTopicAliasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ListDataStreamExports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataStreamExportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListDataStreamExports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_ListDataStreamExports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListDataStreamExports(ctx, req.(*ListDataStreamExportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_AddDataStreamExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataStreamExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).AddDataStreamExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_AddDataStreamExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).AddDataStreamExport(ctx, req.(*AddDataStreamExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_DeleteDataStreamExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataStreamExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).DeleteDataStreamExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_DeleteDataStreamExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).DeleteDataStreamExport(ctx, req.(*DeleteDataStreamExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistryOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_ListOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListOperations(ctx, req.(*ListRegistryOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).Disable(ctx, req.(*DisableRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).Enable(ctx, req.(*EnableRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistryService_ServiceDesc is the grpc.ServiceDesc for RegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.iot.devices.v1.RegistryService",
	HandlerType: (*RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RegistryService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _RegistryService_GetByName_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RegistryService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RegistryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RegistryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RegistryService_Delete_Handler,
		},
		{
			MethodName: "ListCertificates",
			Handler:    _RegistryService_ListCertificates_Handler,
		},
		{
			MethodName: "AddCertificate",
			Handler:    _RegistryService_AddCertificate_Handler,
		},
		{
			MethodName: "DeleteCertificate",
			Handler:    _RegistryService_DeleteCertificate_Handler,
		},
		{
			MethodName: "ListPasswords",
			Handler:    _RegistryService_ListPasswords_Handler,
		},
		{
			MethodName: "AddPassword",
			Handler:    _RegistryService_AddPassword_Handler,
		},
		{
			MethodName: "DeletePassword",
			Handler:    _RegistryService_DeletePassword_Handler,
		},
		{
			MethodName: "ListDeviceTopicAliases",
			Handler:    _RegistryService_ListDeviceTopicAliases_Handler,
		},
		{
			MethodName: "ListDataStreamExports",
			Handler:    _RegistryService_ListDataStreamExports_Handler,
		},
		{
			MethodName: "AddDataStreamExport",
			Handler:    _RegistryService_AddDataStreamExport_Handler,
		},
		{
			MethodName: "DeleteDataStreamExport",
			Handler:    _RegistryService_DeleteDataStreamExport_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _RegistryService_ListOperations_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _RegistryService_Disable_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _RegistryService_Enable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/iot/devices/v1/registry_service.proto",
}
