// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: yandex/cloud/datatransfer/v1/endpoint/clickhouse.proto

package endpoint

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClickhouseCleanupPolicy int32

const (
	ClickhouseCleanupPolicy_CLICKHOUSE_CLEANUP_POLICY_UNSPECIFIED ClickhouseCleanupPolicy = 0
	ClickhouseCleanupPolicy_CLICKHOUSE_CLEANUP_POLICY_DISABLED    ClickhouseCleanupPolicy = 1
	ClickhouseCleanupPolicy_CLICKHOUSE_CLEANUP_POLICY_DROP        ClickhouseCleanupPolicy = 2
)

// Enum value maps for ClickhouseCleanupPolicy.
var (
	ClickhouseCleanupPolicy_name = map[int32]string{
		0: "CLICKHOUSE_CLEANUP_POLICY_UNSPECIFIED",
		1: "CLICKHOUSE_CLEANUP_POLICY_DISABLED",
		2: "CLICKHOUSE_CLEANUP_POLICY_DROP",
	}
	ClickhouseCleanupPolicy_value = map[string]int32{
		"CLICKHOUSE_CLEANUP_POLICY_UNSPECIFIED": 0,
		"CLICKHOUSE_CLEANUP_POLICY_DISABLED":    1,
		"CLICKHOUSE_CLEANUP_POLICY_DROP":        2,
	}
)

func (x ClickhouseCleanupPolicy) Enum() *ClickhouseCleanupPolicy {
	p := new(ClickhouseCleanupPolicy)
	*p = x
	return p
}

func (x ClickhouseCleanupPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseCleanupPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_enumTypes[0].Descriptor()
}

func (ClickhouseCleanupPolicy) Type() protoreflect.EnumType {
	return &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_enumTypes[0]
}

func (x ClickhouseCleanupPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseCleanupPolicy.Descriptor instead.
func (ClickhouseCleanupPolicy) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescGZIP(), []int{0}
}

type ClickhouseShard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hosts []string `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *ClickhouseShard) Reset() {
	*x = ClickhouseShard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseShard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseShard) ProtoMessage() {}

func (x *ClickhouseShard) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseShard.ProtoReflect.Descriptor instead.
func (*ClickhouseShard) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescGZIP(), []int{0}
}

func (x *ClickhouseShard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseShard) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type OnPremiseClickhouse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shards     []*ClickhouseShard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
	HttpPort   int64              `protobuf:"varint,3,opt,name=http_port,json=httpPort,proto3" json:"http_port,omitempty"`
	NativePort int64              `protobuf:"varint,4,opt,name=native_port,json=nativePort,proto3" json:"native_port,omitempty"`
	TlsMode    *TLSMode           `protobuf:"bytes,8,opt,name=tls_mode,json=tlsMode,proto3" json:"tls_mode,omitempty"`
}

func (x *OnPremiseClickhouse) Reset() {
	*x = OnPremiseClickhouse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnPremiseClickhouse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnPremiseClickhouse) ProtoMessage() {}

func (x *OnPremiseClickhouse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnPremiseClickhouse.ProtoReflect.Descriptor instead.
func (*OnPremiseClickhouse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescGZIP(), []int{1}
}

func (x *OnPremiseClickhouse) GetShards() []*ClickhouseShard {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *OnPremiseClickhouse) GetHttpPort() int64 {
	if x != nil {
		return x.HttpPort
	}
	return 0
}

func (x *OnPremiseClickhouse) GetNativePort() int64 {
	if x != nil {
		return x.NativePort
	}
	return 0
}

func (x *OnPremiseClickhouse) GetTlsMode() *TLSMode {
	if x != nil {
		return x.TlsMode
	}
	return nil
}

type ClickhouseConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Address:
	//	*ClickhouseConnectionOptions_MdbClusterId
	//	*ClickhouseConnectionOptions_OnPremise
	Address  isClickhouseConnectionOptions_Address `protobuf_oneof:"address"`
	Database string                                `protobuf:"bytes,8,opt,name=database,proto3" json:"database,omitempty"`
	User     string                                `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Password *Secret                               `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ClickhouseConnectionOptions) Reset() {
	*x = ClickhouseConnectionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConnectionOptions) ProtoMessage() {}

func (x *ClickhouseConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConnectionOptions.ProtoReflect.Descriptor instead.
func (*ClickhouseConnectionOptions) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescGZIP(), []int{2}
}

func (m *ClickhouseConnectionOptions) GetAddress() isClickhouseConnectionOptions_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (x *ClickhouseConnectionOptions) GetMdbClusterId() string {
	if x, ok := x.GetAddress().(*ClickhouseConnectionOptions_MdbClusterId); ok {
		return x.MdbClusterId
	}
	return ""
}

func (x *ClickhouseConnectionOptions) GetOnPremise() *OnPremiseClickhouse {
	if x, ok := x.GetAddress().(*ClickhouseConnectionOptions_OnPremise); ok {
		return x.OnPremise
	}
	return nil
}

func (x *ClickhouseConnectionOptions) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClickhouseConnectionOptions) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseConnectionOptions) GetPassword() *Secret {
	if x != nil {
		return x.Password
	}
	return nil
}

type isClickhouseConnectionOptions_Address interface {
	isClickhouseConnectionOptions_Address()
}

type ClickhouseConnectionOptions_MdbClusterId struct {
	MdbClusterId string `protobuf:"bytes,5,opt,name=mdb_cluster_id,json=mdbClusterId,proto3,oneof"`
}

type ClickhouseConnectionOptions_OnPremise struct {
	OnPremise *OnPremiseClickhouse `protobuf:"bytes,2,opt,name=on_premise,json=onPremise,proto3,oneof"`
}

func (*ClickhouseConnectionOptions_MdbClusterId) isClickhouseConnectionOptions_Address() {}

func (*ClickhouseConnectionOptions_OnPremise) isClickhouseConnectionOptions_Address() {}

type ClickhouseConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Connection:
	//	*ClickhouseConnection_ConnectionOptions
	Connection isClickhouseConnection_Connection `protobuf_oneof:"connection"`
}

func (x *ClickhouseConnection) Reset() {
	*x = ClickhouseConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConnection) ProtoMessage() {}

func (x *ClickhouseConnection) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConnection.ProtoReflect.Descriptor instead.
func (*ClickhouseConnection) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescGZIP(), []int{3}
}

func (m *ClickhouseConnection) GetConnection() isClickhouseConnection_Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (x *ClickhouseConnection) GetConnectionOptions() *ClickhouseConnectionOptions {
	if x, ok := x.GetConnection().(*ClickhouseConnection_ConnectionOptions); ok {
		return x.ConnectionOptions
	}
	return nil
}

type isClickhouseConnection_Connection interface {
	isClickhouseConnection_Connection()
}

type ClickhouseConnection_ConnectionOptions struct {
	ConnectionOptions *ClickhouseConnectionOptions `protobuf:"bytes,1,opt,name=connection_options,json=connectionOptions,proto3,oneof"`
}

func (*ClickhouseConnection_ConnectionOptions) isClickhouseConnection_Connection() {}

type ClickhouseSharding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sharding:
	//	*ClickhouseSharding_ColumnValueHash_
	//	*ClickhouseSharding_CustomMapping
	//	*ClickhouseSharding_TransferId
	Sharding isClickhouseSharding_Sharding `protobuf_oneof:"sharding"`
}

func (x *ClickhouseSharding) Reset() {
	*x = ClickhouseSharding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseSharding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseSharding) ProtoMessage() {}

func (x *ClickhouseSharding) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseSharding.ProtoReflect.Descriptor instead.
func (*ClickhouseSharding) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescGZIP(), []int{4}
}

func (m *ClickhouseSharding) GetSharding() isClickhouseSharding_Sharding {
	if m != nil {
		return m.Sharding
	}
	return nil
}

func (x *ClickhouseSharding) GetColumnValueHash() *ClickhouseSharding_ColumnValueHash {
	if x, ok := x.GetSharding().(*ClickhouseSharding_ColumnValueHash_); ok {
		return x.ColumnValueHash
	}
	return nil
}

func (x *ClickhouseSharding) GetCustomMapping() *ClickhouseSharding_ColumnValueMapping {
	if x, ok := x.GetSharding().(*ClickhouseSharding_CustomMapping); ok {
		return x.CustomMapping
	}
	return nil
}

func (x *ClickhouseSharding) GetTransferId() *emptypb.Empty {
	if x, ok := x.GetSharding().(*ClickhouseSharding_TransferId); ok {
		return x.TransferId
	}
	return nil
}

type isClickhouseSharding_Sharding interface {
	isClickhouseSharding_Sharding()
}

type ClickhouseSharding_ColumnValueHash_ struct {
	ColumnValueHash *ClickhouseSharding_ColumnValueHash `protobuf:"bytes,1,opt,name=column_value_hash,json=columnValueHash,proto3,oneof"`
}

type ClickhouseSharding_CustomMapping struct {
	CustomMapping *ClickhouseSharding_ColumnValueMapping `protobuf:"bytes,2,opt,name=custom_mapping,json=customMapping,proto3,oneof"`
}

type ClickhouseSharding_TransferId struct {
	TransferId *emptypb.Empty `protobuf:"bytes,3,opt,name=transfer_id,json=transferId,proto3,oneof"`
}

func (*ClickhouseSharding_ColumnValueHash_) isClickhouseSharding_Sharding() {}

func (*ClickhouseSharding_CustomMapping) isClickhouseSharding_Sharding() {}

func (*ClickhouseSharding_TransferId) isClickhouseSharding_Sharding() {}

type ClickhouseSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection     *ClickhouseConnection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	SubnetId       string                `protobuf:"bytes,9,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	SecurityGroups []string              `protobuf:"bytes,10,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	IncludeTables  []string              `protobuf:"bytes,7,rep,name=include_tables,json=includeTables,proto3" json:"include_tables,omitempty"`
	ExcludeTables  []string              `protobuf:"bytes,8,rep,name=exclude_tables,json=excludeTables,proto3" json:"exclude_tables,omitempty"`
}

func (x *ClickhouseSource) Reset() {
	*x = ClickhouseSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseSource) ProtoMessage() {}

func (x *ClickhouseSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseSource.ProtoReflect.Descriptor instead.
func (*ClickhouseSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescGZIP(), []int{5}
}

func (x *ClickhouseSource) GetConnection() *ClickhouseConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *ClickhouseSource) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *ClickhouseSource) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *ClickhouseSource) GetIncludeTables() []string {
	if x != nil {
		return x.IncludeTables
	}
	return nil
}

func (x *ClickhouseSource) GetExcludeTables() []string {
	if x != nil {
		return x.ExcludeTables
	}
	return nil
}

type ClickhouseTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection            *ClickhouseConnection   `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
	SubnetId              string                  `protobuf:"bytes,12,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	SecurityGroups        []string                `protobuf:"bytes,51,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	ClickhouseClusterName string                  `protobuf:"bytes,50,opt,name=clickhouse_cluster_name,json=clickhouseClusterName,proto3" json:"clickhouse_cluster_name,omitempty"`
	AltNames              []*AltName              `protobuf:"bytes,17,rep,name=alt_names,json=altNames,proto3" json:"alt_names,omitempty"`
	Sharding              *ClickhouseSharding     `protobuf:"bytes,22,opt,name=sharding,proto3" json:"sharding,omitempty"`
	CleanupPolicy         ClickhouseCleanupPolicy `protobuf:"varint,21,opt,name=cleanup_policy,json=cleanupPolicy,proto3,enum=yandex.cloud.datatransfer.v1.endpoint.ClickhouseCleanupPolicy" json:"cleanup_policy,omitempty"`
}

func (x *ClickhouseTarget) Reset() {
	*x = ClickhouseTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseTarget) ProtoMessage() {}

func (x *ClickhouseTarget) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseTarget.ProtoReflect.Descriptor instead.
func (*ClickhouseTarget) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescGZIP(), []int{6}
}

func (x *ClickhouseTarget) GetConnection() *ClickhouseConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *ClickhouseTarget) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *ClickhouseTarget) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *ClickhouseTarget) GetClickhouseClusterName() string {
	if x != nil {
		return x.ClickhouseClusterName
	}
	return ""
}

func (x *ClickhouseTarget) GetAltNames() []*AltName {
	if x != nil {
		return x.AltNames
	}
	return nil
}

func (x *ClickhouseTarget) GetSharding() *ClickhouseSharding {
	if x != nil {
		return x.Sharding
	}
	return nil
}

func (x *ClickhouseTarget) GetCleanupPolicy() ClickhouseCleanupPolicy {
	if x != nil {
		return x.CleanupPolicy
	}
	return ClickhouseCleanupPolicy_CLICKHOUSE_CLEANUP_POLICY_UNSPECIFIED
}

type ClickhouseSharding_ColumnValueHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnName string `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
}

func (x *ClickhouseSharding_ColumnValueHash) Reset() {
	*x = ClickhouseSharding_ColumnValueHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseSharding_ColumnValueHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseSharding_ColumnValueHash) ProtoMessage() {}

func (x *ClickhouseSharding_ColumnValueHash) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseSharding_ColumnValueHash.ProtoReflect.Descriptor instead.
func (*ClickhouseSharding_ColumnValueHash) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ClickhouseSharding_ColumnValueHash) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

type ClickhouseSharding_ColumnValueMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnName string                                                `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	Mapping    []*ClickhouseSharding_ColumnValueMapping_ValueToShard `protobuf:"bytes,2,rep,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *ClickhouseSharding_ColumnValueMapping) Reset() {
	*x = ClickhouseSharding_ColumnValueMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseSharding_ColumnValueMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseSharding_ColumnValueMapping) ProtoMessage() {}

func (x *ClickhouseSharding_ColumnValueMapping) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseSharding_ColumnValueMapping.ProtoReflect.Descriptor instead.
func (*ClickhouseSharding_ColumnValueMapping) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescGZIP(), []int{4, 1}
}

func (x *ClickhouseSharding_ColumnValueMapping) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ClickhouseSharding_ColumnValueMapping) GetMapping() []*ClickhouseSharding_ColumnValueMapping_ValueToShard {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type ClickhouseSharding_ColumnValueMapping_ValueToShard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnValue *ColumnValue `protobuf:"bytes,1,opt,name=column_value,json=columnValue,proto3" json:"column_value,omitempty"`
	ShardName   string       `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
}

func (x *ClickhouseSharding_ColumnValueMapping_ValueToShard) Reset() {
	*x = ClickhouseSharding_ColumnValueMapping_ValueToShard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseSharding_ColumnValueMapping_ValueToShard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseSharding_ColumnValueMapping_ValueToShard) ProtoMessage() {}

func (x *ClickhouseSharding_ColumnValueMapping_ValueToShard) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseSharding_ColumnValueMapping_ValueToShard.ProtoReflect.Descriptor instead.
func (*ClickhouseSharding_ColumnValueMapping_ValueToShard) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescGZIP(), []int{4, 1, 0}
}

func (x *ClickhouseSharding_ColumnValueMapping_ValueToShard) GetColumnValue() *ColumnValue {
	if x != nil {
		return x.ColumnValue
	}
	return nil
}

func (x *ClickhouseSharding_ColumnValueMapping_ValueToShard) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

var File_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto protoreflect.FileDescriptor

var file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDesc = []byte{
	0x0a, 0x36, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3b, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xee, 0x01,
	0x0a, 0x13, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x4c,
	0x53, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xa8,
	0x02, 0x0a, 0x1b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x64, 0x62, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x6d,
	0x69, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x05, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x77, 0x0a, 0x11,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x75, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x32, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xb1, 0x02, 0x0a, 0x12,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x73, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x64, 0x52,
	0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x84, 0x01, 0x0a, 0x0c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x55, 0x0a, 0x0c, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x83, 0x02, 0x0a, 0x10,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x5b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x22, 0xf8, 0x03, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x09, 0x61, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x6c, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2a, 0x90, 0x01, 0x0a,
	0x17, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4c, 0x49, 0x43,
	0x4b, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x48, 0x4f, 0x55, 0x53,
	0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43,
	0x4c, 0x49, 0x43, 0x4b, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55,
	0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x02, 0x42,
	0xa7, 0x01, 0x0a, 0x29, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5a, 0x52, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x3b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0xaa, 0x02, 0x25, 0x59, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x56, 0x31,
	0x2e, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescOnce sync.Once
	file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescData = file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDesc
)

func file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescGZIP() []byte {
	file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescData)
	})
	return file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDescData
}

var file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_goTypes = []interface{}{
	(ClickhouseCleanupPolicy)(0),                               // 0: yandex.cloud.datatransfer.v1.endpoint.ClickhouseCleanupPolicy
	(*ClickhouseShard)(nil),                                    // 1: yandex.cloud.datatransfer.v1.endpoint.ClickhouseShard
	(*OnPremiseClickhouse)(nil),                                // 2: yandex.cloud.datatransfer.v1.endpoint.OnPremiseClickhouse
	(*ClickhouseConnectionOptions)(nil),                        // 3: yandex.cloud.datatransfer.v1.endpoint.ClickhouseConnectionOptions
	(*ClickhouseConnection)(nil),                               // 4: yandex.cloud.datatransfer.v1.endpoint.ClickhouseConnection
	(*ClickhouseSharding)(nil),                                 // 5: yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding
	(*ClickhouseSource)(nil),                                   // 6: yandex.cloud.datatransfer.v1.endpoint.ClickhouseSource
	(*ClickhouseTarget)(nil),                                   // 7: yandex.cloud.datatransfer.v1.endpoint.ClickhouseTarget
	(*ClickhouseSharding_ColumnValueHash)(nil),                 // 8: yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding.ColumnValueHash
	(*ClickhouseSharding_ColumnValueMapping)(nil),              // 9: yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding.ColumnValueMapping
	(*ClickhouseSharding_ColumnValueMapping_ValueToShard)(nil), // 10: yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding.ColumnValueMapping.ValueToShard
	(*TLSMode)(nil),                                            // 11: yandex.cloud.datatransfer.v1.endpoint.TLSMode
	(*Secret)(nil),                                             // 12: yandex.cloud.datatransfer.v1.endpoint.Secret
	(*emptypb.Empty)(nil),                                      // 13: google.protobuf.Empty
	(*AltName)(nil),                                            // 14: yandex.cloud.datatransfer.v1.endpoint.AltName
	(*ColumnValue)(nil),                                        // 15: yandex.cloud.datatransfer.v1.endpoint.ColumnValue
}
var file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_depIdxs = []int32{
	1,  // 0: yandex.cloud.datatransfer.v1.endpoint.OnPremiseClickhouse.shards:type_name -> yandex.cloud.datatransfer.v1.endpoint.ClickhouseShard
	11, // 1: yandex.cloud.datatransfer.v1.endpoint.OnPremiseClickhouse.tls_mode:type_name -> yandex.cloud.datatransfer.v1.endpoint.TLSMode
	2,  // 2: yandex.cloud.datatransfer.v1.endpoint.ClickhouseConnectionOptions.on_premise:type_name -> yandex.cloud.datatransfer.v1.endpoint.OnPremiseClickhouse
	12, // 3: yandex.cloud.datatransfer.v1.endpoint.ClickhouseConnectionOptions.password:type_name -> yandex.cloud.datatransfer.v1.endpoint.Secret
	3,  // 4: yandex.cloud.datatransfer.v1.endpoint.ClickhouseConnection.connection_options:type_name -> yandex.cloud.datatransfer.v1.endpoint.ClickhouseConnectionOptions
	8,  // 5: yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding.column_value_hash:type_name -> yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding.ColumnValueHash
	9,  // 6: yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding.custom_mapping:type_name -> yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding.ColumnValueMapping
	13, // 7: yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding.transfer_id:type_name -> google.protobuf.Empty
	4,  // 8: yandex.cloud.datatransfer.v1.endpoint.ClickhouseSource.connection:type_name -> yandex.cloud.datatransfer.v1.endpoint.ClickhouseConnection
	4,  // 9: yandex.cloud.datatransfer.v1.endpoint.ClickhouseTarget.connection:type_name -> yandex.cloud.datatransfer.v1.endpoint.ClickhouseConnection
	14, // 10: yandex.cloud.datatransfer.v1.endpoint.ClickhouseTarget.alt_names:type_name -> yandex.cloud.datatransfer.v1.endpoint.AltName
	5,  // 11: yandex.cloud.datatransfer.v1.endpoint.ClickhouseTarget.sharding:type_name -> yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding
	0,  // 12: yandex.cloud.datatransfer.v1.endpoint.ClickhouseTarget.cleanup_policy:type_name -> yandex.cloud.datatransfer.v1.endpoint.ClickhouseCleanupPolicy
	10, // 13: yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding.ColumnValueMapping.mapping:type_name -> yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding.ColumnValueMapping.ValueToShard
	15, // 14: yandex.cloud.datatransfer.v1.endpoint.ClickhouseSharding.ColumnValueMapping.ValueToShard.column_value:type_name -> yandex.cloud.datatransfer.v1.endpoint.ColumnValue
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_init() }
func file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_init() {
	if File_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto != nil {
		return
	}
	file_yandex_cloud_datatransfer_v1_endpoint_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseShard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnPremiseClickhouse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConnectionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseSharding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseSharding_ColumnValueHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseSharding_ColumnValueMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickhouseSharding_ColumnValueMapping_ValueToShard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ClickhouseConnectionOptions_MdbClusterId)(nil),
		(*ClickhouseConnectionOptions_OnPremise)(nil),
	}
	file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ClickhouseConnection_ConnectionOptions)(nil),
	}
	file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ClickhouseSharding_ColumnValueHash_)(nil),
		(*ClickhouseSharding_CustomMapping)(nil),
		(*ClickhouseSharding_TransferId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_msgTypes,
	}.Build()
	File_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto = out.File
	file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_rawDesc = nil
	file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_goTypes = nil
	file_yandex_cloud_datatransfer_v1_endpoint_clickhouse_proto_depIdxs = nil
}
