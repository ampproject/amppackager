// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/backup/v1/backup.proto

package backup

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Encryption Algorithm for underlying backups:
// `ENCRYPTION_ALGORITHM_UNSPECIFIED`, `NONE`, `AES128`, `AES192`,
// `AES256`.
type Archive_EncryptionAlgorithm int32

const (
	Archive_ENCRYPTION_ALGORITHM_UNSPECIFIED Archive_EncryptionAlgorithm = 0
	Archive_NONE                             Archive_EncryptionAlgorithm = 1
	Archive_AES128                           Archive_EncryptionAlgorithm = 2
	Archive_AES192                           Archive_EncryptionAlgorithm = 3
	Archive_AES256                           Archive_EncryptionAlgorithm = 4
)

// Enum value maps for Archive_EncryptionAlgorithm.
var (
	Archive_EncryptionAlgorithm_name = map[int32]string{
		0: "ENCRYPTION_ALGORITHM_UNSPECIFIED",
		1: "NONE",
		2: "AES128",
		3: "AES192",
		4: "AES256",
	}
	Archive_EncryptionAlgorithm_value = map[string]int32{
		"ENCRYPTION_ALGORITHM_UNSPECIFIED": 0,
		"NONE":                             1,
		"AES128":                           2,
		"AES192":                           3,
		"AES256":                           4,
	}
)

func (x Archive_EncryptionAlgorithm) Enum() *Archive_EncryptionAlgorithm {
	p := new(Archive_EncryptionAlgorithm)
	*p = x
	return p
}

func (x Archive_EncryptionAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Archive_EncryptionAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_backup_proto_enumTypes[0].Descriptor()
}

func (Archive_EncryptionAlgorithm) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_backup_proto_enumTypes[0]
}

func (x Archive_EncryptionAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Archive_EncryptionAlgorithm.Descriptor instead.
func (Archive_EncryptionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP(), []int{0, 0}
}

// Action with archive backup: `ACTION_UNSPECIFIED`, `REFRESH`,
// `DELETE_BY_AGENT`.
type Archive_Action int32

const (
	Archive_ACTION_UNSPECIFIED Archive_Action = 0
	Archive_REFRESH            Archive_Action = 1
	Archive_DELETE_BY_AGENT    Archive_Action = 2
)

// Enum value maps for Archive_Action.
var (
	Archive_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "REFRESH",
		2: "DELETE_BY_AGENT",
	}
	Archive_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"REFRESH":            1,
		"DELETE_BY_AGENT":    2,
	}
)

func (x Archive_Action) Enum() *Archive_Action {
	p := new(Archive_Action)
	*p = x
	return p
}

func (x Archive_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Archive_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_backup_proto_enumTypes[1].Descriptor()
}

func (Archive_Action) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_backup_proto_enumTypes[1]
}

func (x Archive_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Archive_Action.Descriptor instead.
func (Archive_Action) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP(), []int{0, 1}
}

// Backup type.
// For detailed information, please see [Backup types](/docs/backup/concepts/backup#types).
type Backup_Type int32

const (
	Backup_TYPE_UNSPECIFIED Backup_Type = 0
	Backup_FULL             Backup_Type = 1
	Backup_INCREMENTAL      Backup_Type = 2
)

// Enum value maps for Backup_Type.
var (
	Backup_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "FULL",
		2: "INCREMENTAL",
	}
	Backup_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"FULL":             1,
		"INCREMENTAL":      2,
	}
)

func (x Backup_Type) Enum() *Backup_Type {
	p := new(Backup_Type)
	*p = x
	return p
}

func (x Backup_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Backup_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_backup_proto_enumTypes[2].Descriptor()
}

func (Backup_Type) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_backup_proto_enumTypes[2]
}

func (x Backup_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Backup_Type.Descriptor instead.
func (Backup_Type) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP(), []int{3, 0}
}

// Type of the file.
type BackupFile_Type int32

const (
	BackupFile_TYPE_UNSPECIFIED BackupFile_Type = 0
	BackupFile_TYPE_DIR         BackupFile_Type = 1
	BackupFile_TYPE_FILE        BackupFile_Type = 2
)

// Enum value maps for BackupFile_Type.
var (
	BackupFile_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_DIR",
		2: "TYPE_FILE",
	}
	BackupFile_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_DIR":         1,
		"TYPE_FILE":        2,
	}
)

func (x BackupFile_Type) Enum() *BackupFile_Type {
	p := new(BackupFile_Type)
	*p = x
	return p
}

func (x BackupFile_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupFile_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_backup_proto_enumTypes[3].Descriptor()
}

func (BackupFile_Type) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_backup_proto_enumTypes[3]
}

func (x BackupFile_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupFile_Type.Descriptor instead.
func (BackupFile_Type) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP(), []int{4, 0}
}

// Archive is a container that holds backups of Compute Cloud instance.
type Archive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the backup.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the backup.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the backup vault.
	VaultId string `protobuf:"bytes,3,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	// Archive attributes.
	Attributes *Archive_ArchiveAttributes `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// Archive size.
	Size int64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	// Compressed data size.
	CompressedDataSize int64 `protobuf:"varint,6,opt,name=compressed_data_size,json=compressedDataSize,proto3" json:"compressed_data_size,omitempty"`
	// Data size.
	DataSize int64 `protobuf:"varint,7,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	// Original data size.
	OriginalDataSize int64 `protobuf:"varint,8,opt,name=original_data_size,json=originalDataSize,proto3" json:"original_data_size,omitempty"`
	// Logical size.
	LogicalSize         int64                  `protobuf:"varint,9,opt,name=logical_size,json=logicalSize,proto3" json:"logical_size,omitempty"`
	Format              Format                 `protobuf:"varint,10,opt,name=format,proto3,enum=yandex.cloud.backup.v1.Format" json:"format,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LastBackupCreatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=last_backup_created_at,json=lastBackupCreatedAt,proto3" json:"last_backup_created_at,omitempty"`
	LastSeenAt          *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=last_seen_at,json=lastSeenAt,proto3" json:"last_seen_at,omitempty"`
	// If this field is true, it means that any of encryption algorithm
	// has been chosen.
	ProtectedByPassword bool                        `protobuf:"varint,15,opt,name=protected_by_password,json=protectedByPassword,proto3" json:"protected_by_password,omitempty"`
	EncryptionAlgorithm Archive_EncryptionAlgorithm `protobuf:"varint,16,opt,name=encryption_algorithm,json=encryptionAlgorithm,proto3,enum=yandex.cloud.backup.v1.Archive_EncryptionAlgorithm" json:"encryption_algorithm,omitempty"`
	Actions             []Archive_Action            `protobuf:"varint,20,rep,packed,name=actions,proto3,enum=yandex.cloud.backup.v1.Archive_Action" json:"actions,omitempty"`
	// Backup plan ID.
	BackupPlanId string `protobuf:"bytes,22,opt,name=backup_plan_id,json=backupPlanId,proto3" json:"backup_plan_id,omitempty"`
	// Backup plan name.
	BackupPlanName string `protobuf:"bytes,23,opt,name=backup_plan_name,json=backupPlanName,proto3" json:"backup_plan_name,omitempty"`
	// Backup plan description.
	Description string `protobuf:"bytes,24,opt,name=description,proto3" json:"description,omitempty"`
	// Display name, e.g. `INSTANCE_NAME - POLICY_NAME`.
	DisplayName string `protobuf:"bytes,25,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Compute Cloud instance ID.
	ComputeInstanceId string `protobuf:"bytes,26,opt,name=compute_instance_id,json=computeInstanceId,proto3" json:"compute_instance_id,omitempty"`
	// If this field is true, it means that the archive is consistent.
	Consistent bool `protobuf:"varint,27,opt,name=consistent,proto3" json:"consistent,omitempty"`
	// If this field is true, it means that the archive was deleted.
	Deleted bool `protobuf:"varint,30,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Resource ID.
	ResourceId string `protobuf:"bytes,31,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *Archive) Reset() {
	*x = Archive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Archive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Archive) ProtoMessage() {}

func (x *Archive) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Archive.ProtoReflect.Descriptor instead.
func (*Archive) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP(), []int{0}
}

func (x *Archive) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Archive) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Archive) GetVaultId() string {
	if x != nil {
		return x.VaultId
	}
	return ""
}

func (x *Archive) GetAttributes() *Archive_ArchiveAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Archive) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Archive) GetCompressedDataSize() int64 {
	if x != nil {
		return x.CompressedDataSize
	}
	return 0
}

func (x *Archive) GetDataSize() int64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *Archive) GetOriginalDataSize() int64 {
	if x != nil {
		return x.OriginalDataSize
	}
	return 0
}

func (x *Archive) GetLogicalSize() int64 {
	if x != nil {
		return x.LogicalSize
	}
	return 0
}

func (x *Archive) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_FORMAT_UNSPECIFIED
}

func (x *Archive) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Archive) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Archive) GetLastBackupCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBackupCreatedAt
	}
	return nil
}

func (x *Archive) GetLastSeenAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeenAt
	}
	return nil
}

func (x *Archive) GetProtectedByPassword() bool {
	if x != nil {
		return x.ProtectedByPassword
	}
	return false
}

func (x *Archive) GetEncryptionAlgorithm() Archive_EncryptionAlgorithm {
	if x != nil {
		return x.EncryptionAlgorithm
	}
	return Archive_ENCRYPTION_ALGORITHM_UNSPECIFIED
}

func (x *Archive) GetActions() []Archive_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Archive) GetBackupPlanId() string {
	if x != nil {
		return x.BackupPlanId
	}
	return ""
}

func (x *Archive) GetBackupPlanName() string {
	if x != nil {
		return x.BackupPlanName
	}
	return ""
}

func (x *Archive) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Archive) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Archive) GetComputeInstanceId() string {
	if x != nil {
		return x.ComputeInstanceId
	}
	return ""
}

func (x *Archive) GetConsistent() bool {
	if x != nil {
		return x.Consistent
	}
	return false
}

func (x *Archive) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Archive) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Free space in the volume.
	FreeSpace int64 `protobuf:"varint,1,opt,name=free_space,json=freeSpace,proto3" json:"free_space,omitempty"`
	// If this field is true, it means that the volume is bootable.
	IsBootable bool `protobuf:"varint,2,opt,name=is_bootable,json=isBootable,proto3" json:"is_bootable,omitempty"`
	// If this field is true, it means that the volume is a system volume.
	IsSystem bool `protobuf:"varint,3,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`
	// Volume name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Volume size.
	Size int64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	// Mount string ID.
	MountStrid string `protobuf:"bytes,6,opt,name=mount_strid,json=mountStrid,proto3" json:"mount_strid,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP(), []int{1}
}

func (x *Volume) GetFreeSpace() int64 {
	if x != nil {
		return x.FreeSpace
	}
	return 0
}

func (x *Volume) GetIsBootable() bool {
	if x != nil {
		return x.IsBootable
	}
	return false
}

func (x *Volume) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Volume) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Volume) GetMountStrid() string {
	if x != nil {
		return x.MountStrid
	}
	return ""
}

type Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device model.
	DeviceModel string `protobuf:"bytes,1,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	// Disk name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Disk size.
	Size    int64     `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Volumes []*Volume `protobuf:"bytes,4,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *Disk) Reset() {
	*x = Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP(), []int{2}
}

func (x *Disk) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *Disk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Disk) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Disk) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type Backup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the backup.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the backup vault.
	VaultId string `protobuf:"bytes,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	// ID of the backup archive.
	ArchiveId  string                 `protobuf:"bytes,3,opt,name=archive_id,json=archiveId,proto3" json:"archive_id,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastSeenAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_seen_at,json=lastSeenAt,proto3" json:"last_seen_at,omitempty"`
	// Backup size.
	Size int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// Deduplicated backup size.
	DeduplicatedSize int64 `protobuf:"varint,7,opt,name=deduplicated_size,json=deduplicatedSize,proto3" json:"deduplicated_size,omitempty"`
	// Backed up data size.
	BackedUpDataSize int64 `protobuf:"varint,8,opt,name=backed_up_data_size,json=backedUpDataSize,proto3" json:"backed_up_data_size,omitempty"`
	// Original data size.
	OriginalDataSize int64                    `protobuf:"varint,9,opt,name=original_data_size,json=originalDataSize,proto3" json:"original_data_size,omitempty"`
	Attributes       *Backup_BackupAttributes `protobuf:"bytes,10,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// Compute Cloud instance ID.
	ComputeInstanceId string      `protobuf:"bytes,11,opt,name=compute_instance_id,json=computeInstanceId,proto3" json:"compute_instance_id,omitempty"`
	Disks             []*Disk     `protobuf:"bytes,14,rep,name=disks,proto3" json:"disks,omitempty"`
	Type              Backup_Type `protobuf:"varint,15,opt,name=type,proto3,enum=yandex.cloud.backup.v1.Backup_Type" json:"type,omitempty"`
	// If this field is true, it means that the backup was deleted.
	Deleted bool `protobuf:"varint,21,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// [Policy](/docs/backup/concepts/policy) ID.
	PolicyId string `protobuf:"bytes,22,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// Resource ID. It identifies Compute Cloud instance in backup service.
	ResourceId string `protobuf:"bytes,23,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *Backup) Reset() {
	*x = Backup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup) ProtoMessage() {}

func (x *Backup) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup.ProtoReflect.Descriptor instead.
func (*Backup) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP(), []int{3}
}

func (x *Backup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Backup) GetVaultId() string {
	if x != nil {
		return x.VaultId
	}
	return ""
}

func (x *Backup) GetArchiveId() string {
	if x != nil {
		return x.ArchiveId
	}
	return ""
}

func (x *Backup) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Backup) GetLastSeenAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeenAt
	}
	return nil
}

func (x *Backup) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Backup) GetDeduplicatedSize() int64 {
	if x != nil {
		return x.DeduplicatedSize
	}
	return 0
}

func (x *Backup) GetBackedUpDataSize() int64 {
	if x != nil {
		return x.BackedUpDataSize
	}
	return 0
}

func (x *Backup) GetOriginalDataSize() int64 {
	if x != nil {
		return x.OriginalDataSize
	}
	return 0
}

func (x *Backup) GetAttributes() *Backup_BackupAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Backup) GetComputeInstanceId() string {
	if x != nil {
		return x.ComputeInstanceId
	}
	return ""
}

func (x *Backup) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *Backup) GetType() Backup_Type {
	if x != nil {
		return x.Type
	}
	return Backup_TYPE_UNSPECIFIED
}

func (x *Backup) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *Backup) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *Backup) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// BackupFile represents a single unit of file or directory system inside the backup.
type BackupFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the item. Should be used as source ID in case of listing.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Might be empty if this is root directory.
	ParentId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Type of the item.
	Type BackupFile_Type `protobuf:"varint,3,opt,name=type,proto3,enum=yandex.cloud.backup.v1.BackupFile_Type" json:"type,omitempty"`
	// Absolute path of the item.
	FullPath string `protobuf:"bytes,4,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
	// Name of the directory / file.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Size in bytes of the item.
	Size int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// Actions that might be done on the object.
	Actions    *BackupFile_Actions    `protobuf:"bytes,7,opt,name=actions,proto3" json:"actions,omitempty"`
	ModifiedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *BackupFile) Reset() {
	*x = BackupFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupFile) ProtoMessage() {}

func (x *BackupFile) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupFile.ProtoReflect.Descriptor instead.
func (*BackupFile) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP(), []int{4}
}

func (x *BackupFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BackupFile) GetParentId() *wrapperspb.StringValue {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *BackupFile) GetType() BackupFile_Type {
	if x != nil {
		return x.Type
	}
	return BackupFile_TYPE_UNSPECIFIED
}

func (x *BackupFile) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

func (x *BackupFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BackupFile) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BackupFile) GetActions() *BackupFile_Actions {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *BackupFile) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

// Archive attributes.
type Archive_ArchiveAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Archive attribute. Default value: `0`.
	Aaib string `protobuf:"bytes,1,opt,name=aaib,proto3" json:"aaib,omitempty"`
	// URI of the backup archive.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *Archive_ArchiveAttributes) Reset() {
	*x = Archive_ArchiveAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Archive_ArchiveAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Archive_ArchiveAttributes) ProtoMessage() {}

func (x *Archive_ArchiveAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Archive_ArchiveAttributes.ProtoReflect.Descriptor instead.
func (*Archive_ArchiveAttributes) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Archive_ArchiveAttributes) GetAaib() string {
	if x != nil {
		return x.Aaib
	}
	return ""
}

func (x *Archive_ArchiveAttributes) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// Backup attributes.
type Backup_BackupAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backup stream name.
	StreamName string `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// URI of the backup archive.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *Backup_BackupAttributes) Reset() {
	*x = Backup_BackupAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backup_BackupAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_BackupAttributes) ProtoMessage() {}

func (x *Backup_BackupAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_BackupAttributes.ProtoReflect.Descriptor instead.
func (*Backup_BackupAttributes) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Backup_BackupAttributes) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *Backup_BackupAttributes) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type BackupFile_Actions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows to send request to restore item to disk
	RestoreToDisk bool `protobuf:"varint,1,opt,name=restore_to_disk,json=restoreToDisk,proto3" json:"restore_to_disk,omitempty"`
	// Allows to move to location by id.
	GoToLocation bool `protobuf:"varint,2,opt,name=go_to_location,json=goToLocation,proto3" json:"go_to_location,omitempty"`
}

func (x *BackupFile_Actions) Reset() {
	*x = BackupFile_Actions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupFile_Actions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupFile_Actions) ProtoMessage() {}

func (x *BackupFile_Actions) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_backup_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupFile_Actions.ProtoReflect.Descriptor instead.
func (*BackupFile_Actions) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP(), []int{4, 0}
}

func (x *BackupFile_Actions) GetRestoreToDisk() bool {
	if x != nil {
		return x.RestoreToDisk
	}
	return false
}

func (x *BackupFile_Actions) GetGoToLocation() bool {
	if x != nil {
		return x.GoToLocation
	}
	return false
}

var File_yandex_cloud_backup_v1_backup_proto protoreflect.FileDescriptor

var file_yandex_cloud_backup_v1_backup_proto_rawDesc = []byte{
	0x0a, 0x23, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8c, 0x0b, 0x0a, 0x07, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x4f, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e,
	0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x41,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x66, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x40, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x1a,
	0x39, 0x0a, 0x11, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x61, 0x69, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x61, 0x69, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x69, 0x0a, 0x13, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x45, 0x53, 0x31, 0x32, 0x38, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x45, 0x53, 0x31, 0x39, 0x32, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x45, 0x53,
	0x32, 0x35, 0x36, 0x10, 0x04, 0x22, 0x42, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x46, 0x52, 0x45,
	0x53, 0x48, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x42,
	0x59, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x14, 0x4a,
	0x04, 0x08, 0x15, 0x10, 0x16, 0x4a, 0x04, 0x08, 0x1c, 0x10, 0x1d, 0x4a, 0x04, 0x08, 0x1d, 0x10,
	0x1e, 0x22, 0xae, 0x01, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x22, 0xc1, 0x06, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x41, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2d, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x55, 0x70, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4f, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b,
	0x73, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x1a, 0x45, 0x0a, 0x10, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x37, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c,
	0x10, 0x02, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04,
	0x08, 0x10, 0x10, 0x15, 0x22, 0xa0, 0x04, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x4a,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x04, 0xe8, 0xc7, 0x31,
	0x01, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe8, 0xc7, 0x31,
	0x01, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x5d, 0x0a,
	0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x44, 0x69, 0x73, 0x6b,
	0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x6f, 0x54, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x39, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x42, 0x5f, 0x0a, 0x1a, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x2e, 0x76, 0x31, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2f, 0x76,
	0x31, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_backup_v1_backup_proto_rawDescOnce sync.Once
	file_yandex_cloud_backup_v1_backup_proto_rawDescData = file_yandex_cloud_backup_v1_backup_proto_rawDesc
)

func file_yandex_cloud_backup_v1_backup_proto_rawDescGZIP() []byte {
	file_yandex_cloud_backup_v1_backup_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_backup_v1_backup_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_backup_v1_backup_proto_rawDescData)
	})
	return file_yandex_cloud_backup_v1_backup_proto_rawDescData
}

var file_yandex_cloud_backup_v1_backup_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_yandex_cloud_backup_v1_backup_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_yandex_cloud_backup_v1_backup_proto_goTypes = []interface{}{
	(Archive_EncryptionAlgorithm)(0),  // 0: yandex.cloud.backup.v1.Archive.EncryptionAlgorithm
	(Archive_Action)(0),               // 1: yandex.cloud.backup.v1.Archive.Action
	(Backup_Type)(0),                  // 2: yandex.cloud.backup.v1.Backup.Type
	(BackupFile_Type)(0),              // 3: yandex.cloud.backup.v1.BackupFile.Type
	(*Archive)(nil),                   // 4: yandex.cloud.backup.v1.Archive
	(*Volume)(nil),                    // 5: yandex.cloud.backup.v1.Volume
	(*Disk)(nil),                      // 6: yandex.cloud.backup.v1.Disk
	(*Backup)(nil),                    // 7: yandex.cloud.backup.v1.Backup
	(*BackupFile)(nil),                // 8: yandex.cloud.backup.v1.BackupFile
	(*Archive_ArchiveAttributes)(nil), // 9: yandex.cloud.backup.v1.Archive.ArchiveAttributes
	(*Backup_BackupAttributes)(nil),   // 10: yandex.cloud.backup.v1.Backup.BackupAttributes
	(*BackupFile_Actions)(nil),        // 11: yandex.cloud.backup.v1.BackupFile.Actions
	(Format)(0),                       // 12: yandex.cloud.backup.v1.Format
	(*timestamppb.Timestamp)(nil),     // 13: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),    // 14: google.protobuf.StringValue
}
var file_yandex_cloud_backup_v1_backup_proto_depIdxs = []int32{
	9,  // 0: yandex.cloud.backup.v1.Archive.attributes:type_name -> yandex.cloud.backup.v1.Archive.ArchiveAttributes
	12, // 1: yandex.cloud.backup.v1.Archive.format:type_name -> yandex.cloud.backup.v1.Format
	13, // 2: yandex.cloud.backup.v1.Archive.created_at:type_name -> google.protobuf.Timestamp
	13, // 3: yandex.cloud.backup.v1.Archive.updated_at:type_name -> google.protobuf.Timestamp
	13, // 4: yandex.cloud.backup.v1.Archive.last_backup_created_at:type_name -> google.protobuf.Timestamp
	13, // 5: yandex.cloud.backup.v1.Archive.last_seen_at:type_name -> google.protobuf.Timestamp
	0,  // 6: yandex.cloud.backup.v1.Archive.encryption_algorithm:type_name -> yandex.cloud.backup.v1.Archive.EncryptionAlgorithm
	1,  // 7: yandex.cloud.backup.v1.Archive.actions:type_name -> yandex.cloud.backup.v1.Archive.Action
	5,  // 8: yandex.cloud.backup.v1.Disk.volumes:type_name -> yandex.cloud.backup.v1.Volume
	13, // 9: yandex.cloud.backup.v1.Backup.created_at:type_name -> google.protobuf.Timestamp
	13, // 10: yandex.cloud.backup.v1.Backup.last_seen_at:type_name -> google.protobuf.Timestamp
	10, // 11: yandex.cloud.backup.v1.Backup.attributes:type_name -> yandex.cloud.backup.v1.Backup.BackupAttributes
	6,  // 12: yandex.cloud.backup.v1.Backup.disks:type_name -> yandex.cloud.backup.v1.Disk
	2,  // 13: yandex.cloud.backup.v1.Backup.type:type_name -> yandex.cloud.backup.v1.Backup.Type
	14, // 14: yandex.cloud.backup.v1.BackupFile.parent_id:type_name -> google.protobuf.StringValue
	3,  // 15: yandex.cloud.backup.v1.BackupFile.type:type_name -> yandex.cloud.backup.v1.BackupFile.Type
	11, // 16: yandex.cloud.backup.v1.BackupFile.actions:type_name -> yandex.cloud.backup.v1.BackupFile.Actions
	13, // 17: yandex.cloud.backup.v1.BackupFile.modified_at:type_name -> google.protobuf.Timestamp
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_yandex_cloud_backup_v1_backup_proto_init() }
func file_yandex_cloud_backup_v1_backup_proto_init() {
	if File_yandex_cloud_backup_v1_backup_proto != nil {
		return
	}
	file_yandex_cloud_backup_v1_policy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_backup_v1_backup_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Archive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_backup_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_backup_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_backup_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_backup_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_backup_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Archive_ArchiveAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_backup_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backup_BackupAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_backup_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupFile_Actions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_backup_v1_backup_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_backup_v1_backup_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_backup_v1_backup_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_backup_v1_backup_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_backup_v1_backup_proto_msgTypes,
	}.Build()
	File_yandex_cloud_backup_v1_backup_proto = out.File
	file_yandex_cloud_backup_v1_backup_proto_rawDesc = nil
	file_yandex_cloud_backup_v1_backup_proto_goTypes = nil
	file_yandex_cloud_backup_v1_backup_proto_depIdxs = nil
}
