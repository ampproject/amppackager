// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/backup/v1/policy.proto

package backup

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Format of the backup in policy. For backup locations that can be browsed
// with a file manager, the backup format determines the number of files and
// their extension.
type Format int32

const (
	Format_FORMAT_UNSPECIFIED Format = 0
	// A legacy backup format used in older versions. It's not recommended to use.
	Format_VERSION_11 Format = 1
	// A new format recommended in most cases for fast backup and recovery.
	Format_VERSION_12 Format = 2
	// Automatic version selection. Will be used version 12 unless the protection
	// plan (policy) appends backups to the ones created by earlier product
	// versions.
	Format_AUTO Format = 3
)

// Enum value maps for Format.
var (
	Format_name = map[int32]string{
		0: "FORMAT_UNSPECIFIED",
		1: "VERSION_11",
		2: "VERSION_12",
		3: "AUTO",
	}
	Format_value = map[string]int32{
		"FORMAT_UNSPECIFIED": 0,
		"VERSION_11":         1,
		"VERSION_12":         2,
		"AUTO":               3,
	}
)

func (x Format) Enum() *Format {
	p := new(Format)
	*p = x
	return p
}

func (x Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Format) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_policy_proto_enumTypes[0].Descriptor()
}

func (Format) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_policy_proto_enumTypes[0]
}

func (x Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Format.Descriptor instead.
func (Format) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{0}
}

// Compression rate of the backups.
type PolicySettings_Compression int32

const (
	PolicySettings_COMPRESSION_UNSPECIFIED PolicySettings_Compression = 0
	PolicySettings_NORMAL                  PolicySettings_Compression = 1
	PolicySettings_HIGH                    PolicySettings_Compression = 2
	PolicySettings_MAX                     PolicySettings_Compression = 3
	PolicySettings_OFF                     PolicySettings_Compression = 4
)

// Enum value maps for PolicySettings_Compression.
var (
	PolicySettings_Compression_name = map[int32]string{
		0: "COMPRESSION_UNSPECIFIED",
		1: "NORMAL",
		2: "HIGH",
		3: "MAX",
		4: "OFF",
	}
	PolicySettings_Compression_value = map[string]int32{
		"COMPRESSION_UNSPECIFIED": 0,
		"NORMAL":                  1,
		"HIGH":                    2,
		"MAX":                     3,
		"OFF":                     4,
	}
)

func (x PolicySettings_Compression) Enum() *PolicySettings_Compression {
	p := new(PolicySettings_Compression)
	*p = x
	return p
}

func (x PolicySettings_Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicySettings_Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_policy_proto_enumTypes[1].Descriptor()
}

func (PolicySettings_Compression) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_policy_proto_enumTypes[1]
}

func (x PolicySettings_Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicySettings_Compression.Descriptor instead.
func (PolicySettings_Compression) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 0}
}

type PolicySettings_RepeatePeriod int32

const (
	PolicySettings_REPEATE_PERIOD_UNSPECIFIED PolicySettings_RepeatePeriod = 0
	PolicySettings_HOURLY                     PolicySettings_RepeatePeriod = 1
	PolicySettings_DAILY                      PolicySettings_RepeatePeriod = 2
	PolicySettings_WEEKLY                     PolicySettings_RepeatePeriod = 3
	PolicySettings_MONTHLY                    PolicySettings_RepeatePeriod = 4
)

// Enum value maps for PolicySettings_RepeatePeriod.
var (
	PolicySettings_RepeatePeriod_name = map[int32]string{
		0: "REPEATE_PERIOD_UNSPECIFIED",
		1: "HOURLY",
		2: "DAILY",
		3: "WEEKLY",
		4: "MONTHLY",
	}
	PolicySettings_RepeatePeriod_value = map[string]int32{
		"REPEATE_PERIOD_UNSPECIFIED": 0,
		"HOURLY":                     1,
		"DAILY":                      2,
		"WEEKLY":                     3,
		"MONTHLY":                    4,
	}
)

func (x PolicySettings_RepeatePeriod) Enum() *PolicySettings_RepeatePeriod {
	p := new(PolicySettings_RepeatePeriod)
	*p = x
	return p
}

func (x PolicySettings_RepeatePeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicySettings_RepeatePeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_policy_proto_enumTypes[2].Descriptor()
}

func (PolicySettings_RepeatePeriod) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_policy_proto_enumTypes[2]
}

func (x PolicySettings_RepeatePeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicySettings_RepeatePeriod.Descriptor instead.
func (PolicySettings_RepeatePeriod) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 1}
}

type PolicySettings_Day int32

const (
	PolicySettings_DAY_UNSPECIFIED PolicySettings_Day = 0
	PolicySettings_MONDAY          PolicySettings_Day = 1
	PolicySettings_TUESDAY         PolicySettings_Day = 2
	PolicySettings_WEDNESDAY       PolicySettings_Day = 3
	PolicySettings_THURSDAY        PolicySettings_Day = 4
	PolicySettings_FRIDAY          PolicySettings_Day = 5
	PolicySettings_SATURDAY        PolicySettings_Day = 6
	PolicySettings_SUNDAY          PolicySettings_Day = 7
)

// Enum value maps for PolicySettings_Day.
var (
	PolicySettings_Day_name = map[int32]string{
		0: "DAY_UNSPECIFIED",
		1: "MONDAY",
		2: "TUESDAY",
		3: "WEDNESDAY",
		4: "THURSDAY",
		5: "FRIDAY",
		6: "SATURDAY",
		7: "SUNDAY",
	}
	PolicySettings_Day_value = map[string]int32{
		"DAY_UNSPECIFIED": 0,
		"MONDAY":          1,
		"TUESDAY":         2,
		"WEDNESDAY":       3,
		"THURSDAY":        4,
		"FRIDAY":          5,
		"SATURDAY":        6,
		"SUNDAY":          7,
	}
)

func (x PolicySettings_Day) Enum() *PolicySettings_Day {
	p := new(PolicySettings_Day)
	*p = x
	return p
}

func (x PolicySettings_Day) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicySettings_Day) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_policy_proto_enumTypes[3].Descriptor()
}

func (PolicySettings_Day) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_policy_proto_enumTypes[3]
}

func (x PolicySettings_Day) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicySettings_Day.Descriptor instead.
func (PolicySettings_Day) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 2}
}

type PolicySettings_ChangedBlockTracking int32

const (
	PolicySettings_CHANGED_BLOCK_TRACKING_UNSPECIFIED PolicySettings_ChangedBlockTracking = 0
	PolicySettings_USE_IF_ENABLED                     PolicySettings_ChangedBlockTracking = 1
	PolicySettings_ENABLE_AND_USE                     PolicySettings_ChangedBlockTracking = 2
	PolicySettings_DO_NOT_USE                         PolicySettings_ChangedBlockTracking = 3
)

// Enum value maps for PolicySettings_ChangedBlockTracking.
var (
	PolicySettings_ChangedBlockTracking_name = map[int32]string{
		0: "CHANGED_BLOCK_TRACKING_UNSPECIFIED",
		1: "USE_IF_ENABLED",
		2: "ENABLE_AND_USE",
		3: "DO_NOT_USE",
	}
	PolicySettings_ChangedBlockTracking_value = map[string]int32{
		"CHANGED_BLOCK_TRACKING_UNSPECIFIED": 0,
		"USE_IF_ENABLED":                     1,
		"ENABLE_AND_USE":                     2,
		"DO_NOT_USE":                         3,
	}
)

func (x PolicySettings_ChangedBlockTracking) Enum() *PolicySettings_ChangedBlockTracking {
	p := new(PolicySettings_ChangedBlockTracking)
	*p = x
	return p
}

func (x PolicySettings_ChangedBlockTracking) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicySettings_ChangedBlockTracking) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_policy_proto_enumTypes[4].Descriptor()
}

func (PolicySettings_ChangedBlockTracking) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_policy_proto_enumTypes[4]
}

func (x PolicySettings_ChangedBlockTracking) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicySettings_ChangedBlockTracking.Descriptor instead.
func (PolicySettings_ChangedBlockTracking) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 3}
}

type PolicySettings_Interval_Type int32

const (
	PolicySettings_Interval_TYPE_UNSPECIFIED PolicySettings_Interval_Type = 0
	PolicySettings_Interval_SECONDS          PolicySettings_Interval_Type = 1
	PolicySettings_Interval_MINUTES          PolicySettings_Interval_Type = 2
	PolicySettings_Interval_HOURS            PolicySettings_Interval_Type = 3
	PolicySettings_Interval_DAYS             PolicySettings_Interval_Type = 4
	PolicySettings_Interval_WEEKS            PolicySettings_Interval_Type = 5
	PolicySettings_Interval_MONTHS           PolicySettings_Interval_Type = 6
)

// Enum value maps for PolicySettings_Interval_Type.
var (
	PolicySettings_Interval_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "SECONDS",
		2: "MINUTES",
		3: "HOURS",
		4: "DAYS",
		5: "WEEKS",
		6: "MONTHS",
	}
	PolicySettings_Interval_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"SECONDS":          1,
		"MINUTES":          2,
		"HOURS":            3,
		"DAYS":             4,
		"WEEKS":            5,
		"MONTHS":           6,
	}
)

func (x PolicySettings_Interval_Type) Enum() *PolicySettings_Interval_Type {
	p := new(PolicySettings_Interval_Type)
	*p = x
	return p
}

func (x PolicySettings_Interval_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicySettings_Interval_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_policy_proto_enumTypes[5].Descriptor()
}

func (PolicySettings_Interval_Type) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_policy_proto_enumTypes[5]
}

func (x PolicySettings_Interval_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicySettings_Interval_Type.Descriptor instead.
func (PolicySettings_Interval_Type) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 0, 0}
}

type PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider int32

const (
	PolicySettings_VolumeShadowCopyServiceSettings_VSS_PROVIDER_UNSPECIFIED PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider = 0
	PolicySettings_VolumeShadowCopyServiceSettings_NATIVE                   PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider = 1
	PolicySettings_VolumeShadowCopyServiceSettings_TARGET_SYSTEM_DEFINED    PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider = 2
)

// Enum value maps for PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider.
var (
	PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider_name = map[int32]string{
		0: "VSS_PROVIDER_UNSPECIFIED",
		1: "NATIVE",
		2: "TARGET_SYSTEM_DEFINED",
	}
	PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider_value = map[string]int32{
		"VSS_PROVIDER_UNSPECIFIED": 0,
		"NATIVE":                   1,
		"TARGET_SYSTEM_DEFINED":    2,
	}
)

func (x PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider) Enum() *PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider {
	p := new(PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider)
	*p = x
	return p
}

func (x PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_policy_proto_enumTypes[6].Descriptor()
}

func (PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_policy_proto_enumTypes[6]
}

func (x PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider.Descriptor instead.
func (PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 3, 0}
}

// Scheme of backups.
type PolicySettings_Scheduling_Scheme int32

const (
	PolicySettings_Scheduling_SCHEME_UNSPECIFIED            PolicySettings_Scheduling_Scheme = 0
	PolicySettings_Scheduling_SIMPLE                        PolicySettings_Scheduling_Scheme = 1
	PolicySettings_Scheduling_ALWAYS_FULL                   PolicySettings_Scheduling_Scheme = 2
	PolicySettings_Scheduling_ALWAYS_INCREMENTAL            PolicySettings_Scheduling_Scheme = 3
	PolicySettings_Scheduling_WEEKLY_INCREMENTAL            PolicySettings_Scheduling_Scheme = 4
	PolicySettings_Scheduling_WEEKLY_FULL_DAILY_INCREMENTAL PolicySettings_Scheduling_Scheme = 5
	// Custom will require to specify schedules for full, differential
	// and incremental backups additionally.
	PolicySettings_Scheduling_CUSTOM PolicySettings_Scheduling_Scheme = 6
	PolicySettings_Scheduling_CDP    PolicySettings_Scheduling_Scheme = 7
)

// Enum value maps for PolicySettings_Scheduling_Scheme.
var (
	PolicySettings_Scheduling_Scheme_name = map[int32]string{
		0: "SCHEME_UNSPECIFIED",
		1: "SIMPLE",
		2: "ALWAYS_FULL",
		3: "ALWAYS_INCREMENTAL",
		4: "WEEKLY_INCREMENTAL",
		5: "WEEKLY_FULL_DAILY_INCREMENTAL",
		6: "CUSTOM",
		7: "CDP",
	}
	PolicySettings_Scheduling_Scheme_value = map[string]int32{
		"SCHEME_UNSPECIFIED":            0,
		"SIMPLE":                        1,
		"ALWAYS_FULL":                   2,
		"ALWAYS_INCREMENTAL":            3,
		"WEEKLY_INCREMENTAL":            4,
		"WEEKLY_FULL_DAILY_INCREMENTAL": 5,
		"CUSTOM":                        6,
		"CDP":                           7,
	}
)

func (x PolicySettings_Scheduling_Scheme) Enum() *PolicySettings_Scheduling_Scheme {
	p := new(PolicySettings_Scheduling_Scheme)
	*p = x
	return p
}

func (x PolicySettings_Scheduling_Scheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicySettings_Scheduling_Scheme) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_policy_proto_enumTypes[7].Descriptor()
}

func (PolicySettings_Scheduling_Scheme) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_policy_proto_enumTypes[7]
}

func (x PolicySettings_Scheduling_Scheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicySettings_Scheduling_Scheme.Descriptor instead.
func (PolicySettings_Scheduling_Scheme) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 8, 0}
}

type PolicySettings_Scheduling_BackupSet_Type int32

const (
	PolicySettings_Scheduling_BackupSet_TYPE_UNSPECIFIED  PolicySettings_Scheduling_BackupSet_Type = 0
	PolicySettings_Scheduling_BackupSet_TYPE_AUTO         PolicySettings_Scheduling_BackupSet_Type = 1
	PolicySettings_Scheduling_BackupSet_TYPE_FULL         PolicySettings_Scheduling_BackupSet_Type = 2
	PolicySettings_Scheduling_BackupSet_TYPE_INCREMENTAL  PolicySettings_Scheduling_BackupSet_Type = 3
	PolicySettings_Scheduling_BackupSet_TYPE_DIFFERENTIAL PolicySettings_Scheduling_BackupSet_Type = 4
)

// Enum value maps for PolicySettings_Scheduling_BackupSet_Type.
var (
	PolicySettings_Scheduling_BackupSet_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_AUTO",
		2: "TYPE_FULL",
		3: "TYPE_INCREMENTAL",
		4: "TYPE_DIFFERENTIAL",
	}
	PolicySettings_Scheduling_BackupSet_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":  0,
		"TYPE_AUTO":         1,
		"TYPE_FULL":         2,
		"TYPE_INCREMENTAL":  3,
		"TYPE_DIFFERENTIAL": 4,
	}
)

func (x PolicySettings_Scheduling_BackupSet_Type) Enum() *PolicySettings_Scheduling_BackupSet_Type {
	p := new(PolicySettings_Scheduling_BackupSet_Type)
	*p = x
	return p
}

func (x PolicySettings_Scheduling_BackupSet_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicySettings_Scheduling_BackupSet_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_policy_proto_enumTypes[8].Descriptor()
}

func (PolicySettings_Scheduling_BackupSet_Type) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_policy_proto_enumTypes[8]
}

func (x PolicySettings_Scheduling_BackupSet_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicySettings_Scheduling_BackupSet_Type.Descriptor instead.
func (PolicySettings_Scheduling_BackupSet_Type) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 8, 0, 0}
}

type PolicyApplication_Status int32

const (
	PolicyApplication_STATUS_UNSPECIFIED PolicyApplication_Status = 0
	// Application is applied and everything is OK.
	PolicyApplication_OK PolicyApplication_Status = 1
	// Application is currently running.
	PolicyApplication_RUNNING PolicyApplication_Status = 2
	// Application is disabled.
	PolicyApplication_DISABLED PolicyApplication_Status = 3
)

// Enum value maps for PolicyApplication_Status.
var (
	PolicyApplication_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "OK",
		2: "RUNNING",
		3: "DISABLED",
	}
	PolicyApplication_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"OK":                 1,
		"RUNNING":            2,
		"DISABLED":           3,
	}
)

func (x PolicyApplication_Status) Enum() *PolicyApplication_Status {
	p := new(PolicyApplication_Status)
	*p = x
	return p
}

func (x PolicyApplication_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyApplication_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_backup_v1_policy_proto_enumTypes[9].Descriptor()
}

func (PolicyApplication_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_backup_v1_policy_proto_enumTypes[9]
}

func (x PolicyApplication_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyApplication_Status.Descriptor instead.
func (PolicyApplication_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{2, 0}
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policy ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Policy name.
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// If this field is true, it means that the policy is enabled.
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Set of policy settings
	Settings *PolicySettings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	// ID of the folder that the policy belongs to.
	FolderId string `protobuf:"bytes,7,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{0}
}

func (x *Policy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Policy) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Policy) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Policy) GetSettings() *PolicySettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Policy) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

// Set of policy settings
type PolicySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Archive compression level.
	Compression PolicySettings_Compression `protobuf:"varint,1,opt,name=compression,proto3,enum=yandex.cloud.backup.v1.PolicySettings_Compression" json:"compression,omitempty"`
	// Format of the Acronis backup archive.
	Format Format `protobuf:"varint,2,opt,name=format,proto3,enum=yandex.cloud.backup.v1.Format" json:"format,omitempty"`
	// If true, snapshots of multiple volumes will be taken simultaneously.
	MultiVolumeSnapshottingEnabled bool `protobuf:"varint,3,opt,name=multi_volume_snapshotting_enabled,json=multiVolumeSnapshottingEnabled,proto3" json:"multi_volume_snapshotting_enabled,omitempty"`
	// If true, the file security settings will be preserved.
	PreserveFileSecuritySettings bool `protobuf:"varint,4,opt,name=preserve_file_security_settings,json=preserveFileSecuritySettings,proto3" json:"preserve_file_security_settings,omitempty"`
	// Configuration of retries on recoverable errors during the backup operations like reconnection to destination. No attempts to fix recoverable errors will be made if retry configuration is not set.
	Reattempts *PolicySettings_RetriesConfiguration `protobuf:"bytes,5,opt,name=reattempts,proto3" json:"reattempts,omitempty"`
	// If true, a user interaction will be avoided when possible. Equals to false if value is not specified.
	SilentModeEnabled bool `protobuf:"varint,6,opt,name=silent_mode_enabled,json=silentModeEnabled,proto3" json:"silent_mode_enabled,omitempty"`
	// Determines the size to split backups on. Splitting is not performed if value is not specified.
	Splitting *PolicySettings_Splitting `protobuf:"bytes,7,opt,name=splitting,proto3" json:"splitting,omitempty"`
	// Configuration of retries on errors during the creation of the virtual machine snapshot. No attempts to fix recoverable errors will be made if retry configuration is not set.
	VmSnapshotReattempts *PolicySettings_RetriesConfiguration `protobuf:"bytes,8,opt,name=vm_snapshot_reattempts,json=vmSnapshotReattempts,proto3" json:"vm_snapshot_reattempts,omitempty"`
	// Settings for the Volume Shadow Copy Service (VSS) provider. If not set, no VSS provider is used.
	Vss *PolicySettings_VolumeShadowCopyServiceSettings `protobuf:"bytes,9,opt,name=vss,proto3" json:"vss,omitempty"`
	// The archive properties.
	Archive *PolicySettings_ArchiveProperties `protobuf:"bytes,10,opt,name=archive,proto3" json:"archive,omitempty"`
	// Time windows for performance limitations of backup and storage maintenance operations.
	PerformanceWindow *PolicySettings_PerformanceWindow `protobuf:"bytes,11,opt,name=performance_window,json=performanceWindow,proto3" json:"performance_window,omitempty"`
	// Configuration of backup retention rules.
	Retention *PolicySettings_Retention `protobuf:"bytes,12,opt,name=retention,proto3" json:"retention,omitempty"`
	// Configuration of the backup schedule.
	Scheduling *PolicySettings_Scheduling `protobuf:"bytes,15,opt,name=scheduling,proto3" json:"scheduling,omitempty"`
	// A configuration of Changed Block Tracking (CBT).
	Cbt PolicySettings_ChangedBlockTracking `protobuf:"varint,16,opt,name=cbt,proto3,enum=yandex.cloud.backup.v1.PolicySettings_ChangedBlockTracking" json:"cbt,omitempty"`
	// If true, determines whether a file has changed by the file size and timestamp. Otherwise, the entire file contents are compared to those stored in the backup.
	FastBackupEnabled bool `protobuf:"varint,17,opt,name=fast_backup_enabled,json=fastBackupEnabled,proto3" json:"fast_backup_enabled,omitempty"`
	// If true, a quiesced snapshot of the virtual machine will be taken.
	QuiesceSnapshottingEnabled bool `protobuf:"varint,18,opt,name=quiesce_snapshotting_enabled,json=quiesceSnapshottingEnabled,proto3" json:"quiesce_snapshotting_enabled,omitempty"`
}

func (x *PolicySettings) Reset() {
	*x = PolicySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings) ProtoMessage() {}

func (x *PolicySettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings.ProtoReflect.Descriptor instead.
func (*PolicySettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1}
}

func (x *PolicySettings) GetCompression() PolicySettings_Compression {
	if x != nil {
		return x.Compression
	}
	return PolicySettings_COMPRESSION_UNSPECIFIED
}

func (x *PolicySettings) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_FORMAT_UNSPECIFIED
}

func (x *PolicySettings) GetMultiVolumeSnapshottingEnabled() bool {
	if x != nil {
		return x.MultiVolumeSnapshottingEnabled
	}
	return false
}

func (x *PolicySettings) GetPreserveFileSecuritySettings() bool {
	if x != nil {
		return x.PreserveFileSecuritySettings
	}
	return false
}

func (x *PolicySettings) GetReattempts() *PolicySettings_RetriesConfiguration {
	if x != nil {
		return x.Reattempts
	}
	return nil
}

func (x *PolicySettings) GetSilentModeEnabled() bool {
	if x != nil {
		return x.SilentModeEnabled
	}
	return false
}

func (x *PolicySettings) GetSplitting() *PolicySettings_Splitting {
	if x != nil {
		return x.Splitting
	}
	return nil
}

func (x *PolicySettings) GetVmSnapshotReattempts() *PolicySettings_RetriesConfiguration {
	if x != nil {
		return x.VmSnapshotReattempts
	}
	return nil
}

func (x *PolicySettings) GetVss() *PolicySettings_VolumeShadowCopyServiceSettings {
	if x != nil {
		return x.Vss
	}
	return nil
}

func (x *PolicySettings) GetArchive() *PolicySettings_ArchiveProperties {
	if x != nil {
		return x.Archive
	}
	return nil
}

func (x *PolicySettings) GetPerformanceWindow() *PolicySettings_PerformanceWindow {
	if x != nil {
		return x.PerformanceWindow
	}
	return nil
}

func (x *PolicySettings) GetRetention() *PolicySettings_Retention {
	if x != nil {
		return x.Retention
	}
	return nil
}

func (x *PolicySettings) GetScheduling() *PolicySettings_Scheduling {
	if x != nil {
		return x.Scheduling
	}
	return nil
}

func (x *PolicySettings) GetCbt() PolicySettings_ChangedBlockTracking {
	if x != nil {
		return x.Cbt
	}
	return PolicySettings_CHANGED_BLOCK_TRACKING_UNSPECIFIED
}

func (x *PolicySettings) GetFastBackupEnabled() bool {
	if x != nil {
		return x.FastBackupEnabled
	}
	return false
}

func (x *PolicySettings) GetQuiesceSnapshottingEnabled() bool {
	if x != nil {
		return x.QuiesceSnapshottingEnabled
	}
	return false
}

type PolicyApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policy ID.
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// Compute Cloud instance ID.
	ComputeInstanceId string                   `protobuf:"bytes,2,opt,name=compute_instance_id,json=computeInstanceId,proto3" json:"compute_instance_id,omitempty"`
	Enabled           bool                     `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Status            PolicyApplication_Status `protobuf:"varint,4,opt,name=status,proto3,enum=yandex.cloud.backup.v1.PolicyApplication_Status" json:"status,omitempty"`
	CreatedAt         *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// If true, then the policy is in in the process of binding to the instance.
	IsProcessing bool `protobuf:"varint,6,opt,name=is_processing,json=isProcessing,proto3" json:"is_processing,omitempty"`
}

func (x *PolicyApplication) Reset() {
	*x = PolicyApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyApplication) ProtoMessage() {}

func (x *PolicyApplication) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyApplication.ProtoReflect.Descriptor instead.
func (*PolicyApplication) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyApplication) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *PolicyApplication) GetComputeInstanceId() string {
	if x != nil {
		return x.ComputeInstanceId
	}
	return ""
}

func (x *PolicyApplication) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PolicyApplication) GetStatus() PolicyApplication_Status {
	if x != nil {
		return x.Status
	}
	return PolicyApplication_STATUS_UNSPECIFIED
}

func (x *PolicyApplication) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PolicyApplication) GetIsProcessing() bool {
	if x != nil {
		return x.IsProcessing
	}
	return false
}

type PolicySettings_Interval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A type of the interval.
	Type PolicySettings_Interval_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.backup.v1.PolicySettings_Interval_Type" json:"type,omitempty"`
	// The amount of value specified in `Interval.Type`.
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PolicySettings_Interval) Reset() {
	*x = PolicySettings_Interval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_Interval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_Interval) ProtoMessage() {}

func (x *PolicySettings_Interval) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_Interval.ProtoReflect.Descriptor instead.
func (*PolicySettings_Interval) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PolicySettings_Interval) GetType() PolicySettings_Interval_Type {
	if x != nil {
		return x.Type
	}
	return PolicySettings_Interval_TYPE_UNSPECIFIED
}

func (x *PolicySettings_Interval) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PolicySettings_RetriesConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, enables retry on errors.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// An interval between retry attempts.
	Interval *PolicySettings_Interval `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// Max number of retry attempts. Operation will be considered as failed
	// when max number of retry attempts is reached.
	MaxAttempts int64 `protobuf:"varint,3,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
}

func (x *PolicySettings_RetriesConfiguration) Reset() {
	*x = PolicySettings_RetriesConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_RetriesConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_RetriesConfiguration) ProtoMessage() {}

func (x *PolicySettings_RetriesConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_RetriesConfiguration.ProtoReflect.Descriptor instead.
func (*PolicySettings_RetriesConfiguration) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 1}
}

func (x *PolicySettings_RetriesConfiguration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PolicySettings_RetriesConfiguration) GetInterval() *PolicySettings_Interval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *PolicySettings_RetriesConfiguration) GetMaxAttempts() int64 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

type PolicySettings_Splitting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The size of split backup file in bytes.
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *PolicySettings_Splitting) Reset() {
	*x = PolicySettings_Splitting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_Splitting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_Splitting) ProtoMessage() {}

func (x *PolicySettings_Splitting) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_Splitting.ProtoReflect.Descriptor instead.
func (*PolicySettings_Splitting) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 2}
}

func (x *PolicySettings_Splitting) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Settings for Volume Shadow Copy Services which allows to notify
// VSS-aware applications that backup is about to start. This will
// ensure the consistent state of all data used by the applications.
type PolicySettings_VolumeShadowCopyServiceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, the VSS will be enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// A type of VSS provider to use in backup.
	Provider PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=yandex.cloud.backup.v1.PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider" json:"provider,omitempty"`
}

func (x *PolicySettings_VolumeShadowCopyServiceSettings) Reset() {
	*x = PolicySettings_VolumeShadowCopyServiceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_VolumeShadowCopyServiceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_VolumeShadowCopyServiceSettings) ProtoMessage() {}

func (x *PolicySettings_VolumeShadowCopyServiceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_VolumeShadowCopyServiceSettings.ProtoReflect.Descriptor instead.
func (*PolicySettings_VolumeShadowCopyServiceSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 3}
}

func (x *PolicySettings_VolumeShadowCopyServiceSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PolicySettings_VolumeShadowCopyServiceSettings) GetProvider() PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider {
	if x != nil {
		return x.Provider
	}
	return PolicySettings_VolumeShadowCopyServiceSettings_VSS_PROVIDER_UNSPECIFIED
}

type PolicySettings_ArchiveProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the generated archive. The name may use the following variables: `[Machine Name]`, `[Plan ID]`, `[Plan Name]`, `[Unique ID]`, `[Virtualization Server Type]`.
	// Default value: `[Machine Name]-[Plan ID]-[Unique ID]A`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PolicySettings_ArchiveProperties) Reset() {
	*x = PolicySettings_ArchiveProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_ArchiveProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_ArchiveProperties) ProtoMessage() {}

func (x *PolicySettings_ArchiveProperties) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_ArchiveProperties.ProtoReflect.Descriptor instead.
func (*PolicySettings_ArchiveProperties) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 4}
}

func (x *PolicySettings_ArchiveProperties) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PolicySettings_PerformanceWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, the time windows will be enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *PolicySettings_PerformanceWindow) Reset() {
	*x = PolicySettings_PerformanceWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_PerformanceWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_PerformanceWindow) ProtoMessage() {}

func (x *PolicySettings_PerformanceWindow) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_PerformanceWindow.ProtoReflect.Descriptor instead.
func (*PolicySettings_PerformanceWindow) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 5}
}

func (x *PolicySettings_PerformanceWindow) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type PolicySettings_TimeOfDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hours.
	Hour int64 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	// Minutes.
	Minute int64 `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *PolicySettings_TimeOfDay) Reset() {
	*x = PolicySettings_TimeOfDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_TimeOfDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_TimeOfDay) ProtoMessage() {}

func (x *PolicySettings_TimeOfDay) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_TimeOfDay.ProtoReflect.Descriptor instead.
func (*PolicySettings_TimeOfDay) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 6}
}

func (x *PolicySettings_TimeOfDay) GetHour() int64 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *PolicySettings_TimeOfDay) GetMinute() int64 {
	if x != nil {
		return x.Minute
	}
	return 0
}

type PolicySettings_Retention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of retention rules.
	Rules []*PolicySettings_Retention_RetentionRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	// If true, retention rules will be applied before backup is finished.
	BeforeBackup bool `protobuf:"varint,3,opt,name=before_backup,json=beforeBackup,proto3" json:"before_backup,omitempty"`
}

func (x *PolicySettings_Retention) Reset() {
	*x = PolicySettings_Retention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_Retention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_Retention) ProtoMessage() {}

func (x *PolicySettings_Retention) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_Retention.ProtoReflect.Descriptor instead.
func (*PolicySettings_Retention) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 7}
}

func (x *PolicySettings_Retention) GetRules() []*PolicySettings_Retention_RetentionRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *PolicySettings_Retention) GetBeforeBackup() bool {
	if x != nil {
		return x.BeforeBackup
	}
	return false
}

type PolicySettings_Scheduling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of schedules with backup sets that compose the whole scheme.
	BackupSets []*PolicySettings_Scheduling_BackupSet `protobuf:"bytes,1,rep,name=backup_sets,json=backupSets,proto3" json:"backup_sets,omitempty"`
	// If true, the backup schedule will be enabled.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Max number of backup processes allowed to run in parallel. Unlimited if not set.
	MaxParallelBackups int64 `protobuf:"varint,3,opt,name=max_parallel_backups,json=maxParallelBackups,proto3" json:"max_parallel_backups,omitempty"`
	// Configuration of the random delay between the execution of parallel tasks.
	RandMaxDelay *PolicySettings_Interval `protobuf:"bytes,4,opt,name=rand_max_delay,json=randMaxDelay,proto3" json:"rand_max_delay,omitempty"`
	// A backup scheme. Available values: `simple`, `always_full`, `always_incremental`, `weekly_incremental`, `weekly_full_daily_incremental`, `custom`, `cdp`.
	Scheme PolicySettings_Scheduling_Scheme `protobuf:"varint,5,opt,name=scheme,proto3,enum=yandex.cloud.backup.v1.PolicySettings_Scheduling_Scheme" json:"scheme,omitempty"`
	// A day of week to start weekly backups.
	WeeklyBackupDay PolicySettings_Day `protobuf:"varint,6,opt,name=weekly_backup_day,json=weeklyBackupDay,proto3,enum=yandex.cloud.backup.v1.PolicySettings_Day" json:"weekly_backup_day,omitempty"`
}

func (x *PolicySettings_Scheduling) Reset() {
	*x = PolicySettings_Scheduling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_Scheduling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_Scheduling) ProtoMessage() {}

func (x *PolicySettings_Scheduling) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_Scheduling.ProtoReflect.Descriptor instead.
func (*PolicySettings_Scheduling) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 8}
}

func (x *PolicySettings_Scheduling) GetBackupSets() []*PolicySettings_Scheduling_BackupSet {
	if x != nil {
		return x.BackupSets
	}
	return nil
}

func (x *PolicySettings_Scheduling) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PolicySettings_Scheduling) GetMaxParallelBackups() int64 {
	if x != nil {
		return x.MaxParallelBackups
	}
	return 0
}

func (x *PolicySettings_Scheduling) GetRandMaxDelay() *PolicySettings_Interval {
	if x != nil {
		return x.RandMaxDelay
	}
	return nil
}

func (x *PolicySettings_Scheduling) GetScheme() PolicySettings_Scheduling_Scheme {
	if x != nil {
		return x.Scheme
	}
	return PolicySettings_Scheduling_SCHEME_UNSPECIFIED
}

func (x *PolicySettings_Scheduling) GetWeeklyBackupDay() PolicySettings_Day {
	if x != nil {
		return x.WeeklyBackupDay
	}
	return PolicySettings_DAY_UNSPECIFIED
}

type PolicySettings_Retention_RetentionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of backup sets where rules are effective.
	BackupSet []PolicySettings_RepeatePeriod `protobuf:"varint,1,rep,packed,name=backup_set,json=backupSet,proto3,enum=yandex.cloud.backup.v1.PolicySettings_RepeatePeriod" json:"backup_set,omitempty"`
	// Types that are assignable to Condition:
	//
	//	*PolicySettings_Retention_RetentionRule_MaxAge
	//	*PolicySettings_Retention_RetentionRule_MaxCount
	Condition isPolicySettings_Retention_RetentionRule_Condition `protobuf_oneof:"condition"`
}

func (x *PolicySettings_Retention_RetentionRule) Reset() {
	*x = PolicySettings_Retention_RetentionRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_Retention_RetentionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_Retention_RetentionRule) ProtoMessage() {}

func (x *PolicySettings_Retention_RetentionRule) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_Retention_RetentionRule.ProtoReflect.Descriptor instead.
func (*PolicySettings_Retention_RetentionRule) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 7, 0}
}

func (x *PolicySettings_Retention_RetentionRule) GetBackupSet() []PolicySettings_RepeatePeriod {
	if x != nil {
		return x.BackupSet
	}
	return nil
}

func (m *PolicySettings_Retention_RetentionRule) GetCondition() isPolicySettings_Retention_RetentionRule_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *PolicySettings_Retention_RetentionRule) GetMaxAge() *PolicySettings_Interval {
	if x, ok := x.GetCondition().(*PolicySettings_Retention_RetentionRule_MaxAge); ok {
		return x.MaxAge
	}
	return nil
}

func (x *PolicySettings_Retention_RetentionRule) GetMaxCount() int64 {
	if x, ok := x.GetCondition().(*PolicySettings_Retention_RetentionRule_MaxCount); ok {
		return x.MaxCount
	}
	return 0
}

type isPolicySettings_Retention_RetentionRule_Condition interface {
	isPolicySettings_Retention_RetentionRule_Condition()
}

type PolicySettings_Retention_RetentionRule_MaxAge struct {
	MaxAge *PolicySettings_Interval `protobuf:"bytes,2,opt,name=max_age,json=maxAge,proto3,oneof"`
}

type PolicySettings_Retention_RetentionRule_MaxCount struct {
	MaxCount int64 `protobuf:"varint,3,opt,name=max_count,json=maxCount,proto3,oneof"`
}

func (*PolicySettings_Retention_RetentionRule_MaxAge) isPolicySettings_Retention_RetentionRule_Condition() {
}

func (*PolicySettings_Retention_RetentionRule_MaxCount) isPolicySettings_Retention_RetentionRule_Condition() {
}

type PolicySettings_Scheduling_BackupSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Setting:
	//
	//	*PolicySettings_Scheduling_BackupSet_Time_
	//	*PolicySettings_Scheduling_BackupSet_SinceLastExecTime_
	Setting isPolicySettings_Scheduling_BackupSet_Setting `protobuf_oneof:"setting"`
	// BackupSet type -- one of incr, full, differential or auto.
	// if custom scheme is used the BackupSet type should be specified
	Type PolicySettings_Scheduling_BackupSet_Type `protobuf:"varint,3,opt,name=type,proto3,enum=yandex.cloud.backup.v1.PolicySettings_Scheduling_BackupSet_Type" json:"type,omitempty"`
}

func (x *PolicySettings_Scheduling_BackupSet) Reset() {
	*x = PolicySettings_Scheduling_BackupSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_Scheduling_BackupSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_Scheduling_BackupSet) ProtoMessage() {}

func (x *PolicySettings_Scheduling_BackupSet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_Scheduling_BackupSet.ProtoReflect.Descriptor instead.
func (*PolicySettings_Scheduling_BackupSet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 8, 0}
}

func (m *PolicySettings_Scheduling_BackupSet) GetSetting() isPolicySettings_Scheduling_BackupSet_Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (x *PolicySettings_Scheduling_BackupSet) GetTime() *PolicySettings_Scheduling_BackupSet_Time {
	if x, ok := x.GetSetting().(*PolicySettings_Scheduling_BackupSet_Time_); ok {
		return x.Time
	}
	return nil
}

func (x *PolicySettings_Scheduling_BackupSet) GetSinceLastExecTime() *PolicySettings_Scheduling_BackupSet_SinceLastExecTime {
	if x, ok := x.GetSetting().(*PolicySettings_Scheduling_BackupSet_SinceLastExecTime_); ok {
		return x.SinceLastExecTime
	}
	return nil
}

func (x *PolicySettings_Scheduling_BackupSet) GetType() PolicySettings_Scheduling_BackupSet_Type {
	if x != nil {
		return x.Type
	}
	return PolicySettings_Scheduling_BackupSet_TYPE_UNSPECIFIED
}

type isPolicySettings_Scheduling_BackupSet_Setting interface {
	isPolicySettings_Scheduling_BackupSet_Setting()
}

type PolicySettings_Scheduling_BackupSet_Time_ struct {
	Time *PolicySettings_Scheduling_BackupSet_Time `protobuf:"bytes,1,opt,name=time,proto3,oneof"`
}

type PolicySettings_Scheduling_BackupSet_SinceLastExecTime_ struct {
	SinceLastExecTime *PolicySettings_Scheduling_BackupSet_SinceLastExecTime `protobuf:"bytes,2,opt,name=since_last_exec_time,json=sinceLastExecTime,proto3,oneof"`
}

func (*PolicySettings_Scheduling_BackupSet_Time_) isPolicySettings_Scheduling_BackupSet_Setting() {}

func (*PolicySettings_Scheduling_BackupSet_SinceLastExecTime_) isPolicySettings_Scheduling_BackupSet_Setting() {
}

type PolicySettings_Scheduling_BackupSet_Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Days in a week to perform a backup.
	Weekdays []PolicySettings_Day `protobuf:"varint,1,rep,packed,name=weekdays,proto3,enum=yandex.cloud.backup.v1.PolicySettings_Day" json:"weekdays,omitempty"`
	// Time to repeat the backup.
	RepeatAt []*PolicySettings_TimeOfDay `protobuf:"bytes,2,rep,name=repeat_at,json=repeatAt,proto3" json:"repeat_at,omitempty"`
	// Frequency of backup repetition.
	RepeatEvery *PolicySettings_Interval `protobuf:"bytes,3,opt,name=repeat_every,json=repeatEvery,proto3" json:"repeat_every,omitempty"`
	// The start time of the backup time interval.
	TimeFrom *PolicySettings_TimeOfDay `protobuf:"bytes,4,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	// The end time of the backup time interval.
	TimeTo *PolicySettings_TimeOfDay `protobuf:"bytes,5,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	// Days in a month to perform a backup.
	// Allowed values are from 1 to 31.
	Monthdays []int64 `protobuf:"varint,6,rep,packed,name=monthdays,proto3" json:"monthdays,omitempty"`
	// If set to true, last day of month will activate
	// the policy.
	IncludeLastDayOfMonth bool `protobuf:"varint,7,opt,name=include_last_day_of_month,json=includeLastDayOfMonth,proto3" json:"include_last_day_of_month,omitempty"`
	// Set of values. Allowed values form 1 to 12.
	Months []int64 `protobuf:"varint,8,rep,packed,name=months,proto3" json:"months,omitempty"`
	// Possible types: `REPEATE_PERIOD_UNSPECIFIED`, `HOURLY`, `DAILY`, `WEEKLY`, `MONTHLY`.
	Type PolicySettings_RepeatePeriod `protobuf:"varint,9,opt,name=type,proto3,enum=yandex.cloud.backup.v1.PolicySettings_RepeatePeriod" json:"type,omitempty"`
}

func (x *PolicySettings_Scheduling_BackupSet_Time) Reset() {
	*x = PolicySettings_Scheduling_BackupSet_Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_Scheduling_BackupSet_Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_Scheduling_BackupSet_Time) ProtoMessage() {}

func (x *PolicySettings_Scheduling_BackupSet_Time) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_Scheduling_BackupSet_Time.ProtoReflect.Descriptor instead.
func (*PolicySettings_Scheduling_BackupSet_Time) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 8, 0, 0}
}

func (x *PolicySettings_Scheduling_BackupSet_Time) GetWeekdays() []PolicySettings_Day {
	if x != nil {
		return x.Weekdays
	}
	return nil
}

func (x *PolicySettings_Scheduling_BackupSet_Time) GetRepeatAt() []*PolicySettings_TimeOfDay {
	if x != nil {
		return x.RepeatAt
	}
	return nil
}

func (x *PolicySettings_Scheduling_BackupSet_Time) GetRepeatEvery() *PolicySettings_Interval {
	if x != nil {
		return x.RepeatEvery
	}
	return nil
}

func (x *PolicySettings_Scheduling_BackupSet_Time) GetTimeFrom() *PolicySettings_TimeOfDay {
	if x != nil {
		return x.TimeFrom
	}
	return nil
}

func (x *PolicySettings_Scheduling_BackupSet_Time) GetTimeTo() *PolicySettings_TimeOfDay {
	if x != nil {
		return x.TimeTo
	}
	return nil
}

func (x *PolicySettings_Scheduling_BackupSet_Time) GetMonthdays() []int64 {
	if x != nil {
		return x.Monthdays
	}
	return nil
}

func (x *PolicySettings_Scheduling_BackupSet_Time) GetIncludeLastDayOfMonth() bool {
	if x != nil {
		return x.IncludeLastDayOfMonth
	}
	return false
}

func (x *PolicySettings_Scheduling_BackupSet_Time) GetMonths() []int64 {
	if x != nil {
		return x.Months
	}
	return nil
}

func (x *PolicySettings_Scheduling_BackupSet_Time) GetType() PolicySettings_RepeatePeriod {
	if x != nil {
		return x.Type
	}
	return PolicySettings_REPEATE_PERIOD_UNSPECIFIED
}

type PolicySettings_Scheduling_BackupSet_SinceLastExecTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interval between backups.
	Delay *PolicySettings_Interval `protobuf:"bytes,1,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *PolicySettings_Scheduling_BackupSet_SinceLastExecTime) Reset() {
	*x = PolicySettings_Scheduling_BackupSet_SinceLastExecTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySettings_Scheduling_BackupSet_SinceLastExecTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySettings_Scheduling_BackupSet_SinceLastExecTime) ProtoMessage() {}

func (x *PolicySettings_Scheduling_BackupSet_SinceLastExecTime) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_backup_v1_policy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySettings_Scheduling_BackupSet_SinceLastExecTime.ProtoReflect.Descriptor instead.
func (*PolicySettings_Scheduling_BackupSet_SinceLastExecTime) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP(), []int{1, 8, 0, 1}
}

func (x *PolicySettings_Scheduling_BackupSet_SinceLastExecTime) GetDelay() *PolicySettings_Interval {
	if x != nil {
		return x.Delay
	}
	return nil
}

var File_yandex_cloud_backup_v1_policy_proto protoreflect.FileDescriptor

var file_yandex_cloud_backup_v1_policy_proto_rawDesc = []byte{
	0x0a, 0x23, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x02,
	0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9d, 0x25, 0x0a, 0x0e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5a, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x1f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x61, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x09, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x77, 0x0a, 0x16, 0x76, 0x6d, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x14, 0x76, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x03, 0x76, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x70, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x03, 0x76, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x07, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x6d,
	0x0a, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x11, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x54, 0x0a,
	0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x03,
	0x63, 0x62, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x03, 0x63, 0x62,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x66, 0x61, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x1c, 0x71, 0x75, 0x69, 0x65, 0x73, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x71, 0x75, 0x69, 0x65, 0x73, 0x63, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x1a, 0xdc, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x06, 0xfa, 0xc7, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x62,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e,
	0x55, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x59, 0x53, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x57,
	0x45, 0x45, 0x4b, 0x53, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53,
	0x10, 0x06, 0x1a, 0xae, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06,
	0xfa, 0xc7, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x1a, 0x1f, 0x0a, 0x09, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x1a, 0x85, 0x02, 0x0a, 0x1f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x74, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x53, 0x53,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x0b, 0x56, 0x53, 0x53, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x53, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x27, 0x0a, 0x11,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x2d, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x1a, 0xf1, 0x02,
	0x0a, 0x09, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x1a, 0xe2, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x12, 0x4a, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x1a, 0xf4, 0x0d, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x64, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53,
	0x65, 0x74, 0x42, 0x06, 0x82, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x04, 0xe8, 0xc7, 0x31,
	0x01, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x56, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x77, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x61, 0x79, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x44, 0x61, 0x79, 0x1a, 0xf8, 0x08, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x53, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x14,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0xdd, 0x04, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x08, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x61, 0x79, 0x42, 0x04, 0x90, 0xc8, 0x31,
	0x01, 0x52, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x12, 0x4d,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66,
	0x44, 0x61, 0x79, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x49, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79,
	0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x22, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x42, 0x04, 0x90, 0xc8, 0x31,
	0x01, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73, 0x12, 0x38, 0x0a, 0x19,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79, 0x4f,
	0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x42, 0x04, 0x90, 0xc8, 0x31, 0x01, 0x52, 0x06, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x73, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0x60, 0x0a, 0x11, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52,
	0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x67, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x42,
	0x0f, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01,
	0x22, 0xa5, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x45, 0x45, 0x4b,
	0x4c, 0x59, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x04,
	0x12, 0x21, 0x0a, 0x1d, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41,
	0x4c, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x06, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x44, 0x50, 0x10, 0x07, 0x22, 0x52, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41,
	0x58, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x22, 0x5f, 0x0a, 0x0d,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1e, 0x0a,
	0x1a, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x48, 0x4f, 0x55, 0x52, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x04, 0x22, 0x76, 0x0a,
	0x03, 0x44, 0x61, 0x79, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x41, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x4e,
	0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x55, 0x45, 0x53, 0x44, 0x41, 0x59,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x41, 0x54, 0x55, 0x52, 0x44, 0x41, 0x59, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x4e,
	0x44, 0x41, 0x59, 0x10, 0x07, 0x22, 0x76, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a,
	0x22, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x46, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x22, 0xe9, 0x02, 0x0a, 0x11, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x22, 0x43, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x31, 0x31, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x31, 0x32, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10,
	0x03, 0x42, 0x5f, 0x0a, 0x1a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x5a,
	0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_backup_v1_policy_proto_rawDescOnce sync.Once
	file_yandex_cloud_backup_v1_policy_proto_rawDescData = file_yandex_cloud_backup_v1_policy_proto_rawDesc
)

func file_yandex_cloud_backup_v1_policy_proto_rawDescGZIP() []byte {
	file_yandex_cloud_backup_v1_policy_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_backup_v1_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_backup_v1_policy_proto_rawDescData)
	})
	return file_yandex_cloud_backup_v1_policy_proto_rawDescData
}

var file_yandex_cloud_backup_v1_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_yandex_cloud_backup_v1_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_yandex_cloud_backup_v1_policy_proto_goTypes = []interface{}{
	(Format)(0),                                                     // 0: yandex.cloud.backup.v1.Format
	(PolicySettings_Compression)(0),                                 // 1: yandex.cloud.backup.v1.PolicySettings.Compression
	(PolicySettings_RepeatePeriod)(0),                               // 2: yandex.cloud.backup.v1.PolicySettings.RepeatePeriod
	(PolicySettings_Day)(0),                                         // 3: yandex.cloud.backup.v1.PolicySettings.Day
	(PolicySettings_ChangedBlockTracking)(0),                        // 4: yandex.cloud.backup.v1.PolicySettings.ChangedBlockTracking
	(PolicySettings_Interval_Type)(0),                               // 5: yandex.cloud.backup.v1.PolicySettings.Interval.Type
	(PolicySettings_VolumeShadowCopyServiceSettings_VSSProvider)(0), // 6: yandex.cloud.backup.v1.PolicySettings.VolumeShadowCopyServiceSettings.VSSProvider
	(PolicySettings_Scheduling_Scheme)(0),                           // 7: yandex.cloud.backup.v1.PolicySettings.Scheduling.Scheme
	(PolicySettings_Scheduling_BackupSet_Type)(0),                   // 8: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.Type
	(PolicyApplication_Status)(0),                                   // 9: yandex.cloud.backup.v1.PolicyApplication.Status
	(*Policy)(nil),                                                  // 10: yandex.cloud.backup.v1.Policy
	(*PolicySettings)(nil),                                          // 11: yandex.cloud.backup.v1.PolicySettings
	(*PolicyApplication)(nil),                                       // 12: yandex.cloud.backup.v1.PolicyApplication
	(*PolicySettings_Interval)(nil),                                 // 13: yandex.cloud.backup.v1.PolicySettings.Interval
	(*PolicySettings_RetriesConfiguration)(nil),                     // 14: yandex.cloud.backup.v1.PolicySettings.RetriesConfiguration
	(*PolicySettings_Splitting)(nil),                                // 15: yandex.cloud.backup.v1.PolicySettings.Splitting
	(*PolicySettings_VolumeShadowCopyServiceSettings)(nil),          // 16: yandex.cloud.backup.v1.PolicySettings.VolumeShadowCopyServiceSettings
	(*PolicySettings_ArchiveProperties)(nil),                        // 17: yandex.cloud.backup.v1.PolicySettings.ArchiveProperties
	(*PolicySettings_PerformanceWindow)(nil),                        // 18: yandex.cloud.backup.v1.PolicySettings.PerformanceWindow
	(*PolicySettings_TimeOfDay)(nil),                                // 19: yandex.cloud.backup.v1.PolicySettings.TimeOfDay
	(*PolicySettings_Retention)(nil),                                // 20: yandex.cloud.backup.v1.PolicySettings.Retention
	(*PolicySettings_Scheduling)(nil),                               // 21: yandex.cloud.backup.v1.PolicySettings.Scheduling
	(*PolicySettings_Retention_RetentionRule)(nil),                  // 22: yandex.cloud.backup.v1.PolicySettings.Retention.RetentionRule
	(*PolicySettings_Scheduling_BackupSet)(nil),                     // 23: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet
	(*PolicySettings_Scheduling_BackupSet_Time)(nil),                // 24: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.Time
	(*PolicySettings_Scheduling_BackupSet_SinceLastExecTime)(nil),   // 25: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.SinceLastExecTime
	(*timestamppb.Timestamp)(nil),                                   // 26: google.protobuf.Timestamp
}
var file_yandex_cloud_backup_v1_policy_proto_depIdxs = []int32{
	26, // 0: yandex.cloud.backup.v1.Policy.created_at:type_name -> google.protobuf.Timestamp
	26, // 1: yandex.cloud.backup.v1.Policy.updated_at:type_name -> google.protobuf.Timestamp
	11, // 2: yandex.cloud.backup.v1.Policy.settings:type_name -> yandex.cloud.backup.v1.PolicySettings
	1,  // 3: yandex.cloud.backup.v1.PolicySettings.compression:type_name -> yandex.cloud.backup.v1.PolicySettings.Compression
	0,  // 4: yandex.cloud.backup.v1.PolicySettings.format:type_name -> yandex.cloud.backup.v1.Format
	14, // 5: yandex.cloud.backup.v1.PolicySettings.reattempts:type_name -> yandex.cloud.backup.v1.PolicySettings.RetriesConfiguration
	15, // 6: yandex.cloud.backup.v1.PolicySettings.splitting:type_name -> yandex.cloud.backup.v1.PolicySettings.Splitting
	14, // 7: yandex.cloud.backup.v1.PolicySettings.vm_snapshot_reattempts:type_name -> yandex.cloud.backup.v1.PolicySettings.RetriesConfiguration
	16, // 8: yandex.cloud.backup.v1.PolicySettings.vss:type_name -> yandex.cloud.backup.v1.PolicySettings.VolumeShadowCopyServiceSettings
	17, // 9: yandex.cloud.backup.v1.PolicySettings.archive:type_name -> yandex.cloud.backup.v1.PolicySettings.ArchiveProperties
	18, // 10: yandex.cloud.backup.v1.PolicySettings.performance_window:type_name -> yandex.cloud.backup.v1.PolicySettings.PerformanceWindow
	20, // 11: yandex.cloud.backup.v1.PolicySettings.retention:type_name -> yandex.cloud.backup.v1.PolicySettings.Retention
	21, // 12: yandex.cloud.backup.v1.PolicySettings.scheduling:type_name -> yandex.cloud.backup.v1.PolicySettings.Scheduling
	4,  // 13: yandex.cloud.backup.v1.PolicySettings.cbt:type_name -> yandex.cloud.backup.v1.PolicySettings.ChangedBlockTracking
	9,  // 14: yandex.cloud.backup.v1.PolicyApplication.status:type_name -> yandex.cloud.backup.v1.PolicyApplication.Status
	26, // 15: yandex.cloud.backup.v1.PolicyApplication.created_at:type_name -> google.protobuf.Timestamp
	5,  // 16: yandex.cloud.backup.v1.PolicySettings.Interval.type:type_name -> yandex.cloud.backup.v1.PolicySettings.Interval.Type
	13, // 17: yandex.cloud.backup.v1.PolicySettings.RetriesConfiguration.interval:type_name -> yandex.cloud.backup.v1.PolicySettings.Interval
	6,  // 18: yandex.cloud.backup.v1.PolicySettings.VolumeShadowCopyServiceSettings.provider:type_name -> yandex.cloud.backup.v1.PolicySettings.VolumeShadowCopyServiceSettings.VSSProvider
	22, // 19: yandex.cloud.backup.v1.PolicySettings.Retention.rules:type_name -> yandex.cloud.backup.v1.PolicySettings.Retention.RetentionRule
	23, // 20: yandex.cloud.backup.v1.PolicySettings.Scheduling.backup_sets:type_name -> yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet
	13, // 21: yandex.cloud.backup.v1.PolicySettings.Scheduling.rand_max_delay:type_name -> yandex.cloud.backup.v1.PolicySettings.Interval
	7,  // 22: yandex.cloud.backup.v1.PolicySettings.Scheduling.scheme:type_name -> yandex.cloud.backup.v1.PolicySettings.Scheduling.Scheme
	3,  // 23: yandex.cloud.backup.v1.PolicySettings.Scheduling.weekly_backup_day:type_name -> yandex.cloud.backup.v1.PolicySettings.Day
	2,  // 24: yandex.cloud.backup.v1.PolicySettings.Retention.RetentionRule.backup_set:type_name -> yandex.cloud.backup.v1.PolicySettings.RepeatePeriod
	13, // 25: yandex.cloud.backup.v1.PolicySettings.Retention.RetentionRule.max_age:type_name -> yandex.cloud.backup.v1.PolicySettings.Interval
	24, // 26: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.time:type_name -> yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.Time
	25, // 27: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.since_last_exec_time:type_name -> yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.SinceLastExecTime
	8,  // 28: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.type:type_name -> yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.Type
	3,  // 29: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.Time.weekdays:type_name -> yandex.cloud.backup.v1.PolicySettings.Day
	19, // 30: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.Time.repeat_at:type_name -> yandex.cloud.backup.v1.PolicySettings.TimeOfDay
	13, // 31: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.Time.repeat_every:type_name -> yandex.cloud.backup.v1.PolicySettings.Interval
	19, // 32: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.Time.time_from:type_name -> yandex.cloud.backup.v1.PolicySettings.TimeOfDay
	19, // 33: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.Time.time_to:type_name -> yandex.cloud.backup.v1.PolicySettings.TimeOfDay
	2,  // 34: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.Time.type:type_name -> yandex.cloud.backup.v1.PolicySettings.RepeatePeriod
	13, // 35: yandex.cloud.backup.v1.PolicySettings.Scheduling.BackupSet.SinceLastExecTime.delay:type_name -> yandex.cloud.backup.v1.PolicySettings.Interval
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_yandex_cloud_backup_v1_policy_proto_init() }
func file_yandex_cloud_backup_v1_policy_proto_init() {
	if File_yandex_cloud_backup_v1_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_Interval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_RetriesConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_Splitting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_VolumeShadowCopyServiceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_ArchiveProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_PerformanceWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_TimeOfDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_Retention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_Scheduling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_Retention_RetentionRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_Scheduling_BackupSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_Scheduling_BackupSet_Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_backup_v1_policy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySettings_Scheduling_BackupSet_SinceLastExecTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_backup_v1_policy_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*PolicySettings_Retention_RetentionRule_MaxAge)(nil),
		(*PolicySettings_Retention_RetentionRule_MaxCount)(nil),
	}
	file_yandex_cloud_backup_v1_policy_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*PolicySettings_Scheduling_BackupSet_Time_)(nil),
		(*PolicySettings_Scheduling_BackupSet_SinceLastExecTime_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_backup_v1_policy_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_backup_v1_policy_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_backup_v1_policy_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_backup_v1_policy_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_backup_v1_policy_proto_msgTypes,
	}.Build()
	File_yandex_cloud_backup_v1_policy_proto = out.File
	file_yandex_cloud_backup_v1_policy_proto_rawDesc = nil
	file_yandex_cloud_backup_v1_policy_proto_goTypes = nil
	file_yandex_cloud_backup_v1_policy_proto_depIdxs = nil
}
