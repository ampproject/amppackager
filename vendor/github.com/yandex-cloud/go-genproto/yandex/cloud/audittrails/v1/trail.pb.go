// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/audittrails/v1/trail.proto

package audittrails

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Trail_Status int32

const (
	Trail_STATUS_UNSPECIFIED Trail_Status = 0
	// The trail is active and Audit events are processed
	Trail_ACTIVE Trail_Status = 1
	// The trail configuration has issues that are preventing Audit Trails from delivering events
	Trail_ERROR Trail_Status = 2
	// The trail is being deleted
	Trail_DELETED Trail_Status = 3
)

// Enum value maps for Trail_Status.
var (
	Trail_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "ACTIVE",
		2: "ERROR",
		3: "DELETED",
	}
	Trail_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"ACTIVE":             1,
		"ERROR":              2,
		"DELETED":            3,
	}
)

func (x Trail_Status) Enum() *Trail_Status {
	p := new(Trail_Status)
	*p = x
	return p
}

func (x Trail_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trail_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_audittrails_v1_trail_proto_enumTypes[0].Descriptor()
}

func (Trail_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_audittrails_v1_trail_proto_enumTypes[0]
}

func (x Trail_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trail_Status.Descriptor instead.
func (Trail_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 0}
}

type Trail_EventCategoryFilter int32

const (
	Trail_EVENT_CATEGORY_FILTER_UNSPECIFIED Trail_EventCategoryFilter = 0
	// The events that are generated during the interaction with the service's resources
	Trail_CONTROL_PLANE Trail_EventCategoryFilter = 1
	// Events that are generated during interaction with data within the service's resources
	Trail_DATA_PLANE Trail_EventCategoryFilter = 2
)

// Enum value maps for Trail_EventCategoryFilter.
var (
	Trail_EventCategoryFilter_name = map[int32]string{
		0: "EVENT_CATEGORY_FILTER_UNSPECIFIED",
		1: "CONTROL_PLANE",
		2: "DATA_PLANE",
	}
	Trail_EventCategoryFilter_value = map[string]int32{
		"EVENT_CATEGORY_FILTER_UNSPECIFIED": 0,
		"CONTROL_PLANE":                     1,
		"DATA_PLANE":                        2,
	}
)

func (x Trail_EventCategoryFilter) Enum() *Trail_EventCategoryFilter {
	p := new(Trail_EventCategoryFilter)
	*p = x
	return p
}

func (x Trail_EventCategoryFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trail_EventCategoryFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_audittrails_v1_trail_proto_enumTypes[1].Descriptor()
}

func (Trail_EventCategoryFilter) Type() protoreflect.EnumType {
	return &file_yandex_cloud_audittrails_v1_trail_proto_enumTypes[1]
}

func (x Trail_EventCategoryFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trail_EventCategoryFilter.Descriptor instead.
func (Trail_EventCategoryFilter) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 1}
}

type Trail_EventAccessTypeFilter int32

const (
	Trail_EVENT_ACCESS_TYPE_FILTER_UNSPECIFIED Trail_EventAccessTypeFilter = 0
	// Events for operations that do perform some modification
	Trail_WRITE Trail_EventAccessTypeFilter = 1
	// Events for operations that do not perform any modifications
	Trail_READ Trail_EventAccessTypeFilter = 2
)

// Enum value maps for Trail_EventAccessTypeFilter.
var (
	Trail_EventAccessTypeFilter_name = map[int32]string{
		0: "EVENT_ACCESS_TYPE_FILTER_UNSPECIFIED",
		1: "WRITE",
		2: "READ",
	}
	Trail_EventAccessTypeFilter_value = map[string]int32{
		"EVENT_ACCESS_TYPE_FILTER_UNSPECIFIED": 0,
		"WRITE":                                1,
		"READ":                                 2,
	}
)

func (x Trail_EventAccessTypeFilter) Enum() *Trail_EventAccessTypeFilter {
	p := new(Trail_EventAccessTypeFilter)
	*p = x
	return p
}

func (x Trail_EventAccessTypeFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trail_EventAccessTypeFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_audittrails_v1_trail_proto_enumTypes[2].Descriptor()
}

func (Trail_EventAccessTypeFilter) Type() protoreflect.EnumType {
	return &file_yandex_cloud_audittrails_v1_trail_proto_enumTypes[2]
}

func (x Trail_EventAccessTypeFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trail_EventAccessTypeFilter.Descriptor instead.
func (Trail_EventAccessTypeFilter) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 2}
}

// Trail describes the filtering and destination configuration of the process of sending Audit events
type Trail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the trail
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the folder that the trail belongs to
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The timestamp for the creation operation
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The timestamp of the last update operation
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Name of the trail
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the trail
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels of the trail as `key:value` pairs. Maximum 64 per key
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Destination configuration of the trail
	Destination *Trail_Destination `protobuf:"bytes,8,opt,name=destination,proto3" json:"destination,omitempty"`
	// Service account ID of the trail
	ServiceAccountId string `protobuf:"bytes,9,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Status of the trail
	Status Trail_Status `protobuf:"varint,10,opt,name=status,proto3,enum=yandex.cloud.audittrails.v1.Trail_Status" json:"status,omitempty"`
	// Filtering configuration of the trail
	// deprecated: use filtering_policy instead
	//
	// Deprecated: Marked as deprecated in yandex/cloud/audittrails/v1/trail.proto.
	Filter *Trail_Filter `protobuf:"bytes,11,opt,name=filter,proto3" json:"filter,omitempty"`
	// Current error message of the trail. Empty in case if the trail is active
	StatusErrorMessage string `protobuf:"bytes,12,opt,name=status_error_message,json=statusErrorMessage,proto3" json:"status_error_message,omitempty"`
	// ID of the cloud that the trail belongs to
	CloudId string `protobuf:"bytes,14,opt,name=cloud_id,json=cloudId,proto3" json:"cloud_id,omitempty"`
	// Event filtering policy
	// Describes which groups of events will be sent and which resources will be monitored
	FilteringPolicy *Trail_FilteringPolicy `protobuf:"bytes,15,opt,name=filtering_policy,json=filteringPolicy,proto3" json:"filtering_policy,omitempty"`
}

func (x *Trail) Reset() {
	*x = Trail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail) ProtoMessage() {}

func (x *Trail) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail.ProtoReflect.Descriptor instead.
func (*Trail) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0}
}

func (x *Trail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trail) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *Trail) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Trail) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Trail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Trail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Trail) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Trail) GetDestination() *Trail_Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Trail) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *Trail) GetStatus() Trail_Status {
	if x != nil {
		return x.Status
	}
	return Trail_STATUS_UNSPECIFIED
}

// Deprecated: Marked as deprecated in yandex/cloud/audittrails/v1/trail.proto.
func (x *Trail) GetFilter() *Trail_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Trail) GetStatusErrorMessage() string {
	if x != nil {
		return x.StatusErrorMessage
	}
	return ""
}

func (x *Trail) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *Trail) GetFilteringPolicy() *Trail_FilteringPolicy {
	if x != nil {
		return x.FilteringPolicy
	}
	return nil
}

type Trail_Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Destination:
	//
	//	*Trail_Destination_ObjectStorage
	//	*Trail_Destination_CloudLogging
	//	*Trail_Destination_DataStream
	Destination isTrail_Destination_Destination `protobuf_oneof:"destination"`
}

func (x *Trail_Destination) Reset() {
	*x = Trail_Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_Destination) ProtoMessage() {}

func (x *Trail_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_Destination.ProtoReflect.Descriptor instead.
func (*Trail_Destination) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Trail_Destination) GetDestination() isTrail_Destination_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *Trail_Destination) GetObjectStorage() *Trail_ObjectStorage {
	if x, ok := x.GetDestination().(*Trail_Destination_ObjectStorage); ok {
		return x.ObjectStorage
	}
	return nil
}

func (x *Trail_Destination) GetCloudLogging() *Trail_CloudLogging {
	if x, ok := x.GetDestination().(*Trail_Destination_CloudLogging); ok {
		return x.CloudLogging
	}
	return nil
}

func (x *Trail_Destination) GetDataStream() *Trail_DataStream {
	if x, ok := x.GetDestination().(*Trail_Destination_DataStream); ok {
		return x.DataStream
	}
	return nil
}

type isTrail_Destination_Destination interface {
	isTrail_Destination_Destination()
}

type Trail_Destination_ObjectStorage struct {
	// Configuration for event delivery to Object Storage
	//
	// Uploaded objects will have prefix <trail_id>/ by default
	ObjectStorage *Trail_ObjectStorage `protobuf:"bytes,1,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

type Trail_Destination_CloudLogging struct {
	// Configuration for event delivery to Cloud Logging
	CloudLogging *Trail_CloudLogging `protobuf:"bytes,3,opt,name=cloud_logging,json=cloudLogging,proto3,oneof"`
}

type Trail_Destination_DataStream struct {
	// Configuration for event delivery to YDS
	DataStream *Trail_DataStream `protobuf:"bytes,4,opt,name=data_stream,json=dataStream,proto3,oneof"`
}

func (*Trail_Destination_ObjectStorage) isTrail_Destination_Destination() {}

func (*Trail_Destination_CloudLogging) isTrail_Destination_Destination() {}

func (*Trail_Destination_DataStream) isTrail_Destination_Destination() {}

type Trail_ObjectStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the destination bucket
	BucketId string `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// Prefix for exported objects. Optional
	// If specified, uploaded objects will have prefix <object_prefix>/<trail_id>/
	ObjectPrefix string `protobuf:"bytes,2,opt,name=object_prefix,json=objectPrefix,proto3" json:"object_prefix,omitempty"`
}

func (x *Trail_ObjectStorage) Reset() {
	*x = Trail_ObjectStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_ObjectStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_ObjectStorage) ProtoMessage() {}

func (x *Trail_ObjectStorage) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_ObjectStorage.ProtoReflect.Descriptor instead.
func (*Trail_ObjectStorage) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Trail_ObjectStorage) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *Trail_ObjectStorage) GetObjectPrefix() string {
	if x != nil {
		return x.ObjectPrefix
	}
	return ""
}

type Trail_CloudLogging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Destination:
	//
	//	*Trail_CloudLogging_LogGroupId
	Destination isTrail_CloudLogging_Destination `protobuf_oneof:"destination"`
}

func (x *Trail_CloudLogging) Reset() {
	*x = Trail_CloudLogging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_CloudLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_CloudLogging) ProtoMessage() {}

func (x *Trail_CloudLogging) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_CloudLogging.ProtoReflect.Descriptor instead.
func (*Trail_CloudLogging) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 3}
}

func (m *Trail_CloudLogging) GetDestination() isTrail_CloudLogging_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *Trail_CloudLogging) GetLogGroupId() string {
	if x, ok := x.GetDestination().(*Trail_CloudLogging_LogGroupId); ok {
		return x.LogGroupId
	}
	return ""
}

type isTrail_CloudLogging_Destination interface {
	isTrail_CloudLogging_Destination()
}

type Trail_CloudLogging_LogGroupId struct {
	// ID of the Cloud Logging destination group
	LogGroupId string `protobuf:"bytes,1,opt,name=log_group_id,json=logGroupId,proto3,oneof"`
}

func (*Trail_CloudLogging_LogGroupId) isTrail_CloudLogging_Destination() {}

type Trail_DataStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the database hosting the destination YDS
	DatabaseId string `protobuf:"bytes,1,opt,name=database_id,json=databaseId,proto3" json:"database_id,omitempty"`
	// Name of the destination YDS
	StreamName string `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
}

func (x *Trail_DataStream) Reset() {
	*x = Trail_DataStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_DataStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_DataStream) ProtoMessage() {}

func (x *Trail_DataStream) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_DataStream.ProtoReflect.Descriptor instead.
func (*Trail_DataStream) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Trail_DataStream) GetDatabaseId() string {
	if x != nil {
		return x.DatabaseId
	}
	return ""
}

func (x *Trail_DataStream) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

type Trail_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration of default events gathering for the trail
	// If not specified, default events won't be gathered for the trail
	PathFilter *Trail_PathFilter `protobuf:"bytes,1,opt,name=path_filter,json=pathFilter,proto3" json:"path_filter,omitempty"`
	// Configuration of additional events gathering from specific services
	EventFilter *Trail_EventFilter `protobuf:"bytes,2,opt,name=event_filter,json=eventFilter,proto3" json:"event_filter,omitempty"`
}

func (x *Trail_Filter) Reset() {
	*x = Trail_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_Filter) ProtoMessage() {}

func (x *Trail_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_Filter.ProtoReflect.Descriptor instead.
func (*Trail_Filter) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Trail_Filter) GetPathFilter() *Trail_PathFilter {
	if x != nil {
		return x.PathFilter
	}
	return nil
}

func (x *Trail_Filter) GetEventFilter() *Trail_EventFilter {
	if x != nil {
		return x.EventFilter
	}
	return nil
}

type Trail_PathFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root element of the resource path filter for the trail
	// Resource described in that filter node must contain the trail itself
	Root *Trail_PathFilterElement `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *Trail_PathFilter) Reset() {
	*x = Trail_PathFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_PathFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_PathFilter) ProtoMessage() {}

func (x *Trail_PathFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_PathFilter.ProtoReflect.Descriptor instead.
func (*Trail_PathFilter) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Trail_PathFilter) GetRoot() *Trail_PathFilterElement {
	if x != nil {
		return x.Root
	}
	return nil
}

type Trail_PathFilterElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Element:
	//
	//	*Trail_PathFilterElement_AnyFilter
	//	*Trail_PathFilterElement_SomeFilter
	Element isTrail_PathFilterElement_Element `protobuf_oneof:"element"`
}

func (x *Trail_PathFilterElement) Reset() {
	*x = Trail_PathFilterElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_PathFilterElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_PathFilterElement) ProtoMessage() {}

func (x *Trail_PathFilterElement) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_PathFilterElement.ProtoReflect.Descriptor instead.
func (*Trail_PathFilterElement) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 7}
}

func (m *Trail_PathFilterElement) GetElement() isTrail_PathFilterElement_Element {
	if m != nil {
		return m.Element
	}
	return nil
}

func (x *Trail_PathFilterElement) GetAnyFilter() *Trail_PathFilterElementAny {
	if x, ok := x.GetElement().(*Trail_PathFilterElement_AnyFilter); ok {
		return x.AnyFilter
	}
	return nil
}

func (x *Trail_PathFilterElement) GetSomeFilter() *Trail_PathFilterElementSome {
	if x, ok := x.GetElement().(*Trail_PathFilterElement_SomeFilter); ok {
		return x.SomeFilter
	}
	return nil
}

type isTrail_PathFilterElement_Element interface {
	isTrail_PathFilterElement_Element()
}

type Trail_PathFilterElement_AnyFilter struct {
	// Filter element with ANY type. If used, configures the trail to gather any events from the resource
	AnyFilter *Trail_PathFilterElementAny `protobuf:"bytes,1,opt,name=any_filter,json=anyFilter,proto3,oneof"`
}

type Trail_PathFilterElement_SomeFilter struct {
	// Filter element with SOME type. If used, configures the trail to gather some of the events from the resource
	SomeFilter *Trail_PathFilterElementSome `protobuf:"bytes,2,opt,name=some_filter,json=someFilter,proto3,oneof"`
}

func (*Trail_PathFilterElement_AnyFilter) isTrail_PathFilterElement_Element() {}

func (*Trail_PathFilterElement_SomeFilter) isTrail_PathFilterElement_Element() {}

type Trail_PathFilterElementAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource definition
	Resource *Trail_Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *Trail_PathFilterElementAny) Reset() {
	*x = Trail_PathFilterElementAny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_PathFilterElementAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_PathFilterElementAny) ProtoMessage() {}

func (x *Trail_PathFilterElementAny) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_PathFilterElementAny.ProtoReflect.Descriptor instead.
func (*Trail_PathFilterElementAny) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Trail_PathFilterElementAny) GetResource() *Trail_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type Trail_PathFilterElementSome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition of the resource that contains nested resources
	Resource *Trail_Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Filters for the resources contained in the parent resource
	Filters []*Trail_PathFilterElement `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *Trail_PathFilterElementSome) Reset() {
	*x = Trail_PathFilterElementSome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_PathFilterElementSome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_PathFilterElementSome) ProtoMessage() {}

func (x *Trail_PathFilterElementSome) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_PathFilterElementSome.ProtoReflect.Descriptor instead.
func (*Trail_PathFilterElementSome) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Trail_PathFilterElementSome) GetResource() *Trail_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Trail_PathFilterElementSome) GetFilters() []*Trail_PathFilterElement {
	if x != nil {
		return x.Filters
	}
	return nil
}

type Trail_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the resource
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of the resource
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Trail_Resource) Reset() {
	*x = Trail_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_Resource) ProtoMessage() {}

func (x *Trail_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_Resource.ProtoReflect.Descriptor instead.
func (*Trail_Resource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Trail_Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trail_Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Trail_EventFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of filters for services
	Filters []*Trail_EventFilterElement `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *Trail_EventFilter) Reset() {
	*x = Trail_EventFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_EventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_EventFilter) ProtoMessage() {}

func (x *Trail_EventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_EventFilter.ProtoReflect.Descriptor instead.
func (*Trail_EventFilter) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 11}
}

func (x *Trail_EventFilter) GetFilters() []*Trail_EventFilterElement {
	if x != nil {
		return x.Filters
	}
	return nil
}

type Trail_EventFilterElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service ID of the gathered events
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// List of the event categories gathered for a specified service
	Categories []*Trail_EventFilterElementCategory `protobuf:"bytes,2,rep,name=categories,proto3" json:"categories,omitempty"`
	// Resource path filter for a specified service
	PathFilter *Trail_PathFilter `protobuf:"bytes,3,opt,name=path_filter,json=pathFilter,proto3" json:"path_filter,omitempty"`
}

func (x *Trail_EventFilterElement) Reset() {
	*x = Trail_EventFilterElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_EventFilterElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_EventFilterElement) ProtoMessage() {}

func (x *Trail_EventFilterElement) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_EventFilterElement.ProtoReflect.Descriptor instead.
func (*Trail_EventFilterElement) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 12}
}

func (x *Trail_EventFilterElement) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Trail_EventFilterElement) GetCategories() []*Trail_EventFilterElementCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Trail_EventFilterElement) GetPathFilter() *Trail_PathFilter {
	if x != nil {
		return x.PathFilter
	}
	return nil
}

type Trail_EventFilterElementCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Plane of the gathered category
	Plane Trail_EventCategoryFilter `protobuf:"varint,1,opt,name=plane,proto3,enum=yandex.cloud.audittrails.v1.Trail_EventCategoryFilter" json:"plane,omitempty"`
	// Type of the gathered category
	Type Trail_EventAccessTypeFilter `protobuf:"varint,2,opt,name=type,proto3,enum=yandex.cloud.audittrails.v1.Trail_EventAccessTypeFilter" json:"type,omitempty"`
}

func (x *Trail_EventFilterElementCategory) Reset() {
	*x = Trail_EventFilterElementCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_EventFilterElementCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_EventFilterElementCategory) ProtoMessage() {}

func (x *Trail_EventFilterElementCategory) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_EventFilterElementCategory.ProtoReflect.Descriptor instead.
func (*Trail_EventFilterElementCategory) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 13}
}

func (x *Trail_EventFilterElementCategory) GetPlane() Trail_EventCategoryFilter {
	if x != nil {
		return x.Plane
	}
	return Trail_EVENT_CATEGORY_FILTER_UNSPECIFIED
}

func (x *Trail_EventFilterElementCategory) GetType() Trail_EventAccessTypeFilter {
	if x != nil {
		return x.Type
	}
	return Trail_EVENT_ACCESS_TYPE_FILTER_UNSPECIFIED
}

// Policy for gathering data events
type Trail_DataEventsFiltering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service whose events will be delivered
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// Types that are assignable to AdditionalRules:
	//
	//	*Trail_DataEventsFiltering_IncludedEvents
	//	*Trail_DataEventsFiltering_ExcludedEvents
	AdditionalRules isTrail_DataEventsFiltering_AdditionalRules `protobuf_oneof:"additional_rules"`
	// A list of resources which will be monitored by the trail
	ResourceScopes []*Trail_Resource `protobuf:"bytes,4,rep,name=resource_scopes,json=resourceScopes,proto3" json:"resource_scopes,omitempty"`
}

func (x *Trail_DataEventsFiltering) Reset() {
	*x = Trail_DataEventsFiltering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_DataEventsFiltering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_DataEventsFiltering) ProtoMessage() {}

func (x *Trail_DataEventsFiltering) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_DataEventsFiltering.ProtoReflect.Descriptor instead.
func (*Trail_DataEventsFiltering) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 14}
}

func (x *Trail_DataEventsFiltering) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (m *Trail_DataEventsFiltering) GetAdditionalRules() isTrail_DataEventsFiltering_AdditionalRules {
	if m != nil {
		return m.AdditionalRules
	}
	return nil
}

func (x *Trail_DataEventsFiltering) GetIncludedEvents() *Trail_EventTypes {
	if x, ok := x.GetAdditionalRules().(*Trail_DataEventsFiltering_IncludedEvents); ok {
		return x.IncludedEvents
	}
	return nil
}

func (x *Trail_DataEventsFiltering) GetExcludedEvents() *Trail_EventTypes {
	if x, ok := x.GetAdditionalRules().(*Trail_DataEventsFiltering_ExcludedEvents); ok {
		return x.ExcludedEvents
	}
	return nil
}

func (x *Trail_DataEventsFiltering) GetResourceScopes() []*Trail_Resource {
	if x != nil {
		return x.ResourceScopes
	}
	return nil
}

type isTrail_DataEventsFiltering_AdditionalRules interface {
	isTrail_DataEventsFiltering_AdditionalRules()
}

type Trail_DataEventsFiltering_IncludedEvents struct {
	// Explicitly included events of specified service
	// New events of the service won't be delivered by default
	IncludedEvents *Trail_EventTypes `protobuf:"bytes,2,opt,name=included_events,json=includedEvents,proto3,oneof"`
}

type Trail_DataEventsFiltering_ExcludedEvents struct {
	// Explicitly excluded events of specified service
	// New events of the service will be delivered by default
	ExcludedEvents *Trail_EventTypes `protobuf:"bytes,3,opt,name=excluded_events,json=excludedEvents,proto3,oneof"`
}

func (*Trail_DataEventsFiltering_IncludedEvents) isTrail_DataEventsFiltering_AdditionalRules() {}

func (*Trail_DataEventsFiltering_ExcludedEvents) isTrail_DataEventsFiltering_AdditionalRules() {}

// Policy with explicitly specified event group
type Trail_EventTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTypes []string `protobuf:"bytes,1,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
}

func (x *Trail_EventTypes) Reset() {
	*x = Trail_EventTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_EventTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_EventTypes) ProtoMessage() {}

func (x *Trail_EventTypes) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_EventTypes.ProtoReflect.Descriptor instead.
func (*Trail_EventTypes) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 15}
}

func (x *Trail_EventTypes) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

// Policy for gathering management events
type Trail_ManagementEventsFiltering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of resources which will be monitored by the trail
	ResourceScopes []*Trail_Resource `protobuf:"bytes,1,rep,name=resource_scopes,json=resourceScopes,proto3" json:"resource_scopes,omitempty"`
}

func (x *Trail_ManagementEventsFiltering) Reset() {
	*x = Trail_ManagementEventsFiltering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_ManagementEventsFiltering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_ManagementEventsFiltering) ProtoMessage() {}

func (x *Trail_ManagementEventsFiltering) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_ManagementEventsFiltering.ProtoReflect.Descriptor instead.
func (*Trail_ManagementEventsFiltering) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 16}
}

func (x *Trail_ManagementEventsFiltering) GetResourceScopes() []*Trail_Resource {
	if x != nil {
		return x.ResourceScopes
	}
	return nil
}

// Combination of policies describing event filtering process of the trail
// At least one filed must be filled
type Trail_FilteringPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Singular filter describing gathering management events
	ManagementEventsFilter *Trail_ManagementEventsFiltering `protobuf:"bytes,1,opt,name=management_events_filter,json=managementEventsFilter,proto3" json:"management_events_filter,omitempty"`
	// List of filters describing gathering data events
	DataEventsFilters []*Trail_DataEventsFiltering `protobuf:"bytes,2,rep,name=data_events_filters,json=dataEventsFilters,proto3" json:"data_events_filters,omitempty"`
}

func (x *Trail_FilteringPolicy) Reset() {
	*x = Trail_FilteringPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trail_FilteringPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trail_FilteringPolicy) ProtoMessage() {}

func (x *Trail_FilteringPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trail_FilteringPolicy.ProtoReflect.Descriptor instead.
func (*Trail_FilteringPolicy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP(), []int{0, 17}
}

func (x *Trail_FilteringPolicy) GetManagementEventsFilter() *Trail_ManagementEventsFiltering {
	if x != nil {
		return x.ManagementEventsFilter
	}
	return nil
}

func (x *Trail_FilteringPolicy) GetDataEventsFilters() []*Trail_DataEventsFiltering {
	if x != nil {
		return x.DataEventsFilters
	}
	return nil
}

var File_yandex_cloud_audittrails_v1_trail_proto protoreflect.FileDescriptor

var file_yandex_cloud_audittrails_v1_trail_proto_rawDesc = []byte{
	0x0a, 0x27, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x1f, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x69, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35,
	0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe8, 0xc7, 0x31,
	0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe8, 0xc7,
	0x31, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xf2, 0xc7, 0x31,
	0x20, 0x7c, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29,
	0x3f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8,
	0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3b, 0xf2, 0xc7, 0x31, 0x0b, 0x5b, 0x2d, 0x5f, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x8a,
	0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x18, 0x12, 0x10, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x3c,
	0x3d, 0x36, 0x33, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a,
	0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x07, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xad, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x59, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x13, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x1a, 0x5b, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x33, 0x2d, 0x36, 0x33, 0x52, 0x08,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x51, 0x0a,
	0x0c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x48, 0x00, 0x52,
	0x0a, 0x6c, 0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x1a, 0x4e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0xb1, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0b, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0a, 0x70, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x5c, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x4e, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x1a, 0xdb, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x61, 0x6e, 0x79, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6e, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x0f, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01,
	0x1a, 0x65, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x79, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xbe, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x68,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x6d,
	0x65, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x56, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0x82, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x4a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0x67, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x82, 0xc8, 0x31,
	0x03, 0x3e, 0x3d, 0x30, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xf1, 0x01,
	0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x06, 0x82, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0xc4, 0x01, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x52, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x69, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x05, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x04, 0xe8, 0xc7,
	0x31, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xdf, 0x02, 0x0a, 0x13, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x1e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x58, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0x82, 0xc8, 0x31, 0x06,
	0x31, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0a, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x82,
	0xc8, 0x31, 0x06, 0x31, 0x2d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x7d, 0x0a, 0x19, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x60, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0x82, 0xc8, 0x31, 0x06, 0x31, 0x2d,
	0x31, 0x30, 0x32, 0x34, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x1a, 0x81, 0x02, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7c, 0x0a, 0x18, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x00, 0x52, 0x16,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x82, 0xc8, 0x31,
	0x04, 0x3c, 0x31, 0x32, 0x38, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x44, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0x5f,
	0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x02, 0x22,
	0x56, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x42, 0x72, 0x0a,
	0x1f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x42, 0x02, 0x41, 0x54, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f,
	0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_audittrails_v1_trail_proto_rawDescOnce sync.Once
	file_yandex_cloud_audittrails_v1_trail_proto_rawDescData = file_yandex_cloud_audittrails_v1_trail_proto_rawDesc
)

func file_yandex_cloud_audittrails_v1_trail_proto_rawDescGZIP() []byte {
	file_yandex_cloud_audittrails_v1_trail_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_audittrails_v1_trail_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_audittrails_v1_trail_proto_rawDescData)
	})
	return file_yandex_cloud_audittrails_v1_trail_proto_rawDescData
}

var file_yandex_cloud_audittrails_v1_trail_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yandex_cloud_audittrails_v1_trail_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_yandex_cloud_audittrails_v1_trail_proto_goTypes = []interface{}{
	(Trail_Status)(0),                        // 0: yandex.cloud.audittrails.v1.Trail.Status
	(Trail_EventCategoryFilter)(0),           // 1: yandex.cloud.audittrails.v1.Trail.EventCategoryFilter
	(Trail_EventAccessTypeFilter)(0),         // 2: yandex.cloud.audittrails.v1.Trail.EventAccessTypeFilter
	(*Trail)(nil),                            // 3: yandex.cloud.audittrails.v1.Trail
	nil,                                      // 4: yandex.cloud.audittrails.v1.Trail.LabelsEntry
	(*Trail_Destination)(nil),                // 5: yandex.cloud.audittrails.v1.Trail.Destination
	(*Trail_ObjectStorage)(nil),              // 6: yandex.cloud.audittrails.v1.Trail.ObjectStorage
	(*Trail_CloudLogging)(nil),               // 7: yandex.cloud.audittrails.v1.Trail.CloudLogging
	(*Trail_DataStream)(nil),                 // 8: yandex.cloud.audittrails.v1.Trail.DataStream
	(*Trail_Filter)(nil),                     // 9: yandex.cloud.audittrails.v1.Trail.Filter
	(*Trail_PathFilter)(nil),                 // 10: yandex.cloud.audittrails.v1.Trail.PathFilter
	(*Trail_PathFilterElement)(nil),          // 11: yandex.cloud.audittrails.v1.Trail.PathFilterElement
	(*Trail_PathFilterElementAny)(nil),       // 12: yandex.cloud.audittrails.v1.Trail.PathFilterElementAny
	(*Trail_PathFilterElementSome)(nil),      // 13: yandex.cloud.audittrails.v1.Trail.PathFilterElementSome
	(*Trail_Resource)(nil),                   // 14: yandex.cloud.audittrails.v1.Trail.Resource
	(*Trail_EventFilter)(nil),                // 15: yandex.cloud.audittrails.v1.Trail.EventFilter
	(*Trail_EventFilterElement)(nil),         // 16: yandex.cloud.audittrails.v1.Trail.EventFilterElement
	(*Trail_EventFilterElementCategory)(nil), // 17: yandex.cloud.audittrails.v1.Trail.EventFilterElementCategory
	(*Trail_DataEventsFiltering)(nil),        // 18: yandex.cloud.audittrails.v1.Trail.DataEventsFiltering
	(*Trail_EventTypes)(nil),                 // 19: yandex.cloud.audittrails.v1.Trail.EventTypes
	(*Trail_ManagementEventsFiltering)(nil),  // 20: yandex.cloud.audittrails.v1.Trail.ManagementEventsFiltering
	(*Trail_FilteringPolicy)(nil),            // 21: yandex.cloud.audittrails.v1.Trail.FilteringPolicy
	(*timestamppb.Timestamp)(nil),            // 22: google.protobuf.Timestamp
}
var file_yandex_cloud_audittrails_v1_trail_proto_depIdxs = []int32{
	22, // 0: yandex.cloud.audittrails.v1.Trail.created_at:type_name -> google.protobuf.Timestamp
	22, // 1: yandex.cloud.audittrails.v1.Trail.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 2: yandex.cloud.audittrails.v1.Trail.labels:type_name -> yandex.cloud.audittrails.v1.Trail.LabelsEntry
	5,  // 3: yandex.cloud.audittrails.v1.Trail.destination:type_name -> yandex.cloud.audittrails.v1.Trail.Destination
	0,  // 4: yandex.cloud.audittrails.v1.Trail.status:type_name -> yandex.cloud.audittrails.v1.Trail.Status
	9,  // 5: yandex.cloud.audittrails.v1.Trail.filter:type_name -> yandex.cloud.audittrails.v1.Trail.Filter
	21, // 6: yandex.cloud.audittrails.v1.Trail.filtering_policy:type_name -> yandex.cloud.audittrails.v1.Trail.FilteringPolicy
	6,  // 7: yandex.cloud.audittrails.v1.Trail.Destination.object_storage:type_name -> yandex.cloud.audittrails.v1.Trail.ObjectStorage
	7,  // 8: yandex.cloud.audittrails.v1.Trail.Destination.cloud_logging:type_name -> yandex.cloud.audittrails.v1.Trail.CloudLogging
	8,  // 9: yandex.cloud.audittrails.v1.Trail.Destination.data_stream:type_name -> yandex.cloud.audittrails.v1.Trail.DataStream
	10, // 10: yandex.cloud.audittrails.v1.Trail.Filter.path_filter:type_name -> yandex.cloud.audittrails.v1.Trail.PathFilter
	15, // 11: yandex.cloud.audittrails.v1.Trail.Filter.event_filter:type_name -> yandex.cloud.audittrails.v1.Trail.EventFilter
	11, // 12: yandex.cloud.audittrails.v1.Trail.PathFilter.root:type_name -> yandex.cloud.audittrails.v1.Trail.PathFilterElement
	12, // 13: yandex.cloud.audittrails.v1.Trail.PathFilterElement.any_filter:type_name -> yandex.cloud.audittrails.v1.Trail.PathFilterElementAny
	13, // 14: yandex.cloud.audittrails.v1.Trail.PathFilterElement.some_filter:type_name -> yandex.cloud.audittrails.v1.Trail.PathFilterElementSome
	14, // 15: yandex.cloud.audittrails.v1.Trail.PathFilterElementAny.resource:type_name -> yandex.cloud.audittrails.v1.Trail.Resource
	14, // 16: yandex.cloud.audittrails.v1.Trail.PathFilterElementSome.resource:type_name -> yandex.cloud.audittrails.v1.Trail.Resource
	11, // 17: yandex.cloud.audittrails.v1.Trail.PathFilterElementSome.filters:type_name -> yandex.cloud.audittrails.v1.Trail.PathFilterElement
	16, // 18: yandex.cloud.audittrails.v1.Trail.EventFilter.filters:type_name -> yandex.cloud.audittrails.v1.Trail.EventFilterElement
	17, // 19: yandex.cloud.audittrails.v1.Trail.EventFilterElement.categories:type_name -> yandex.cloud.audittrails.v1.Trail.EventFilterElementCategory
	10, // 20: yandex.cloud.audittrails.v1.Trail.EventFilterElement.path_filter:type_name -> yandex.cloud.audittrails.v1.Trail.PathFilter
	1,  // 21: yandex.cloud.audittrails.v1.Trail.EventFilterElementCategory.plane:type_name -> yandex.cloud.audittrails.v1.Trail.EventCategoryFilter
	2,  // 22: yandex.cloud.audittrails.v1.Trail.EventFilterElementCategory.type:type_name -> yandex.cloud.audittrails.v1.Trail.EventAccessTypeFilter
	19, // 23: yandex.cloud.audittrails.v1.Trail.DataEventsFiltering.included_events:type_name -> yandex.cloud.audittrails.v1.Trail.EventTypes
	19, // 24: yandex.cloud.audittrails.v1.Trail.DataEventsFiltering.excluded_events:type_name -> yandex.cloud.audittrails.v1.Trail.EventTypes
	14, // 25: yandex.cloud.audittrails.v1.Trail.DataEventsFiltering.resource_scopes:type_name -> yandex.cloud.audittrails.v1.Trail.Resource
	14, // 26: yandex.cloud.audittrails.v1.Trail.ManagementEventsFiltering.resource_scopes:type_name -> yandex.cloud.audittrails.v1.Trail.Resource
	20, // 27: yandex.cloud.audittrails.v1.Trail.FilteringPolicy.management_events_filter:type_name -> yandex.cloud.audittrails.v1.Trail.ManagementEventsFiltering
	18, // 28: yandex.cloud.audittrails.v1.Trail.FilteringPolicy.data_events_filters:type_name -> yandex.cloud.audittrails.v1.Trail.DataEventsFiltering
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_yandex_cloud_audittrails_v1_trail_proto_init() }
func file_yandex_cloud_audittrails_v1_trail_proto_init() {
	if File_yandex_cloud_audittrails_v1_trail_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_ObjectStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_CloudLogging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_DataStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_PathFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_PathFilterElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_PathFilterElementAny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_PathFilterElementSome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_EventFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_EventFilterElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_EventFilterElementCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_DataEventsFiltering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_EventTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_ManagementEventsFiltering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trail_FilteringPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Trail_Destination_ObjectStorage)(nil),
		(*Trail_Destination_CloudLogging)(nil),
		(*Trail_Destination_DataStream)(nil),
	}
	file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Trail_CloudLogging_LogGroupId)(nil),
	}
	file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Trail_PathFilterElement_AnyFilter)(nil),
		(*Trail_PathFilterElement_SomeFilter)(nil),
	}
	file_yandex_cloud_audittrails_v1_trail_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Trail_DataEventsFiltering_IncludedEvents)(nil),
		(*Trail_DataEventsFiltering_ExcludedEvents)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_audittrails_v1_trail_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_audittrails_v1_trail_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_audittrails_v1_trail_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_audittrails_v1_trail_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_audittrails_v1_trail_proto_msgTypes,
	}.Build()
	File_yandex_cloud_audittrails_v1_trail_proto = out.File
	file_yandex_cloud_audittrails_v1_trail_proto_rawDesc = nil
	file_yandex_cloud_audittrails_v1_trail_proto_goTypes = nil
	file_yandex_cloud_audittrails_v1_trail_proto_depIdxs = nil
}
