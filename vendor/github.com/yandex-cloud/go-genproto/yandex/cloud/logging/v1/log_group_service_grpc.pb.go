// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yandex/cloud/logging/v1/log_group_service.proto

package logging

import (
	context "context"
	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogGroupServiceClient is the client API for LogGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogGroupServiceClient interface {
	// Returns the specified log group.
	//
	// To get the list of all available log groups, make a [List] request.
	Get(ctx context.Context, in *GetLogGroupRequest, opts ...grpc.CallOption) (*LogGroup, error)
	// Returns stats for the specified log group.
	Stats(ctx context.Context, in *GetLogGroupStatsRequest, opts ...grpc.CallOption) (*GetLogGroupStatsResponse, error)
	// Retrieves the list of log groups in the specified folder.
	List(ctx context.Context, in *ListLogGroupsRequest, opts ...grpc.CallOption) (*ListLogGroupsResponse, error)
	// Creates a log group in the specified folder.
	Create(ctx context.Context, in *CreateLogGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates the specified log group.
	Update(ctx context.Context, in *UpdateLogGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified log group.
	Delete(ctx context.Context, in *DeleteLogGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Retrieves the resources (type and IDs) in the specified log group.
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	// Lists operations for the specified log group.
	ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...grpc.CallOption) (*ListOperationsResponse, error)
	// Lists existing access bindings for the specified log group.
	ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	// Sets access bindings for the specified log group.
	SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates access bindings for the specified log group.
	UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type logGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogGroupServiceClient(cc grpc.ClientConnInterface) LogGroupServiceClient {
	return &logGroupServiceClient{cc}
}

func (c *logGroupServiceClient) Get(ctx context.Context, in *GetLogGroupRequest, opts ...grpc.CallOption) (*LogGroup, error) {
	out := new(LogGroup)
	err := c.cc.Invoke(ctx, "/yandex.cloud.logging.v1.LogGroupService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logGroupServiceClient) Stats(ctx context.Context, in *GetLogGroupStatsRequest, opts ...grpc.CallOption) (*GetLogGroupStatsResponse, error) {
	out := new(GetLogGroupStatsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.logging.v1.LogGroupService/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logGroupServiceClient) List(ctx context.Context, in *ListLogGroupsRequest, opts ...grpc.CallOption) (*ListLogGroupsResponse, error) {
	out := new(ListLogGroupsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.logging.v1.LogGroupService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logGroupServiceClient) Create(ctx context.Context, in *CreateLogGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.logging.v1.LogGroupService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logGroupServiceClient) Update(ctx context.Context, in *UpdateLogGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.logging.v1.LogGroupService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logGroupServiceClient) Delete(ctx context.Context, in *DeleteLogGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.logging.v1.LogGroupService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logGroupServiceClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.logging.v1.LogGroupService/ListResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logGroupServiceClient) ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...grpc.CallOption) (*ListOperationsResponse, error) {
	out := new(ListOperationsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.logging.v1.LogGroupService/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logGroupServiceClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	out := new(access.ListAccessBindingsResponse)
	err := c.cc.Invoke(ctx, "/yandex.cloud.logging.v1.LogGroupService/ListAccessBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logGroupServiceClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.logging.v1.LogGroupService/SetAccessBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logGroupServiceClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/yandex.cloud.logging.v1.LogGroupService/UpdateAccessBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogGroupServiceServer is the server API for LogGroupService service.
// All implementations should embed UnimplementedLogGroupServiceServer
// for forward compatibility
type LogGroupServiceServer interface {
	// Returns the specified log group.
	//
	// To get the list of all available log groups, make a [List] request.
	Get(context.Context, *GetLogGroupRequest) (*LogGroup, error)
	// Returns stats for the specified log group.
	Stats(context.Context, *GetLogGroupStatsRequest) (*GetLogGroupStatsResponse, error)
	// Retrieves the list of log groups in the specified folder.
	List(context.Context, *ListLogGroupsRequest) (*ListLogGroupsResponse, error)
	// Creates a log group in the specified folder.
	Create(context.Context, *CreateLogGroupRequest) (*operation.Operation, error)
	// Updates the specified log group.
	Update(context.Context, *UpdateLogGroupRequest) (*operation.Operation, error)
	// Deletes the specified log group.
	Delete(context.Context, *DeleteLogGroupRequest) (*operation.Operation, error)
	// Retrieves the resources (type and IDs) in the specified log group.
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	// Lists operations for the specified log group.
	ListOperations(context.Context, *ListOperationsRequest) (*ListOperationsResponse, error)
	// Lists existing access bindings for the specified log group.
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)
	// Sets access bindings for the specified log group.
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)
	// Updates access bindings for the specified log group.
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)
}

// UnimplementedLogGroupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLogGroupServiceServer struct {
}

func (UnimplementedLogGroupServiceServer) Get(context.Context, *GetLogGroupRequest) (*LogGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLogGroupServiceServer) Stats(context.Context, *GetLogGroupStatsRequest) (*GetLogGroupStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedLogGroupServiceServer) List(context.Context, *ListLogGroupsRequest) (*ListLogGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedLogGroupServiceServer) Create(context.Context, *CreateLogGroupRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLogGroupServiceServer) Update(context.Context, *UpdateLogGroupRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLogGroupServiceServer) Delete(context.Context, *DeleteLogGroupRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLogGroupServiceServer) ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedLogGroupServiceServer) ListOperations(context.Context, *ListOperationsRequest) (*ListOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedLogGroupServiceServer) ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessBindings not implemented")
}
func (UnimplementedLogGroupServiceServer) SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccessBindings not implemented")
}
func (UnimplementedLogGroupServiceServer) UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessBindings not implemented")
}

// UnsafeLogGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogGroupServiceServer will
// result in compilation errors.
type UnsafeLogGroupServiceServer interface {
	mustEmbedUnimplementedLogGroupServiceServer()
}

func RegisterLogGroupServiceServer(s grpc.ServiceRegistrar, srv LogGroupServiceServer) {
	s.RegisterService(&LogGroupService_ServiceDesc, srv)
}

func _LogGroupService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogGroupServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.logging.v1.LogGroupService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogGroupServiceServer).Get(ctx, req.(*GetLogGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogGroupService_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogGroupStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogGroupServiceServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.logging.v1.LogGroupService/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogGroupServiceServer).Stats(ctx, req.(*GetLogGroupStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogGroupService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogGroupServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.logging.v1.LogGroupService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogGroupServiceServer).List(ctx, req.(*ListLogGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogGroupService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogGroupServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.logging.v1.LogGroupService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogGroupServiceServer).Create(ctx, req.(*CreateLogGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogGroupService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogGroupServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.logging.v1.LogGroupService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogGroupServiceServer).Update(ctx, req.(*UpdateLogGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogGroupService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLogGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogGroupServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.logging.v1.LogGroupService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogGroupServiceServer).Delete(ctx, req.(*DeleteLogGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogGroupService_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogGroupServiceServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.logging.v1.LogGroupService/ListResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogGroupServiceServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogGroupService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogGroupServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.logging.v1.LogGroupService/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogGroupServiceServer).ListOperations(ctx, req.(*ListOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogGroupService_ListAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.ListAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogGroupServiceServer).ListAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.logging.v1.LogGroupService/ListAccessBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogGroupServiceServer).ListAccessBindings(ctx, req.(*access.ListAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogGroupService_SetAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.SetAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogGroupServiceServer).SetAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.logging.v1.LogGroupService/SetAccessBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogGroupServiceServer).SetAccessBindings(ctx, req.(*access.SetAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogGroupService_UpdateAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.UpdateAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogGroupServiceServer).UpdateAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex.cloud.logging.v1.LogGroupService/UpdateAccessBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogGroupServiceServer).UpdateAccessBindings(ctx, req.(*access.UpdateAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogGroupService_ServiceDesc is the grpc.ServiceDesc for LogGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.logging.v1.LogGroupService",
	HandlerType: (*LogGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _LogGroupService_Get_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _LogGroupService_Stats_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LogGroupService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LogGroupService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LogGroupService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LogGroupService_Delete_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _LogGroupService_ListResources_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _LogGroupService_ListOperations_Handler,
		},
		{
			MethodName: "ListAccessBindings",
			Handler:    _LogGroupService_ListAccessBindings_Handler,
		},
		{
			MethodName: "SetAccessBindings",
			Handler:    _LogGroupService_SetAccessBindings_Handler,
		},
		{
			MethodName: "UpdateAccessBindings",
			Handler:    _LogGroupService_UpdateAccessBindings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/logging/v1/log_group_service.proto",
}
