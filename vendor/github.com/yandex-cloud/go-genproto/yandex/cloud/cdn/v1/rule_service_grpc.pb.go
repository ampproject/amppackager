// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: yandex/cloud/cdn/v1/rule_service.proto

package cdn

import (
	context "context"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourceRulesService_List_FullMethodName   = "/yandex.cloud.cdn.v1.ResourceRulesService/List"
	ResourceRulesService_Create_FullMethodName = "/yandex.cloud.cdn.v1.ResourceRulesService/Create"
	ResourceRulesService_Get_FullMethodName    = "/yandex.cloud.cdn.v1.ResourceRulesService/Get"
	ResourceRulesService_Update_FullMethodName = "/yandex.cloud.cdn.v1.ResourceRulesService/Update"
	ResourceRulesService_Delete_FullMethodName = "/yandex.cloud.cdn.v1.ResourceRulesService/Delete"
)

// ResourceRulesServiceClient is the client API for ResourceRulesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceRulesServiceClient interface {
	// List all rules for specified resource.
	List(ctx context.Context, in *ListResourceRulesRequest, opts ...grpc.CallOption) (*ListResourceRulesResponse, error)
	// Create new resource rule with specified unique name and rule patter.
	Create(ctx context.Context, in *CreateResourceRuleRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Get specified by id resource rule.
	Get(ctx context.Context, in *GetResourceRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Update specified by id resource rule.
	Update(ctx context.Context, in *UpdateResourceRuleRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Delete specified by id resource rule.
	Delete(ctx context.Context, in *DeleteResourceRuleRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type resourceRulesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceRulesServiceClient(cc grpc.ClientConnInterface) ResourceRulesServiceClient {
	return &resourceRulesServiceClient{cc}
}

func (c *resourceRulesServiceClient) List(ctx context.Context, in *ListResourceRulesRequest, opts ...grpc.CallOption) (*ListResourceRulesResponse, error) {
	out := new(ListResourceRulesResponse)
	err := c.cc.Invoke(ctx, ResourceRulesService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRulesServiceClient) Create(ctx context.Context, in *CreateResourceRuleRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ResourceRulesService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRulesServiceClient) Get(ctx context.Context, in *GetResourceRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, ResourceRulesService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRulesServiceClient) Update(ctx context.Context, in *UpdateResourceRuleRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ResourceRulesService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRulesServiceClient) Delete(ctx context.Context, in *DeleteResourceRuleRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ResourceRulesService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceRulesServiceServer is the server API for ResourceRulesService service.
// All implementations should embed UnimplementedResourceRulesServiceServer
// for forward compatibility
type ResourceRulesServiceServer interface {
	// List all rules for specified resource.
	List(context.Context, *ListResourceRulesRequest) (*ListResourceRulesResponse, error)
	// Create new resource rule with specified unique name and rule patter.
	Create(context.Context, *CreateResourceRuleRequest) (*operation.Operation, error)
	// Get specified by id resource rule.
	Get(context.Context, *GetResourceRuleRequest) (*Rule, error)
	// Update specified by id resource rule.
	Update(context.Context, *UpdateResourceRuleRequest) (*operation.Operation, error)
	// Delete specified by id resource rule.
	Delete(context.Context, *DeleteResourceRuleRequest) (*operation.Operation, error)
}

// UnimplementedResourceRulesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedResourceRulesServiceServer struct {
}

func (UnimplementedResourceRulesServiceServer) List(context.Context, *ListResourceRulesRequest) (*ListResourceRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedResourceRulesServiceServer) Create(context.Context, *CreateResourceRuleRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResourceRulesServiceServer) Get(context.Context, *GetResourceRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedResourceRulesServiceServer) Update(context.Context, *UpdateResourceRuleRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResourceRulesServiceServer) Delete(context.Context, *DeleteResourceRuleRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeResourceRulesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceRulesServiceServer will
// result in compilation errors.
type UnsafeResourceRulesServiceServer interface {
	mustEmbedUnimplementedResourceRulesServiceServer()
}

func RegisterResourceRulesServiceServer(s grpc.ServiceRegistrar, srv ResourceRulesServiceServer) {
	s.RegisterService(&ResourceRulesService_ServiceDesc, srv)
}

func _ResourceRulesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRulesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRulesService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRulesServiceServer).List(ctx, req.(*ListResourceRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRulesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRulesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRulesService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRulesServiceServer).Create(ctx, req.(*CreateResourceRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRulesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRulesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRulesService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRulesServiceServer).Get(ctx, req.(*GetResourceRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRulesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRulesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRulesService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRulesServiceServer).Update(ctx, req.(*UpdateResourceRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRulesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRulesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourceRulesService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRulesServiceServer).Delete(ctx, req.(*DeleteResourceRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceRulesService_ServiceDesc is the grpc.ServiceDesc for ResourceRulesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceRulesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.cdn.v1.ResourceRulesService",
	HandlerType: (*ResourceRulesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ResourceRulesService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ResourceRulesService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ResourceRulesService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ResourceRulesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ResourceRulesService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/cdn/v1/rule_service.proto",
}
