// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: yandex/cloud/k8s/v1/node.proto

package k8s

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpVersion int32

const (
	IpVersion_IP_VERSION_UNSPECIFIED IpVersion = 0
	// IPv4 address, for example 192.168.0.0.
	IpVersion_IPV4 IpVersion = 1
	// IPv6 address, not available yet.
	IpVersion_IPV6 IpVersion = 2
)

// Enum value maps for IpVersion.
var (
	IpVersion_name = map[int32]string{
		0: "IP_VERSION_UNSPECIFIED",
		1: "IPV4",
		2: "IPV6",
	}
	IpVersion_value = map[string]int32{
		"IP_VERSION_UNSPECIFIED": 0,
		"IPV4":                   1,
		"IPV6":                   2,
	}
)

func (x IpVersion) Enum() *IpVersion {
	p := new(IpVersion)
	*p = x
	return p
}

func (x IpVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_k8s_v1_node_proto_enumTypes[0].Descriptor()
}

func (IpVersion) Type() protoreflect.EnumType {
	return &file_yandex_cloud_k8s_v1_node_proto_enumTypes[0]
}

func (x IpVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpVersion.Descriptor instead.
func (IpVersion) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{0}
}

// Computed node status.
type Node_Status int32

const (
	Node_STATUS_UNSPECIFIED Node_Status = 0
	// Node instance is not yet created (e.g. in progress).
	Node_PROVISIONING Node_Status = 1
	// Node instance is created but not registered
	// (e.g. is still initializing).
	Node_NOT_CONNECTED Node_Status = 2
	// Node has connected but is not ready for
	// workload (see conditions for details).
	Node_NOT_READY Node_Status = 3
	// Node has connected and ready for workload.
	Node_READY Node_Status = 4
	// Node is still registered but its instance
	// is deleted (this is our bug).
	Node_MISSING Node_Status = 5
)

// Enum value maps for Node_Status.
var (
	Node_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PROVISIONING",
		2: "NOT_CONNECTED",
		3: "NOT_READY",
		4: "READY",
		5: "MISSING",
	}
	Node_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PROVISIONING":       1,
		"NOT_CONNECTED":      2,
		"NOT_READY":          3,
		"READY":              4,
		"MISSING":            5,
	}
)

func (x Node_Status) Enum() *Node_Status {
	p := new(Node_Status)
	*p = x
	return p
}

func (x Node_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_k8s_v1_node_proto_enumTypes[1].Descriptor()
}

func (Node_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_k8s_v1_node_proto_enumTypes[1]
}

func (x Node_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_Status.Descriptor instead.
func (Node_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{0, 0}
}

type Taint_Effect int32

const (
	Taint_EFFECT_UNSPECIFIED Taint_Effect = 0
	// Do not allow new pods to schedule onto the node unless they tolerate the taint,
	// but allow all pods submitted to Kubelet without going through the scheduler
	// to start, and allow all already-running pods to continue running.
	Taint_NO_SCHEDULE Taint_Effect = 1
	// Like NO_SCHEDULE, but the scheduler tries not to schedule
	// new pods onto the node, rather than prohibiting new pods from scheduling
	// onto the node entirely. Enforced by the scheduler.
	Taint_PREFER_NO_SCHEDULE Taint_Effect = 2
	// Evict any already-running pods that do not tolerate the taint.
	Taint_NO_EXECUTE Taint_Effect = 3
)

// Enum value maps for Taint_Effect.
var (
	Taint_Effect_name = map[int32]string{
		0: "EFFECT_UNSPECIFIED",
		1: "NO_SCHEDULE",
		2: "PREFER_NO_SCHEDULE",
		3: "NO_EXECUTE",
	}
	Taint_Effect_value = map[string]int32{
		"EFFECT_UNSPECIFIED": 0,
		"NO_SCHEDULE":        1,
		"PREFER_NO_SCHEDULE": 2,
		"NO_EXECUTE":         3,
	}
)

func (x Taint_Effect) Enum() *Taint_Effect {
	p := new(Taint_Effect)
	*p = x
	return p
}

func (x Taint_Effect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Taint_Effect) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_k8s_v1_node_proto_enumTypes[2].Descriptor()
}

func (Taint_Effect) Type() protoreflect.EnumType {
	return &file_yandex_cloud_k8s_v1_node_proto_enumTypes[2]
}

func (x Taint_Effect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Taint_Effect.Descriptor instead.
func (Taint_Effect) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{2, 0}
}

type NodeTemplate_NetworkSettings_Type int32

const (
	NodeTemplate_NetworkSettings_TYPE_UNSPECIFIED     NodeTemplate_NetworkSettings_Type = 0
	NodeTemplate_NetworkSettings_STANDARD             NodeTemplate_NetworkSettings_Type = 1
	NodeTemplate_NetworkSettings_SOFTWARE_ACCELERATED NodeTemplate_NetworkSettings_Type = 2
)

// Enum value maps for NodeTemplate_NetworkSettings_Type.
var (
	NodeTemplate_NetworkSettings_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "STANDARD",
		2: "SOFTWARE_ACCELERATED",
	}
	NodeTemplate_NetworkSettings_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":     0,
		"STANDARD":             1,
		"SOFTWARE_ACCELERATED": 2,
	}
)

func (x NodeTemplate_NetworkSettings_Type) Enum() *NodeTemplate_NetworkSettings_Type {
	p := new(NodeTemplate_NetworkSettings_Type)
	*p = x
	return p
}

func (x NodeTemplate_NetworkSettings_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeTemplate_NetworkSettings_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_k8s_v1_node_proto_enumTypes[3].Descriptor()
}

func (NodeTemplate_NetworkSettings_Type) Type() protoreflect.EnumType {
	return &file_yandex_cloud_k8s_v1_node_proto_enumTypes[3]
}

func (x NodeTemplate_NetworkSettings_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeTemplate_NetworkSettings_Type.Descriptor instead.
func (NodeTemplate_NetworkSettings_Type) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{4, 2, 0}
}

type NodeTemplate_ContainerRuntimeSettings_Type int32

const (
	NodeTemplate_ContainerRuntimeSettings_TYPE_UNSPECIFIED NodeTemplate_ContainerRuntimeSettings_Type = 0
	NodeTemplate_ContainerRuntimeSettings_DOCKER           NodeTemplate_ContainerRuntimeSettings_Type = 1
	NodeTemplate_ContainerRuntimeSettings_CONTAINERD       NodeTemplate_ContainerRuntimeSettings_Type = 2
)

// Enum value maps for NodeTemplate_ContainerRuntimeSettings_Type.
var (
	NodeTemplate_ContainerRuntimeSettings_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "DOCKER",
		2: "CONTAINERD",
	}
	NodeTemplate_ContainerRuntimeSettings_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"DOCKER":           1,
		"CONTAINERD":       2,
	}
)

func (x NodeTemplate_ContainerRuntimeSettings_Type) Enum() *NodeTemplate_ContainerRuntimeSettings_Type {
	p := new(NodeTemplate_ContainerRuntimeSettings_Type)
	*p = x
	return p
}

func (x NodeTemplate_ContainerRuntimeSettings_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeTemplate_ContainerRuntimeSettings_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_k8s_v1_node_proto_enumTypes[4].Descriptor()
}

func (NodeTemplate_ContainerRuntimeSettings_Type) Type() protoreflect.EnumType {
	return &file_yandex_cloud_k8s_v1_node_proto_enumTypes[4]
}

func (x NodeTemplate_ContainerRuntimeSettings_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeTemplate_ContainerRuntimeSettings_Type.Descriptor instead.
func (NodeTemplate_ContainerRuntimeSettings_Type) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{4, 3, 0}
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Computed node status.
	Status Node_Status `protobuf:"varint,1,opt,name=status,proto3,enum=yandex.cloud.k8s.v1.Node_Status" json:"status,omitempty"`
	// Node specificaion.
	Spec *Node_Spec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Cloud instance status.
	// Not available in `MISSING` status.
	CloudStatus *Node_CloudStatus `protobuf:"bytes,3,opt,name=cloud_status,json=cloudStatus,proto3" json:"cloud_status,omitempty"`
	// Kubernetes node status.
	// Not available in `PROVISIONING` and `NOT_CONNECTED` states.
	KubernetesStatus *Node_KubernetesStatus `protobuf:"bytes,4,opt,name=kubernetes_status,json=kubernetesStatus,proto3" json:"kubernetes_status,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetStatus() Node_Status {
	if x != nil {
		return x.Status
	}
	return Node_STATUS_UNSPECIFIED
}

func (x *Node) GetSpec() *Node_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Node) GetCloudStatus() *Node_CloudStatus {
	if x != nil {
		return x.CloudStatus
	}
	return nil
}

func (x *Node) GetKubernetesStatus() *Node_KubernetesStatus {
	if x != nil {
		return x.KubernetesStatus
	}
	return nil
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of node condition.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Status is the status of the condition.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Human-readable message indicating details about last transition.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Last time we got an update on a given condition.
	LastHeartbeatTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_heartbeat_time,json=lastHeartbeatTime,proto3" json:"last_heartbeat_time,omitempty"`
	// Last time the condition transit from one status to another.
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{1}
}

func (x *Condition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Condition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Condition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Condition) GetLastHeartbeatTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeatTime
	}
	return nil
}

func (x *Condition) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

type Taint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The taint key to be applied to a node.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The taint value corresponding to the taint key.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// The effect of the taint on pods that do not tolerate the taint.
	Effect Taint_Effect `protobuf:"varint,3,opt,name=effect,proto3,enum=yandex.cloud.k8s.v1.Taint_Effect" json:"effect,omitempty"`
}

func (x *Taint) Reset() {
	*x = Taint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taint) ProtoMessage() {}

func (x *Taint) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taint.ProtoReflect.Descriptor instead.
func (*Taint) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{2}
}

func (x *Taint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Taint) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Taint) GetEffect() Taint_Effect {
	if x != nil {
		return x.Effect
	}
	return Taint_EFFECT_UNSPECIFIED
}

// AttachedVolume describes a volume attached to a node
type AttachedVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the driver which has attached the volume
	DriverName string `protobuf:"bytes,1,opt,name=driver_name,json=driverName,proto3" json:"driver_name,omitempty"`
	// Volume handle (cloud disk id)
	VolumeHandle string `protobuf:"bytes,2,opt,name=volume_handle,json=volumeHandle,proto3" json:"volume_handle,omitempty"`
}

func (x *AttachedVolume) Reset() {
	*x = AttachedVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachedVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedVolume) ProtoMessage() {}

func (x *AttachedVolume) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedVolume.ProtoReflect.Descriptor instead.
func (*AttachedVolume) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{3}
}

func (x *AttachedVolume) GetDriverName() string {
	if x != nil {
		return x.DriverName
	}
	return ""
}

func (x *AttachedVolume) GetVolumeHandle() string {
	if x != nil {
		return x.VolumeHandle
	}
	return ""
}

type NodeTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the instance.
	// In order to be unique it must contain at least on of instance unique placeholders:
	//   {instance.short_id}
	//   {instance.index}
	//   combination of {instance.zone_id} and {instance.index_in_zone}
	// Example: my-instance-{instance.index}
	// If not set, default is used: {instance_group.id}-{instance.short_id}
	// It may also contain another placeholders, see metadata doc for full list.
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// these labels will be assigned to compute nodes (instances), created by the nodegroup
	Labels map[string]string `protobuf:"bytes,15,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of the hardware platform configuration for the node.
	PlatformId string `protobuf:"bytes,1,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	// Computing resources of the node such as the amount of memory and number of cores.
	ResourcesSpec *ResourcesSpec `protobuf:"bytes,2,opt,name=resources_spec,json=resourcesSpec,proto3" json:"resources_spec,omitempty"`
	// Specification for the boot disk that will be attached to the node.
	BootDiskSpec *DiskSpec `protobuf:"bytes,3,opt,name=boot_disk_spec,json=bootDiskSpec,proto3" json:"boot_disk_spec,omitempty"`
	// The metadata as `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys.
	//
	// For example, you may use the metadata in order to provide your public SSH key to the node.
	// For more information, see [Metadata](/docs/compute/concepts/vm-metadata).
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Specification for the create network interfaces for the node group compute instances.
	// Deprecated, please use network_interface_specs.
	//
	// Deprecated: Do not use.
	V4AddressSpec *NodeAddressSpec `protobuf:"bytes,5,opt,name=v4_address_spec,json=v4AddressSpec,proto3" json:"v4_address_spec,omitempty"`
	// Scheduling policy configuration.
	SchedulingPolicy *SchedulingPolicy `protobuf:"bytes,6,opt,name=scheduling_policy,json=schedulingPolicy,proto3" json:"scheduling_policy,omitempty"`
	// New api, to specify network interfaces for the node group compute instances.
	// Can not be used together with 'v4_address_spec'
	NetworkInterfaceSpecs []*NetworkInterfaceSpec `protobuf:"bytes,7,rep,name=network_interface_specs,json=networkInterfaceSpecs,proto3" json:"network_interface_specs,omitempty"`
	PlacementPolicy       *PlacementPolicy        `protobuf:"bytes,10,opt,name=placement_policy,json=placementPolicy,proto3" json:"placement_policy,omitempty"`
	// this parameter allows to specify type of network acceleration used on nodes (instances)
	NetworkSettings          *NodeTemplate_NetworkSettings          `protobuf:"bytes,11,opt,name=network_settings,json=networkSettings,proto3" json:"network_settings,omitempty"`
	ContainerRuntimeSettings *NodeTemplate_ContainerRuntimeSettings `protobuf:"bytes,12,opt,name=container_runtime_settings,json=containerRuntimeSettings,proto3" json:"container_runtime_settings,omitempty"`
}

func (x *NodeTemplate) Reset() {
	*x = NodeTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeTemplate) ProtoMessage() {}

func (x *NodeTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeTemplate.ProtoReflect.Descriptor instead.
func (*NodeTemplate) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{4}
}

func (x *NodeTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeTemplate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodeTemplate) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *NodeTemplate) GetResourcesSpec() *ResourcesSpec {
	if x != nil {
		return x.ResourcesSpec
	}
	return nil
}

func (x *NodeTemplate) GetBootDiskSpec() *DiskSpec {
	if x != nil {
		return x.BootDiskSpec
	}
	return nil
}

func (x *NodeTemplate) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Deprecated: Do not use.
func (x *NodeTemplate) GetV4AddressSpec() *NodeAddressSpec {
	if x != nil {
		return x.V4AddressSpec
	}
	return nil
}

func (x *NodeTemplate) GetSchedulingPolicy() *SchedulingPolicy {
	if x != nil {
		return x.SchedulingPolicy
	}
	return nil
}

func (x *NodeTemplate) GetNetworkInterfaceSpecs() []*NetworkInterfaceSpec {
	if x != nil {
		return x.NetworkInterfaceSpecs
	}
	return nil
}

func (x *NodeTemplate) GetPlacementPolicy() *PlacementPolicy {
	if x != nil {
		return x.PlacementPolicy
	}
	return nil
}

func (x *NodeTemplate) GetNetworkSettings() *NodeTemplate_NetworkSettings {
	if x != nil {
		return x.NetworkSettings
	}
	return nil
}

func (x *NodeTemplate) GetContainerRuntimeSettings() *NodeTemplate_ContainerRuntimeSettings {
	if x != nil {
		return x.ContainerRuntimeSettings
	}
	return nil
}

type NetworkInterfaceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the subnets.
	SubnetIds []string `protobuf:"bytes,2,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// Primary IPv4 address that is assigned to the instance for this network interface.
	PrimaryV4AddressSpec *NodeAddressSpec `protobuf:"bytes,3,opt,name=primary_v4_address_spec,json=primaryV4AddressSpec,proto3" json:"primary_v4_address_spec,omitempty"`
	// Primary IPv6 address that is assigned to the instance for this network interface.
	PrimaryV6AddressSpec *NodeAddressSpec `protobuf:"bytes,4,opt,name=primary_v6_address_spec,json=primaryV6AddressSpec,proto3" json:"primary_v6_address_spec,omitempty"`
	// IDs of security groups.
	SecurityGroupIds []string `protobuf:"bytes,5,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
}

func (x *NetworkInterfaceSpec) Reset() {
	*x = NetworkInterfaceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterfaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterfaceSpec) ProtoMessage() {}

func (x *NetworkInterfaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterfaceSpec.ProtoReflect.Descriptor instead.
func (*NetworkInterfaceSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkInterfaceSpec) GetSubnetIds() []string {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *NetworkInterfaceSpec) GetPrimaryV4AddressSpec() *NodeAddressSpec {
	if x != nil {
		return x.PrimaryV4AddressSpec
	}
	return nil
}

func (x *NetworkInterfaceSpec) GetPrimaryV6AddressSpec() *NodeAddressSpec {
	if x != nil {
		return x.PrimaryV6AddressSpec
	}
	return nil
}

func (x *NetworkInterfaceSpec) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

type NodeAddressSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One-to-one NAT configuration. Setting up one-to-one NAT ensures that public IP addresses are assigned to nodes, and therefore internet is accessible for all nodes of the node group. If the field is not set, NAT will not be set up.
	OneToOneNatSpec *OneToOneNatSpec `protobuf:"bytes,1,opt,name=one_to_one_nat_spec,json=oneToOneNatSpec,proto3" json:"one_to_one_nat_spec,omitempty"`
	// Internal DNS configuration.
	DnsRecordSpecs []*DnsRecordSpec `protobuf:"bytes,2,rep,name=dns_record_specs,json=dnsRecordSpecs,proto3" json:"dns_record_specs,omitempty"`
}

func (x *NodeAddressSpec) Reset() {
	*x = NodeAddressSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAddressSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAddressSpec) ProtoMessage() {}

func (x *NodeAddressSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAddressSpec.ProtoReflect.Descriptor instead.
func (*NodeAddressSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{6}
}

func (x *NodeAddressSpec) GetOneToOneNatSpec() *OneToOneNatSpec {
	if x != nil {
		return x.OneToOneNatSpec
	}
	return nil
}

func (x *NodeAddressSpec) GetDnsRecordSpecs() []*DnsRecordSpec {
	if x != nil {
		return x.DnsRecordSpecs
	}
	return nil
}

type DnsRecordSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FQDN (required).
	Fqdn string `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// DNS zone id (optional, if not set, private zone is used).
	DnsZoneId string `protobuf:"bytes,2,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// DNS record ttl, values in 0-86400 (optional).
	Ttl int64 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// When set to true, also create PTR DNS record (optional).
	Ptr bool `protobuf:"varint,4,opt,name=ptr,proto3" json:"ptr,omitempty"`
}

func (x *DnsRecordSpec) Reset() {
	*x = DnsRecordSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsRecordSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsRecordSpec) ProtoMessage() {}

func (x *DnsRecordSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsRecordSpec.ProtoReflect.Descriptor instead.
func (*DnsRecordSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{7}
}

func (x *DnsRecordSpec) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *DnsRecordSpec) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *DnsRecordSpec) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DnsRecordSpec) GetPtr() bool {
	if x != nil {
		return x.Ptr
	}
	return false
}

type OneToOneNatSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP version for the public IP address.
	IpVersion IpVersion `protobuf:"varint,1,opt,name=ip_version,json=ipVersion,proto3,enum=yandex.cloud.k8s.v1.IpVersion" json:"ip_version,omitempty"`
}

func (x *OneToOneNatSpec) Reset() {
	*x = OneToOneNatSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneToOneNatSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneToOneNatSpec) ProtoMessage() {}

func (x *OneToOneNatSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneToOneNatSpec.ProtoReflect.Descriptor instead.
func (*OneToOneNatSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{8}
}

func (x *OneToOneNatSpec) GetIpVersion() IpVersion {
	if x != nil {
		return x.IpVersion
	}
	return IpVersion_IP_VERSION_UNSPECIFIED
}

type ResourcesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of memory available to the node, specified in bytes.
	Memory int64 `protobuf:"varint,1,opt,name=memory,proto3" json:"memory,omitempty"`
	// Number of cores available to the node.
	Cores int64 `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	// Baseline level of CPU performance with the possibility to burst performance above that baseline level.
	// This field sets baseline performance for each core.
	CoreFraction int64 `protobuf:"varint,3,opt,name=core_fraction,json=coreFraction,proto3" json:"core_fraction,omitempty"`
	// Number of GPUs available to the node.
	Gpus int64 `protobuf:"varint,4,opt,name=gpus,proto3" json:"gpus,omitempty"`
}

func (x *ResourcesSpec) Reset() {
	*x = ResourcesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcesSpec) ProtoMessage() {}

func (x *ResourcesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcesSpec.ProtoReflect.Descriptor instead.
func (*ResourcesSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{9}
}

func (x *ResourcesSpec) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ResourcesSpec) GetCores() int64 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *ResourcesSpec) GetCoreFraction() int64 {
	if x != nil {
		return x.CoreFraction
	}
	return 0
}

func (x *ResourcesSpec) GetGpus() int64 {
	if x != nil {
		return x.Gpus
	}
	return 0
}

type DiskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the disk type.
	DiskTypeId string `protobuf:"bytes,1,opt,name=disk_type_id,json=diskTypeId,proto3" json:"disk_type_id,omitempty"`
	// Size of the disk, specified in bytes.
	DiskSize int64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
}

func (x *DiskSpec) Reset() {
	*x = DiskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskSpec) ProtoMessage() {}

func (x *DiskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskSpec.ProtoReflect.Descriptor instead.
func (*DiskSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{10}
}

func (x *DiskSpec) GetDiskTypeId() string {
	if x != nil {
		return x.DiskTypeId
	}
	return ""
}

func (x *DiskSpec) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

type SchedulingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True for preemptible compute instances. Default value is false. Preemptible compute instances are stopped at least once every 24 hours, and can be stopped at any time
	// if their resources are needed by Compute.
	// For more information, see [Preemptible Virtual Machines](/docs/compute/concepts/preemptible-vm).
	Preemptible bool `protobuf:"varint,1,opt,name=preemptible,proto3" json:"preemptible,omitempty"`
}

func (x *SchedulingPolicy) Reset() {
	*x = SchedulingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingPolicy) ProtoMessage() {}

func (x *SchedulingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingPolicy.ProtoReflect.Descriptor instead.
func (*SchedulingPolicy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{11}
}

func (x *SchedulingPolicy) GetPreemptible() bool {
	if x != nil {
		return x.Preemptible
	}
	return false
}

type PlacementPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of placement group
	PlacementGroupId string `protobuf:"bytes,1,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
}

func (x *PlacementPolicy) Reset() {
	*x = PlacementPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementPolicy) ProtoMessage() {}

func (x *PlacementPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementPolicy.ProtoReflect.Descriptor instead.
func (*PlacementPolicy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{12}
}

func (x *PlacementPolicy) GetPlacementGroupId() string {
	if x != nil {
		return x.PlacementGroupId
	}
	return ""
}

// Kubernetes node info
type Node_KubernetesStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node id (and instance name)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Conditions is an array of current observed node conditions.
	// More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
	Conditions []*Condition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// If specified, the node's taints.
	Taints []*Taint `protobuf:"bytes,3,rep,name=taints,proto3" json:"taints,omitempty"`
	// List of volumes that are attached to the node.
	AttachedVolumes []*AttachedVolume `protobuf:"bytes,4,rep,name=attached_volumes,json=attachedVolumes,proto3" json:"attached_volumes,omitempty"`
}

func (x *Node_KubernetesStatus) Reset() {
	*x = Node_KubernetesStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_KubernetesStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_KubernetesStatus) ProtoMessage() {}

func (x *Node_KubernetesStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_KubernetesStatus.ProtoReflect.Descriptor instead.
func (*Node_KubernetesStatus) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Node_KubernetesStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node_KubernetesStatus) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Node_KubernetesStatus) GetTaints() []*Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *Node_KubernetesStatus) GetAttachedVolumes() []*AttachedVolume {
	if x != nil {
		return x.AttachedVolumes
	}
	return nil
}

// Cloud instance info
type Node_CloudStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Compute instance id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// IG instance status
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// IG instance status message
	StatusMessage string `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
}

func (x *Node_CloudStatus) Reset() {
	*x = Node_CloudStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_CloudStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_CloudStatus) ProtoMessage() {}

func (x *Node_CloudStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_CloudStatus.ProtoReflect.Descriptor instead.
func (*Node_CloudStatus) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Node_CloudStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node_CloudStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Node_CloudStatus) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

// Node specification.
type Node_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node group specified resources.
	Resources *ResourcesSpec `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	// Node group specified disk.
	Disk *DiskSpec `protobuf:"bytes,2,opt,name=disk,proto3" json:"disk,omitempty"`
}

func (x *Node_Spec) Reset() {
	*x = Node_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_Spec) ProtoMessage() {}

func (x *Node_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_Spec.ProtoReflect.Descriptor instead.
func (*Node_Spec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Node_Spec) GetResources() *ResourcesSpec {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Node_Spec) GetDisk() *DiskSpec {
	if x != nil {
		return x.Disk
	}
	return nil
}

type NodeTemplate_NetworkSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type NodeTemplate_NetworkSettings_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.k8s.v1.NodeTemplate_NetworkSettings_Type" json:"type,omitempty"`
}

func (x *NodeTemplate_NetworkSettings) Reset() {
	*x = NodeTemplate_NetworkSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeTemplate_NetworkSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeTemplate_NetworkSettings) ProtoMessage() {}

func (x *NodeTemplate_NetworkSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeTemplate_NetworkSettings.ProtoReflect.Descriptor instead.
func (*NodeTemplate_NetworkSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{4, 2}
}

func (x *NodeTemplate_NetworkSettings) GetType() NodeTemplate_NetworkSettings_Type {
	if x != nil {
		return x.Type
	}
	return NodeTemplate_NetworkSettings_TYPE_UNSPECIFIED
}

type NodeTemplate_ContainerRuntimeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type NodeTemplate_ContainerRuntimeSettings_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.k8s.v1.NodeTemplate_ContainerRuntimeSettings_Type" json:"type,omitempty"`
}

func (x *NodeTemplate_ContainerRuntimeSettings) Reset() {
	*x = NodeTemplate_ContainerRuntimeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeTemplate_ContainerRuntimeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeTemplate_ContainerRuntimeSettings) ProtoMessage() {}

func (x *NodeTemplate_ContainerRuntimeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeTemplate_ContainerRuntimeSettings.ProtoReflect.Descriptor instead.
func (*NodeTemplate_ContainerRuntimeSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP(), []int{4, 3}
}

func (x *NodeTemplate_ContainerRuntimeSettings) GetType() NodeTemplate_ContainerRuntimeSettings_Type {
	if x != nil {
		return x.Type
	}
	return NodeTemplate_ContainerRuntimeSettings_TYPE_UNSPECIFIED
}

var File_yandex_cloud_k8s_v1_node_proto protoreflect.FileDescriptor

var file_yandex_cloud_k8s_v1_node_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b,
	0x38, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x06, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x38,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0xe6, 0x01, 0x0a, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x5c, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x7b, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x40,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x64,
	0x69, 0x73, 0x6b, 0x22, 0x6c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x22, 0xeb, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4c, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xc5, 0x01, 0x0a, 0x05, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x59, 0x0a, 0x06,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x45, 0x10, 0x03, 0x22, 0x56, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0xe8, 0x0b, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x7c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x35,
	0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x33, 0x32, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32,
	0x38, 0xb2, 0xc8, 0x31, 0x06, 0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x16, 0x12,
	0x14, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x2e, 0x2f, 0x5c, 0x40, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x49,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x0e, 0x62, 0x6f, 0x6f,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x81,
	0x01, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x34, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x8a, 0xc8, 0x31, 0x08,
	0x3c, 0x3d, 0x31, 0x33, 0x31, 0x30, 0x37, 0x32, 0xb2, 0xc8, 0x31, 0x06, 0x1a, 0x04, 0x31, 0x2d,
	0x36, 0x33, 0xb2, 0xc8, 0x31, 0x12, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x50, 0x0a, 0x0f, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x52, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x61, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5c, 0x0a, 0x10,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x78, 0x0a, 0x1a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa9, 0x01, 0x0a,
	0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x50, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x44, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x4c,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0xaf, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x59, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x38, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x44, 0x10, 0x02, 0x22, 0x9d, 0x02, 0x0a, 0x14, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x5b, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x34,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x56, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x5b, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x36, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x56,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x52,
	0x0a, 0x13, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x4c, 0x0a, 0x10, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0e, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x22, 0x7a, 0x0a, 0x0d, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x18, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x64,
	0x6e, 0x73, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x03, 0x74,
	0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xfa, 0xc7, 0x31, 0x07, 0x30, 0x2d,
	0x38, 0x36, 0x34, 0x30, 0x30, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x74, 0x72, 0x22, 0x50, 0x0a, 0x0f,
	0x4f, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x4e, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x3d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9c,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xfa, 0xc7, 0x31, 0x03, 0x3e, 0x3d, 0x30, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xfa, 0xc7, 0x31, 0x03, 0x3e, 0x3d, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x30, 0x2d, 0x31,
	0x30, 0x30, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xfa, 0xc7, 0x31, 0x03, 0x3e, 0x3d, 0x30, 0x52, 0x04, 0x67, 0x70, 0x75, 0x73, 0x22, 0x96, 0x01,
	0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x58, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0xf2, 0xc7, 0x31, 0x32, 0x7c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x73,
	0x73, 0x64, 0x7c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x68, 0x64, 0x64, 0x7c, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x73, 0x73, 0x64, 0x2d, 0x6e, 0x6f, 0x6e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x13, 0xfa, 0xc7, 0x31, 0x0f, 0x30, 0x2d, 0x34,
	0x33, 0x39, 0x38, 0x30, 0x34, 0x36, 0x35, 0x31, 0x31, 0x31, 0x30, 0x34, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x34, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x3f, 0x0a, 0x0f,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x2a, 0x3b, 0x0a,
	0x09, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x50,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x42, 0x56, 0x0a, 0x17, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x76, 0x31, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6b,
	0x38, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_k8s_v1_node_proto_rawDescOnce sync.Once
	file_yandex_cloud_k8s_v1_node_proto_rawDescData = file_yandex_cloud_k8s_v1_node_proto_rawDesc
)

func file_yandex_cloud_k8s_v1_node_proto_rawDescGZIP() []byte {
	file_yandex_cloud_k8s_v1_node_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_k8s_v1_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_k8s_v1_node_proto_rawDescData)
	})
	return file_yandex_cloud_k8s_v1_node_proto_rawDescData
}

var file_yandex_cloud_k8s_v1_node_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_yandex_cloud_k8s_v1_node_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_yandex_cloud_k8s_v1_node_proto_goTypes = []interface{}{
	(IpVersion)(0),                                  // 0: yandex.cloud.k8s.v1.IpVersion
	(Node_Status)(0),                                // 1: yandex.cloud.k8s.v1.Node.Status
	(Taint_Effect)(0),                               // 2: yandex.cloud.k8s.v1.Taint.Effect
	(NodeTemplate_NetworkSettings_Type)(0),          // 3: yandex.cloud.k8s.v1.NodeTemplate.NetworkSettings.Type
	(NodeTemplate_ContainerRuntimeSettings_Type)(0), // 4: yandex.cloud.k8s.v1.NodeTemplate.ContainerRuntimeSettings.Type
	(*Node)(nil),                                    // 5: yandex.cloud.k8s.v1.Node
	(*Condition)(nil),                               // 6: yandex.cloud.k8s.v1.Condition
	(*Taint)(nil),                                   // 7: yandex.cloud.k8s.v1.Taint
	(*AttachedVolume)(nil),                          // 8: yandex.cloud.k8s.v1.AttachedVolume
	(*NodeTemplate)(nil),                            // 9: yandex.cloud.k8s.v1.NodeTemplate
	(*NetworkInterfaceSpec)(nil),                    // 10: yandex.cloud.k8s.v1.NetworkInterfaceSpec
	(*NodeAddressSpec)(nil),                         // 11: yandex.cloud.k8s.v1.NodeAddressSpec
	(*DnsRecordSpec)(nil),                           // 12: yandex.cloud.k8s.v1.DnsRecordSpec
	(*OneToOneNatSpec)(nil),                         // 13: yandex.cloud.k8s.v1.OneToOneNatSpec
	(*ResourcesSpec)(nil),                           // 14: yandex.cloud.k8s.v1.ResourcesSpec
	(*DiskSpec)(nil),                                // 15: yandex.cloud.k8s.v1.DiskSpec
	(*SchedulingPolicy)(nil),                        // 16: yandex.cloud.k8s.v1.SchedulingPolicy
	(*PlacementPolicy)(nil),                         // 17: yandex.cloud.k8s.v1.PlacementPolicy
	(*Node_KubernetesStatus)(nil),                   // 18: yandex.cloud.k8s.v1.Node.KubernetesStatus
	(*Node_CloudStatus)(nil),                        // 19: yandex.cloud.k8s.v1.Node.CloudStatus
	(*Node_Spec)(nil),                               // 20: yandex.cloud.k8s.v1.Node.Spec
	nil,                                             // 21: yandex.cloud.k8s.v1.NodeTemplate.LabelsEntry
	nil,                                             // 22: yandex.cloud.k8s.v1.NodeTemplate.MetadataEntry
	(*NodeTemplate_NetworkSettings)(nil),            // 23: yandex.cloud.k8s.v1.NodeTemplate.NetworkSettings
	(*NodeTemplate_ContainerRuntimeSettings)(nil),   // 24: yandex.cloud.k8s.v1.NodeTemplate.ContainerRuntimeSettings
	(*timestamppb.Timestamp)(nil),                   // 25: google.protobuf.Timestamp
}
var file_yandex_cloud_k8s_v1_node_proto_depIdxs = []int32{
	1,  // 0: yandex.cloud.k8s.v1.Node.status:type_name -> yandex.cloud.k8s.v1.Node.Status
	20, // 1: yandex.cloud.k8s.v1.Node.spec:type_name -> yandex.cloud.k8s.v1.Node.Spec
	19, // 2: yandex.cloud.k8s.v1.Node.cloud_status:type_name -> yandex.cloud.k8s.v1.Node.CloudStatus
	18, // 3: yandex.cloud.k8s.v1.Node.kubernetes_status:type_name -> yandex.cloud.k8s.v1.Node.KubernetesStatus
	25, // 4: yandex.cloud.k8s.v1.Condition.last_heartbeat_time:type_name -> google.protobuf.Timestamp
	25, // 5: yandex.cloud.k8s.v1.Condition.last_transition_time:type_name -> google.protobuf.Timestamp
	2,  // 6: yandex.cloud.k8s.v1.Taint.effect:type_name -> yandex.cloud.k8s.v1.Taint.Effect
	21, // 7: yandex.cloud.k8s.v1.NodeTemplate.labels:type_name -> yandex.cloud.k8s.v1.NodeTemplate.LabelsEntry
	14, // 8: yandex.cloud.k8s.v1.NodeTemplate.resources_spec:type_name -> yandex.cloud.k8s.v1.ResourcesSpec
	15, // 9: yandex.cloud.k8s.v1.NodeTemplate.boot_disk_spec:type_name -> yandex.cloud.k8s.v1.DiskSpec
	22, // 10: yandex.cloud.k8s.v1.NodeTemplate.metadata:type_name -> yandex.cloud.k8s.v1.NodeTemplate.MetadataEntry
	11, // 11: yandex.cloud.k8s.v1.NodeTemplate.v4_address_spec:type_name -> yandex.cloud.k8s.v1.NodeAddressSpec
	16, // 12: yandex.cloud.k8s.v1.NodeTemplate.scheduling_policy:type_name -> yandex.cloud.k8s.v1.SchedulingPolicy
	10, // 13: yandex.cloud.k8s.v1.NodeTemplate.network_interface_specs:type_name -> yandex.cloud.k8s.v1.NetworkInterfaceSpec
	17, // 14: yandex.cloud.k8s.v1.NodeTemplate.placement_policy:type_name -> yandex.cloud.k8s.v1.PlacementPolicy
	23, // 15: yandex.cloud.k8s.v1.NodeTemplate.network_settings:type_name -> yandex.cloud.k8s.v1.NodeTemplate.NetworkSettings
	24, // 16: yandex.cloud.k8s.v1.NodeTemplate.container_runtime_settings:type_name -> yandex.cloud.k8s.v1.NodeTemplate.ContainerRuntimeSettings
	11, // 17: yandex.cloud.k8s.v1.NetworkInterfaceSpec.primary_v4_address_spec:type_name -> yandex.cloud.k8s.v1.NodeAddressSpec
	11, // 18: yandex.cloud.k8s.v1.NetworkInterfaceSpec.primary_v6_address_spec:type_name -> yandex.cloud.k8s.v1.NodeAddressSpec
	13, // 19: yandex.cloud.k8s.v1.NodeAddressSpec.one_to_one_nat_spec:type_name -> yandex.cloud.k8s.v1.OneToOneNatSpec
	12, // 20: yandex.cloud.k8s.v1.NodeAddressSpec.dns_record_specs:type_name -> yandex.cloud.k8s.v1.DnsRecordSpec
	0,  // 21: yandex.cloud.k8s.v1.OneToOneNatSpec.ip_version:type_name -> yandex.cloud.k8s.v1.IpVersion
	6,  // 22: yandex.cloud.k8s.v1.Node.KubernetesStatus.conditions:type_name -> yandex.cloud.k8s.v1.Condition
	7,  // 23: yandex.cloud.k8s.v1.Node.KubernetesStatus.taints:type_name -> yandex.cloud.k8s.v1.Taint
	8,  // 24: yandex.cloud.k8s.v1.Node.KubernetesStatus.attached_volumes:type_name -> yandex.cloud.k8s.v1.AttachedVolume
	14, // 25: yandex.cloud.k8s.v1.Node.Spec.resources:type_name -> yandex.cloud.k8s.v1.ResourcesSpec
	15, // 26: yandex.cloud.k8s.v1.Node.Spec.disk:type_name -> yandex.cloud.k8s.v1.DiskSpec
	3,  // 27: yandex.cloud.k8s.v1.NodeTemplate.NetworkSettings.type:type_name -> yandex.cloud.k8s.v1.NodeTemplate.NetworkSettings.Type
	4,  // 28: yandex.cloud.k8s.v1.NodeTemplate.ContainerRuntimeSettings.type:type_name -> yandex.cloud.k8s.v1.NodeTemplate.ContainerRuntimeSettings.Type
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_yandex_cloud_k8s_v1_node_proto_init() }
func file_yandex_cloud_k8s_v1_node_proto_init() {
	if File_yandex_cloud_k8s_v1_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachedVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterfaceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAddressSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsRecordSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneToOneNatSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_KubernetesStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_CloudStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeTemplate_NetworkSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_v1_node_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeTemplate_ContainerRuntimeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_k8s_v1_node_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_k8s_v1_node_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_k8s_v1_node_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_k8s_v1_node_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_k8s_v1_node_proto_msgTypes,
	}.Build()
	File_yandex_cloud_k8s_v1_node_proto = out.File
	file_yandex_cloud_k8s_v1_node_proto_rawDesc = nil
	file_yandex_cloud_k8s_v1_node_proto_goTypes = nil
	file_yandex_cloud_k8s_v1_node_proto_depIdxs = nil
}
