// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: yandex/cloud/ai/vision/v1/vision_service.proto

package vision

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Feature_Type int32

const (
	Feature_TYPE_UNSPECIFIED Feature_Type = 0
	// Text detection (OCR) feature.
	Feature_TEXT_DETECTION Feature_Type = 1
	// Classification feature.
	Feature_CLASSIFICATION Feature_Type = 2
	// Face detection feature.
	Feature_FACE_DETECTION Feature_Type = 3
	// Image copy search.
	Feature_IMAGE_COPY_SEARCH Feature_Type = 4
)

// Enum value maps for Feature_Type.
var (
	Feature_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TEXT_DETECTION",
		2: "CLASSIFICATION",
		3: "FACE_DETECTION",
		4: "IMAGE_COPY_SEARCH",
	}
	Feature_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":  0,
		"TEXT_DETECTION":    1,
		"CLASSIFICATION":    2,
		"FACE_DETECTION":    3,
		"IMAGE_COPY_SEARCH": 4,
	}
)

func (x Feature_Type) Enum() *Feature_Type {
	p := new(Feature_Type)
	*p = x
	return p
}

func (x Feature_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Feature_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_ai_vision_v1_vision_service_proto_enumTypes[0].Descriptor()
}

func (Feature_Type) Type() protoreflect.EnumType {
	return &file_yandex_cloud_ai_vision_v1_vision_service_proto_enumTypes[0]
}

func (x Feature_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Feature_Type.Descriptor instead.
func (Feature_Type) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescGZIP(), []int{2, 0}
}

type BatchAnalyzeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of specifications. Each specification contains the file to analyze and features to use for analysis.
	//
	// Restrictions:
	// * Supported file formats: JPEG, PNG.
	// * Maximum file size: 1 MB.
	// * Image size should not exceed 20M pixels (length x width).
	AnalyzeSpecs []*AnalyzeSpec `protobuf:"bytes,1,rep,name=analyze_specs,json=analyzeSpecs,proto3" json:"analyze_specs,omitempty"`
	// ID of the folder to which you have access.
	// Required for authorization with a user account (see [yandex.cloud.iam.v1.UserAccount] resource).
	// Don't specify this field if you make the request on behalf of a service account.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *BatchAnalyzeRequest) Reset() {
	*x = BatchAnalyzeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAnalyzeRequest) ProtoMessage() {}

func (x *BatchAnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAnalyzeRequest.ProtoReflect.Descriptor instead.
func (*BatchAnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescGZIP(), []int{0}
}

func (x *BatchAnalyzeRequest) GetAnalyzeSpecs() []*AnalyzeSpec {
	if x != nil {
		return x.AnalyzeSpecs
	}
	return nil
}

func (x *BatchAnalyzeRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

type AnalyzeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//	*AnalyzeSpec_Content
	//	*AnalyzeSpec_Signature
	Source isAnalyzeSpec_Source `protobuf_oneof:"source"`
	// Requested features to use for analysis.
	//
	// Max count of requested features for one file is 8.
	Features []*Feature `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	// [MIME type](https://en.wikipedia.org/wiki/Media_type) of content (for example, `` application/pdf ``).
	MimeType string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
}

func (x *AnalyzeSpec) Reset() {
	*x = AnalyzeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeSpec) ProtoMessage() {}

func (x *AnalyzeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeSpec.ProtoReflect.Descriptor instead.
func (*AnalyzeSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescGZIP(), []int{1}
}

func (m *AnalyzeSpec) GetSource() isAnalyzeSpec_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *AnalyzeSpec) GetContent() []byte {
	if x, ok := x.GetSource().(*AnalyzeSpec_Content); ok {
		return x.Content
	}
	return nil
}

func (x *AnalyzeSpec) GetSignature() string {
	if x, ok := x.GetSource().(*AnalyzeSpec_Signature); ok {
		return x.Signature
	}
	return ""
}

func (x *AnalyzeSpec) GetFeatures() []*Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *AnalyzeSpec) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type isAnalyzeSpec_Source interface {
	isAnalyzeSpec_Source()
}

type AnalyzeSpec_Content struct {
	// Image content, represented as a stream of bytes.
	// Note: As with all bytes fields, protobuffers use a pure binary representation, whereas JSON representations use base64.
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3,oneof"`
}

type AnalyzeSpec_Signature struct {
	Signature string `protobuf:"bytes,5,opt,name=signature,proto3,oneof"`
}

func (*AnalyzeSpec_Content) isAnalyzeSpec_Source() {}

func (*AnalyzeSpec_Signature) isAnalyzeSpec_Source() {}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of requested feature.
	Type Feature_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.ai.vision.v1.Feature_Type" json:"type,omitempty"`
	// Types that are assignable to Config:
	//	*Feature_ClassificationConfig
	//	*Feature_TextDetectionConfig
	Config isFeature_Config `protobuf_oneof:"config"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescGZIP(), []int{2}
}

func (x *Feature) GetType() Feature_Type {
	if x != nil {
		return x.Type
	}
	return Feature_TYPE_UNSPECIFIED
}

func (m *Feature) GetConfig() isFeature_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Feature) GetClassificationConfig() *FeatureClassificationConfig {
	if x, ok := x.GetConfig().(*Feature_ClassificationConfig); ok {
		return x.ClassificationConfig
	}
	return nil
}

func (x *Feature) GetTextDetectionConfig() *FeatureTextDetectionConfig {
	if x, ok := x.GetConfig().(*Feature_TextDetectionConfig); ok {
		return x.TextDetectionConfig
	}
	return nil
}

type isFeature_Config interface {
	isFeature_Config()
}

type Feature_ClassificationConfig struct {
	// Required for the `CLASSIFICATION` type. Specifies configuration for the classification feature.
	ClassificationConfig *FeatureClassificationConfig `protobuf:"bytes,2,opt,name=classification_config,json=classificationConfig,proto3,oneof"`
}

type Feature_TextDetectionConfig struct {
	// Required for the `TEXT_DETECTION` type. Specifies configuration for the text detection (OCR) feature.
	TextDetectionConfig *FeatureTextDetectionConfig `protobuf:"bytes,3,opt,name=text_detection_config,json=textDetectionConfig,proto3,oneof"`
}

func (*Feature_ClassificationConfig) isFeature_Config() {}

func (*Feature_TextDetectionConfig) isFeature_Config() {}

type FeatureClassificationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Model to use for image classification.
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *FeatureClassificationConfig) Reset() {
	*x = FeatureClassificationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureClassificationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureClassificationConfig) ProtoMessage() {}

func (x *FeatureClassificationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureClassificationConfig.ProtoReflect.Descriptor instead.
func (*FeatureClassificationConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescGZIP(), []int{3}
}

func (x *FeatureClassificationConfig) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type FeatureTextDetectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of the languages to recognize text.
	// Specified in [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format (for example, `` ru ``).
	LanguageCodes []string `protobuf:"bytes,1,rep,name=language_codes,json=languageCodes,proto3" json:"language_codes,omitempty"`
	// Model to use for text detection.
	// Possible values:
	// * page (default) - this model is suitable for detecting multiple text entries in an image.
	// * line - this model is suitable for cropped images with one line of text.
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *FeatureTextDetectionConfig) Reset() {
	*x = FeatureTextDetectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureTextDetectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureTextDetectionConfig) ProtoMessage() {}

func (x *FeatureTextDetectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureTextDetectionConfig.ProtoReflect.Descriptor instead.
func (*FeatureTextDetectionConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescGZIP(), []int{4}
}

func (x *FeatureTextDetectionConfig) GetLanguageCodes() []string {
	if x != nil {
		return x.LanguageCodes
	}
	return nil
}

func (x *FeatureTextDetectionConfig) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type BatchAnalyzeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request results.
	// Results have the same order as specifications in the request.
	Results []*AnalyzeResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchAnalyzeResponse) Reset() {
	*x = BatchAnalyzeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAnalyzeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAnalyzeResponse) ProtoMessage() {}

func (x *BatchAnalyzeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAnalyzeResponse.ProtoReflect.Descriptor instead.
func (*BatchAnalyzeResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescGZIP(), []int{5}
}

func (x *BatchAnalyzeResponse) GetResults() []*AnalyzeResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type AnalyzeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Results for each requested feature.
	// Feature results have the same order as in the request.
	Results []*FeatureResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	// Return error in case of error with file processing.
	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AnalyzeResult) Reset() {
	*x = AnalyzeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeResult) ProtoMessage() {}

func (x *AnalyzeResult) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeResult.ProtoReflect.Descriptor instead.
func (*AnalyzeResult) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescGZIP(), []int{6}
}

func (x *AnalyzeResult) GetResults() []*FeatureResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *AnalyzeResult) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

type FeatureResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Feature:
	//	*FeatureResult_TextDetection
	//	*FeatureResult_Classification
	//	*FeatureResult_FaceDetection
	//	*FeatureResult_ImageCopySearch
	Feature isFeatureResult_Feature `protobuf_oneof:"feature"`
	// Return error in case of error during the specified feature processing.
	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FeatureResult) Reset() {
	*x = FeatureResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureResult) ProtoMessage() {}

func (x *FeatureResult) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureResult.ProtoReflect.Descriptor instead.
func (*FeatureResult) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescGZIP(), []int{7}
}

func (m *FeatureResult) GetFeature() isFeatureResult_Feature {
	if m != nil {
		return m.Feature
	}
	return nil
}

func (x *FeatureResult) GetTextDetection() *TextAnnotation {
	if x, ok := x.GetFeature().(*FeatureResult_TextDetection); ok {
		return x.TextDetection
	}
	return nil
}

func (x *FeatureResult) GetClassification() *ClassAnnotation {
	if x, ok := x.GetFeature().(*FeatureResult_Classification); ok {
		return x.Classification
	}
	return nil
}

func (x *FeatureResult) GetFaceDetection() *FaceAnnotation {
	if x, ok := x.GetFeature().(*FeatureResult_FaceDetection); ok {
		return x.FaceDetection
	}
	return nil
}

func (x *FeatureResult) GetImageCopySearch() *ImageCopySearchAnnotation {
	if x, ok := x.GetFeature().(*FeatureResult_ImageCopySearch); ok {
		return x.ImageCopySearch
	}
	return nil
}

func (x *FeatureResult) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

type isFeatureResult_Feature interface {
	isFeatureResult_Feature()
}

type FeatureResult_TextDetection struct {
	// Text detection (OCR) result.
	TextDetection *TextAnnotation `protobuf:"bytes,2,opt,name=text_detection,json=textDetection,proto3,oneof"`
}

type FeatureResult_Classification struct {
	// Classification result.
	Classification *ClassAnnotation `protobuf:"bytes,3,opt,name=classification,proto3,oneof"`
}

type FeatureResult_FaceDetection struct {
	// Face detection result.
	FaceDetection *FaceAnnotation `protobuf:"bytes,4,opt,name=face_detection,json=faceDetection,proto3,oneof"`
}

type FeatureResult_ImageCopySearch struct {
	// Image Copy Search result.
	ImageCopySearch *ImageCopySearchAnnotation `protobuf:"bytes,5,opt,name=image_copy_search,json=imageCopySearch,proto3,oneof"`
}

func (*FeatureResult_TextDetection) isFeatureResult_Feature() {}

func (*FeatureResult_Classification) isFeatureResult_Feature() {}

func (*FeatureResult_FaceDetection) isFeatureResult_Feature() {}

func (*FeatureResult_ImageCopySearch) isFeatureResult_Feature() {}

var File_yandex_cloud_ai_vision_v1_vision_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x70,
	0x79, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0d,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x07, 0x82, 0xc8, 0x31,
	0x03, 0x31, 0x2d, 0x38, 0x52, 0x0c, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x12, 0x25, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52,
	0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x0b, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0x8a, 0xc8, 0x31, 0x0a,
	0x3c, 0x3d, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37, 0x36, 0x30, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x8a, 0xc8, 0x31, 0x07, 0x3c, 0x3d,
	0x31, 0x36, 0x33, 0x38, 0x34, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x07, 0x82, 0xc8, 0x31, 0x03, 0x31, 0x2d,
	0x38, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x09, 0x6d,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x35, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x04, 0xc0,
	0xc1, 0x31, 0x01, 0x22, 0x9d, 0x03, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x15,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x15, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x13, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x50, 0x59,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x04, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x3e, 0x0a, 0x1b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1f, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x22, 0x73, 0x0a, 0x1a, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x35, 0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0x82, 0xc8, 0x31, 0x03, 0x31,
	0x2d, 0x38, 0x8a, 0xc8, 0x31, 0x03, 0x3c, 0x3d, 0x33, 0x52, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35,
	0x30, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x5a, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x0d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xa6, 0x03, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0e, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x70,
	0x79, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x70, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x70,
	0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x42, 0x09, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0xa5, 0x01, 0x0a,
	0x0d, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x93,
	0x01, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12,
	0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x3a, 0x01, 0x2a, 0x42, 0x65, 0x0a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescData = file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDesc
)

func file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescData)
	})
	return file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDescData
}

var file_yandex_cloud_ai_vision_v1_vision_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_yandex_cloud_ai_vision_v1_vision_service_proto_goTypes = []interface{}{
	(Feature_Type)(0),                   // 0: yandex.cloud.ai.vision.v1.Feature.Type
	(*BatchAnalyzeRequest)(nil),         // 1: yandex.cloud.ai.vision.v1.BatchAnalyzeRequest
	(*AnalyzeSpec)(nil),                 // 2: yandex.cloud.ai.vision.v1.AnalyzeSpec
	(*Feature)(nil),                     // 3: yandex.cloud.ai.vision.v1.Feature
	(*FeatureClassificationConfig)(nil), // 4: yandex.cloud.ai.vision.v1.FeatureClassificationConfig
	(*FeatureTextDetectionConfig)(nil),  // 5: yandex.cloud.ai.vision.v1.FeatureTextDetectionConfig
	(*BatchAnalyzeResponse)(nil),        // 6: yandex.cloud.ai.vision.v1.BatchAnalyzeResponse
	(*AnalyzeResult)(nil),               // 7: yandex.cloud.ai.vision.v1.AnalyzeResult
	(*FeatureResult)(nil),               // 8: yandex.cloud.ai.vision.v1.FeatureResult
	(*status.Status)(nil),               // 9: google.rpc.Status
	(*TextAnnotation)(nil),              // 10: yandex.cloud.ai.vision.v1.TextAnnotation
	(*ClassAnnotation)(nil),             // 11: yandex.cloud.ai.vision.v1.ClassAnnotation
	(*FaceAnnotation)(nil),              // 12: yandex.cloud.ai.vision.v1.FaceAnnotation
	(*ImageCopySearchAnnotation)(nil),   // 13: yandex.cloud.ai.vision.v1.ImageCopySearchAnnotation
}
var file_yandex_cloud_ai_vision_v1_vision_service_proto_depIdxs = []int32{
	2,  // 0: yandex.cloud.ai.vision.v1.BatchAnalyzeRequest.analyze_specs:type_name -> yandex.cloud.ai.vision.v1.AnalyzeSpec
	3,  // 1: yandex.cloud.ai.vision.v1.AnalyzeSpec.features:type_name -> yandex.cloud.ai.vision.v1.Feature
	0,  // 2: yandex.cloud.ai.vision.v1.Feature.type:type_name -> yandex.cloud.ai.vision.v1.Feature.Type
	4,  // 3: yandex.cloud.ai.vision.v1.Feature.classification_config:type_name -> yandex.cloud.ai.vision.v1.FeatureClassificationConfig
	5,  // 4: yandex.cloud.ai.vision.v1.Feature.text_detection_config:type_name -> yandex.cloud.ai.vision.v1.FeatureTextDetectionConfig
	7,  // 5: yandex.cloud.ai.vision.v1.BatchAnalyzeResponse.results:type_name -> yandex.cloud.ai.vision.v1.AnalyzeResult
	8,  // 6: yandex.cloud.ai.vision.v1.AnalyzeResult.results:type_name -> yandex.cloud.ai.vision.v1.FeatureResult
	9,  // 7: yandex.cloud.ai.vision.v1.AnalyzeResult.error:type_name -> google.rpc.Status
	10, // 8: yandex.cloud.ai.vision.v1.FeatureResult.text_detection:type_name -> yandex.cloud.ai.vision.v1.TextAnnotation
	11, // 9: yandex.cloud.ai.vision.v1.FeatureResult.classification:type_name -> yandex.cloud.ai.vision.v1.ClassAnnotation
	12, // 10: yandex.cloud.ai.vision.v1.FeatureResult.face_detection:type_name -> yandex.cloud.ai.vision.v1.FaceAnnotation
	13, // 11: yandex.cloud.ai.vision.v1.FeatureResult.image_copy_search:type_name -> yandex.cloud.ai.vision.v1.ImageCopySearchAnnotation
	9,  // 12: yandex.cloud.ai.vision.v1.FeatureResult.error:type_name -> google.rpc.Status
	1,  // 13: yandex.cloud.ai.vision.v1.VisionService.BatchAnalyze:input_type -> yandex.cloud.ai.vision.v1.BatchAnalyzeRequest
	6,  // 14: yandex.cloud.ai.vision.v1.VisionService.BatchAnalyze:output_type -> yandex.cloud.ai.vision.v1.BatchAnalyzeResponse
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_yandex_cloud_ai_vision_v1_vision_service_proto_init() }
func file_yandex_cloud_ai_vision_v1_vision_service_proto_init() {
	if File_yandex_cloud_ai_vision_v1_vision_service_proto != nil {
		return
	}
	file_yandex_cloud_ai_vision_v1_text_detection_proto_init()
	file_yandex_cloud_ai_vision_v1_classification_proto_init()
	file_yandex_cloud_ai_vision_v1_face_detection_proto_init()
	file_yandex_cloud_ai_vision_v1_image_copy_search_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAnalyzeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureClassificationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureTextDetectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAnalyzeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AnalyzeSpec_Content)(nil),
		(*AnalyzeSpec_Signature)(nil),
	}
	file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Feature_ClassificationConfig)(nil),
		(*Feature_TextDetectionConfig)(nil),
	}
	file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*FeatureResult_TextDetection)(nil),
		(*FeatureResult_Classification)(nil),
		(*FeatureResult_FaceDetection)(nil),
		(*FeatureResult_ImageCopySearch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_ai_vision_v1_vision_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_ai_vision_v1_vision_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_ai_vision_v1_vision_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_ai_vision_v1_vision_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_ai_vision_v1_vision_service_proto = out.File
	file_yandex_cloud_ai_vision_v1_vision_service_proto_rawDesc = nil
	file_yandex_cloud_ai_vision_v1_vision_service_proto_goTypes = nil
	file_yandex_cloud_ai_vision_v1_vision_service_proto_depIdxs = nil
}
