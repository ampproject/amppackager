// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: yandex/cloud/kms/v1/symmetric_crypto_service.proto

package kms

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SymmetricEncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the symmetric KMS key to use for encryption.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// ID of the key version to encrypt plaintext with.
	// Defaults to the primary version if not specified.
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Additional authenticated data (AAD context), optional.
	// If specified, this data will be required for decryption with the [SymmetricDecryptRequest].
	// Should be encoded with base64.
	AadContext []byte `protobuf:"bytes,3,opt,name=aad_context,json=aadContext,proto3" json:"aad_context,omitempty"`
	// Plaintext to be encrypted.
	// Should be encoded with base64.
	Plaintext []byte `protobuf:"bytes,4,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
}

func (x *SymmetricEncryptRequest) Reset() {
	*x = SymmetricEncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricEncryptRequest) ProtoMessage() {}

func (x *SymmetricEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricEncryptRequest.ProtoReflect.Descriptor instead.
func (*SymmetricEncryptRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{0}
}

func (x *SymmetricEncryptRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricEncryptRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricEncryptRequest) GetAadContext() []byte {
	if x != nil {
		return x.AadContext
	}
	return nil
}

func (x *SymmetricEncryptRequest) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

type SymmetricEncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the symmetric KMS key that was used for encryption.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// ID of the key version that was used for encryption.
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Resulting ciphertext.
	Ciphertext []byte `protobuf:"bytes,3,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *SymmetricEncryptResponse) Reset() {
	*x = SymmetricEncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricEncryptResponse) ProtoMessage() {}

func (x *SymmetricEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricEncryptResponse.ProtoReflect.Descriptor instead.
func (*SymmetricEncryptResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{1}
}

func (x *SymmetricEncryptResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricEncryptResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricEncryptResponse) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type SymmetricDecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the symmetric KMS key to use for decryption.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Additional authenticated data, must be the same as was provided
	// in the corresponding [SymmetricEncryptRequest].
	// Should be encoded with base64.
	AadContext []byte `protobuf:"bytes,2,opt,name=aad_context,json=aadContext,proto3" json:"aad_context,omitempty"`
	// Ciphertext to be decrypted.
	// Should be encoded with base64.
	Ciphertext []byte `protobuf:"bytes,3,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *SymmetricDecryptRequest) Reset() {
	*x = SymmetricDecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricDecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricDecryptRequest) ProtoMessage() {}

func (x *SymmetricDecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricDecryptRequest.ProtoReflect.Descriptor instead.
func (*SymmetricDecryptRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{2}
}

func (x *SymmetricDecryptRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricDecryptRequest) GetAadContext() []byte {
	if x != nil {
		return x.AadContext
	}
	return nil
}

func (x *SymmetricDecryptRequest) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type SymmetricDecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the symmetric KMS key that was used for decryption.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// ID of the key version that was used for decryption.
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Decrypted plaintext.
	Plaintext []byte `protobuf:"bytes,3,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
}

func (x *SymmetricDecryptResponse) Reset() {
	*x = SymmetricDecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricDecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricDecryptResponse) ProtoMessage() {}

func (x *SymmetricDecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricDecryptResponse.ProtoReflect.Descriptor instead.
func (*SymmetricDecryptResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{3}
}

func (x *SymmetricDecryptResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricDecryptResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricDecryptResponse) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

type GenerateDataKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the symmetric KMS key that the generated data key should be encrypted with.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// ID of the key version to encrypt the generated data key with.
	// Defaults to the primary version if not specified.
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Additional authenticated data (AAD context), optional.
	// If specified, this data will be required for decryption with the [SymmetricDecryptRequest].
	// Should be encoded with base64.
	AadContext []byte `protobuf:"bytes,3,opt,name=aad_context,json=aadContext,proto3" json:"aad_context,omitempty"`
	// Encryption algorithm and key length for the generated data key.
	DataKeySpec SymmetricAlgorithm `protobuf:"varint,4,opt,name=data_key_spec,json=dataKeySpec,proto3,enum=yandex.cloud.kms.v1.SymmetricAlgorithm" json:"data_key_spec,omitempty"`
	// If `true`, the method won't return the data key as plaintext.
	// Default value is `false`.
	SkipPlaintext bool `protobuf:"varint,5,opt,name=skip_plaintext,json=skipPlaintext,proto3" json:"skip_plaintext,omitempty"`
}

func (x *GenerateDataKeyRequest) Reset() {
	*x = GenerateDataKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDataKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDataKeyRequest) ProtoMessage() {}

func (x *GenerateDataKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDataKeyRequest.ProtoReflect.Descriptor instead.
func (*GenerateDataKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{4}
}

func (x *GenerateDataKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *GenerateDataKeyRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *GenerateDataKeyRequest) GetAadContext() []byte {
	if x != nil {
		return x.AadContext
	}
	return nil
}

func (x *GenerateDataKeyRequest) GetDataKeySpec() SymmetricAlgorithm {
	if x != nil {
		return x.DataKeySpec
	}
	return SymmetricAlgorithm_SYMMETRIC_ALGORITHM_UNSPECIFIED
}

func (x *GenerateDataKeyRequest) GetSkipPlaintext() bool {
	if x != nil {
		return x.SkipPlaintext
	}
	return false
}

type GenerateDataKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the symmetric KMS key that was used to encrypt the generated data key.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// ID of the key version that was used for encryption.
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Generated data key as plaintext.
	// The field is empty, if the [GenerateDataKeyRequest.skip_plaintext] parameter
	// was set to `true`.
	DataKeyPlaintext []byte `protobuf:"bytes,3,opt,name=data_key_plaintext,json=dataKeyPlaintext,proto3" json:"data_key_plaintext,omitempty"`
	// The encrypted data key.
	DataKeyCiphertext []byte `protobuf:"bytes,4,opt,name=data_key_ciphertext,json=dataKeyCiphertext,proto3" json:"data_key_ciphertext,omitempty"`
}

func (x *GenerateDataKeyResponse) Reset() {
	*x = GenerateDataKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDataKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDataKeyResponse) ProtoMessage() {}

func (x *GenerateDataKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDataKeyResponse.ProtoReflect.Descriptor instead.
func (*GenerateDataKeyResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateDataKeyResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *GenerateDataKeyResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *GenerateDataKeyResponse) GetDataKeyPlaintext() []byte {
	if x != nil {
		return x.DataKeyPlaintext
	}
	return nil
}

func (x *GenerateDataKeyResponse) GetDataKeyCiphertext() []byte {
	if x != nil {
		return x.DataKeyCiphertext
	}
	return nil
}

type SymmetricReEncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the new key to be used for encryption.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// ID of the version of the new key to be used for encryption.
	// Defaults to the primary version if not specified.
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// Additional authenticated data to be required for decryption.
	// Should be encoded with base64.
	AadContext []byte `protobuf:"bytes,3,opt,name=aad_context,json=aadContext,proto3" json:"aad_context,omitempty"`
	// ID of the key that the ciphertext is currently encrypted with. May be the same as for the new key.
	SourceKeyId string `protobuf:"bytes,4,opt,name=source_key_id,json=sourceKeyId,proto3" json:"source_key_id,omitempty"`
	// Additional authenticated data provided with the initial encryption request.
	// Should be encoded with base64.
	SourceAadContext []byte `protobuf:"bytes,5,opt,name=source_aad_context,json=sourceAadContext,proto3" json:"source_aad_context,omitempty"`
	// Ciphertext to re-encrypt.
	// Should be encoded with base64.
	Ciphertext []byte `protobuf:"bytes,6,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *SymmetricReEncryptRequest) Reset() {
	*x = SymmetricReEncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricReEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricReEncryptRequest) ProtoMessage() {}

func (x *SymmetricReEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricReEncryptRequest.ProtoReflect.Descriptor instead.
func (*SymmetricReEncryptRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{6}
}

func (x *SymmetricReEncryptRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricReEncryptRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricReEncryptRequest) GetAadContext() []byte {
	if x != nil {
		return x.AadContext
	}
	return nil
}

func (x *SymmetricReEncryptRequest) GetSourceKeyId() string {
	if x != nil {
		return x.SourceKeyId
	}
	return ""
}

func (x *SymmetricReEncryptRequest) GetSourceAadContext() []byte {
	if x != nil {
		return x.SourceAadContext
	}
	return nil
}

func (x *SymmetricReEncryptRequest) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type SymmetricReEncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the key that the ciphertext is encrypted with now.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// ID of key version that was used for encryption.
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// ID of the key that the ciphertext was encrypted with previously.
	SourceKeyId string `protobuf:"bytes,3,opt,name=source_key_id,json=sourceKeyId,proto3" json:"source_key_id,omitempty"`
	// ID of the key version that was used to decrypt the re-encrypted ciphertext.
	SourceVersionId string `protobuf:"bytes,4,opt,name=source_version_id,json=sourceVersionId,proto3" json:"source_version_id,omitempty"`
	// Resulting re-encrypted ciphertext.
	Ciphertext []byte `protobuf:"bytes,5,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *SymmetricReEncryptResponse) Reset() {
	*x = SymmetricReEncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymmetricReEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymmetricReEncryptResponse) ProtoMessage() {}

func (x *SymmetricReEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymmetricReEncryptResponse.ProtoReflect.Descriptor instead.
func (*SymmetricReEncryptResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescGZIP(), []int{7}
}

func (x *SymmetricReEncryptResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SymmetricReEncryptResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *SymmetricReEncryptResponse) GetSourceKeyId() string {
	if x != nil {
		return x.SourceKeyId
	}
	return ""
}

func (x *SymmetricReEncryptResponse) GetSourceVersionId() string {
	if x != nil {
		return x.SourceVersionId
	}
	return ""
}

func (x *SymmetricReEncryptResponse) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

var File_yandex_cloud_kms_v1_symmetric_crypto_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDesc = []byte{
	0x0a, 0x32, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b,
	0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc3, 0x01, 0x0a, 0x17, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31,
	0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x61, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a,
	0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31, 0x39, 0x32, 0x52, 0x0a, 0x61, 0x61, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0f, 0xe8, 0xc7, 0x31, 0x01, 0x8a,
	0xc8, 0x31, 0x07, 0x3c, 0x3d, 0x33, 0x32, 0x37, 0x36, 0x38, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31,
	0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x91, 0x01, 0x0a, 0x17, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7,
	0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x61, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31,
	0x39, 0x32, 0x52, 0x0a, 0x61, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24,
	0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x6e, 0x0a, 0x18, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x0b, 0x61, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31, 0x39, 0x32, 0x52, 0x0a,
	0x61, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xad,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x64, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa8,
	0x02, 0x0a, 0x19, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7,
	0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52,
	0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x61, 0x61,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31, 0x39, 0x32, 0x52, 0x0a, 0x61, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x12, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x61, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x38, 0x31, 0x39,
	0x32, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0a, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x1a, 0x53, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x32, 0xfa,
	0x04, 0x0a, 0x16, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x07, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x6b, 0x6d, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a,
	0x07, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f,
	0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0x98, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x2e, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x6d, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x6d, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x72, 0x65,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x2b,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x6d,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x22, 0x25, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f,
	0x7b, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x3a, 0x01, 0x2a, 0x42, 0x56, 0x0a, 0x17, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x6b, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescData = file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDesc
)

func file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescData)
	})
	return file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDescData
}

var file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_goTypes = []interface{}{
	(*SymmetricEncryptRequest)(nil),    // 0: yandex.cloud.kms.v1.SymmetricEncryptRequest
	(*SymmetricEncryptResponse)(nil),   // 1: yandex.cloud.kms.v1.SymmetricEncryptResponse
	(*SymmetricDecryptRequest)(nil),    // 2: yandex.cloud.kms.v1.SymmetricDecryptRequest
	(*SymmetricDecryptResponse)(nil),   // 3: yandex.cloud.kms.v1.SymmetricDecryptResponse
	(*GenerateDataKeyRequest)(nil),     // 4: yandex.cloud.kms.v1.GenerateDataKeyRequest
	(*GenerateDataKeyResponse)(nil),    // 5: yandex.cloud.kms.v1.GenerateDataKeyResponse
	(*SymmetricReEncryptRequest)(nil),  // 6: yandex.cloud.kms.v1.SymmetricReEncryptRequest
	(*SymmetricReEncryptResponse)(nil), // 7: yandex.cloud.kms.v1.SymmetricReEncryptResponse
	(SymmetricAlgorithm)(0),            // 8: yandex.cloud.kms.v1.SymmetricAlgorithm
}
var file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_depIdxs = []int32{
	8, // 0: yandex.cloud.kms.v1.GenerateDataKeyRequest.data_key_spec:type_name -> yandex.cloud.kms.v1.SymmetricAlgorithm
	0, // 1: yandex.cloud.kms.v1.SymmetricCryptoService.Encrypt:input_type -> yandex.cloud.kms.v1.SymmetricEncryptRequest
	2, // 2: yandex.cloud.kms.v1.SymmetricCryptoService.Decrypt:input_type -> yandex.cloud.kms.v1.SymmetricDecryptRequest
	6, // 3: yandex.cloud.kms.v1.SymmetricCryptoService.ReEncrypt:input_type -> yandex.cloud.kms.v1.SymmetricReEncryptRequest
	4, // 4: yandex.cloud.kms.v1.SymmetricCryptoService.GenerateDataKey:input_type -> yandex.cloud.kms.v1.GenerateDataKeyRequest
	1, // 5: yandex.cloud.kms.v1.SymmetricCryptoService.Encrypt:output_type -> yandex.cloud.kms.v1.SymmetricEncryptResponse
	3, // 6: yandex.cloud.kms.v1.SymmetricCryptoService.Decrypt:output_type -> yandex.cloud.kms.v1.SymmetricDecryptResponse
	7, // 7: yandex.cloud.kms.v1.SymmetricCryptoService.ReEncrypt:output_type -> yandex.cloud.kms.v1.SymmetricReEncryptResponse
	5, // 8: yandex.cloud.kms.v1.SymmetricCryptoService.GenerateDataKey:output_type -> yandex.cloud.kms.v1.GenerateDataKeyResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_init() }
func file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_init() {
	if File_yandex_cloud_kms_v1_symmetric_crypto_service_proto != nil {
		return
	}
	file_yandex_cloud_kms_v1_symmetric_key_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricEncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricEncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricDecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricDecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDataKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDataKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricReEncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymmetricReEncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_kms_v1_symmetric_crypto_service_proto = out.File
	file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_rawDesc = nil
	file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_goTypes = nil
	file_yandex_cloud_kms_v1_symmetric_crypto_service_proto_depIdxs = nil
}
