// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_key.proto

package kms

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported asymmetric signature algorithms.
type AsymmetricSignatureAlgorithm int32

const (
	AsymmetricSignatureAlgorithm_ASYMMETRIC_SIGNATURE_ALGORITHM_UNSPECIFIED AsymmetricSignatureAlgorithm = 0
	// RSA-2048 signature with PSS padding and SHA-256
	AsymmetricSignatureAlgorithm_RSA_2048_SIGN_PSS_SHA_256 AsymmetricSignatureAlgorithm = 1
	// RSA-2048 signature with PSS padding and SHA-384
	AsymmetricSignatureAlgorithm_RSA_2048_SIGN_PSS_SHA_384 AsymmetricSignatureAlgorithm = 2
	// RSA-2048 signature with PSS padding and SHA-512
	AsymmetricSignatureAlgorithm_RSA_2048_SIGN_PSS_SHA_512 AsymmetricSignatureAlgorithm = 3
	// RSA-3072 signature with PSS padding and SHA-256
	AsymmetricSignatureAlgorithm_RSA_3072_SIGN_PSS_SHA_256 AsymmetricSignatureAlgorithm = 4
	// RSA-3072 signature with PSS padding and SHA-384
	AsymmetricSignatureAlgorithm_RSA_3072_SIGN_PSS_SHA_384 AsymmetricSignatureAlgorithm = 5
	// RSA-3072 signature with PSS padding and SHA-512
	AsymmetricSignatureAlgorithm_RSA_3072_SIGN_PSS_SHA_512 AsymmetricSignatureAlgorithm = 6
	// RSA-4096 signature with PSS padding and SHA-256
	AsymmetricSignatureAlgorithm_RSA_4096_SIGN_PSS_SHA_256 AsymmetricSignatureAlgorithm = 7
	// RSA-4096 signature with PSS padding and SHA-384
	AsymmetricSignatureAlgorithm_RSA_4096_SIGN_PSS_SHA_384 AsymmetricSignatureAlgorithm = 8
	// RSA-4096 signature with PSS padding and SHA-512
	AsymmetricSignatureAlgorithm_RSA_4096_SIGN_PSS_SHA_512 AsymmetricSignatureAlgorithm = 9
	// ECDSA signature with NIST P-256 curve and SHA-256
	AsymmetricSignatureAlgorithm_ECDSA_NIST_P256_SHA_256 AsymmetricSignatureAlgorithm = 10
	// ECDSA signature with NIST P-384 curve and SHA-384
	AsymmetricSignatureAlgorithm_ECDSA_NIST_P384_SHA_384 AsymmetricSignatureAlgorithm = 11
	// ECDSA signature with NIST P-521 curve and SHA-512
	AsymmetricSignatureAlgorithm_ECDSA_NIST_P521_SHA_512 AsymmetricSignatureAlgorithm = 12
	// ECDSA signature with SECP256_K1 curve and SHA-256
	AsymmetricSignatureAlgorithm_ECDSA_SECP256_K1_SHA_256 AsymmetricSignatureAlgorithm = 13
)

// Enum value maps for AsymmetricSignatureAlgorithm.
var (
	AsymmetricSignatureAlgorithm_name = map[int32]string{
		0:  "ASYMMETRIC_SIGNATURE_ALGORITHM_UNSPECIFIED",
		1:  "RSA_2048_SIGN_PSS_SHA_256",
		2:  "RSA_2048_SIGN_PSS_SHA_384",
		3:  "RSA_2048_SIGN_PSS_SHA_512",
		4:  "RSA_3072_SIGN_PSS_SHA_256",
		5:  "RSA_3072_SIGN_PSS_SHA_384",
		6:  "RSA_3072_SIGN_PSS_SHA_512",
		7:  "RSA_4096_SIGN_PSS_SHA_256",
		8:  "RSA_4096_SIGN_PSS_SHA_384",
		9:  "RSA_4096_SIGN_PSS_SHA_512",
		10: "ECDSA_NIST_P256_SHA_256",
		11: "ECDSA_NIST_P384_SHA_384",
		12: "ECDSA_NIST_P521_SHA_512",
		13: "ECDSA_SECP256_K1_SHA_256",
	}
	AsymmetricSignatureAlgorithm_value = map[string]int32{
		"ASYMMETRIC_SIGNATURE_ALGORITHM_UNSPECIFIED": 0,
		"RSA_2048_SIGN_PSS_SHA_256":                  1,
		"RSA_2048_SIGN_PSS_SHA_384":                  2,
		"RSA_2048_SIGN_PSS_SHA_512":                  3,
		"RSA_3072_SIGN_PSS_SHA_256":                  4,
		"RSA_3072_SIGN_PSS_SHA_384":                  5,
		"RSA_3072_SIGN_PSS_SHA_512":                  6,
		"RSA_4096_SIGN_PSS_SHA_256":                  7,
		"RSA_4096_SIGN_PSS_SHA_384":                  8,
		"RSA_4096_SIGN_PSS_SHA_512":                  9,
		"ECDSA_NIST_P256_SHA_256":                    10,
		"ECDSA_NIST_P384_SHA_384":                    11,
		"ECDSA_NIST_P521_SHA_512":                    12,
		"ECDSA_SECP256_K1_SHA_256":                   13,
	}
)

func (x AsymmetricSignatureAlgorithm) Enum() *AsymmetricSignatureAlgorithm {
	p := new(AsymmetricSignatureAlgorithm)
	*p = x
	return p
}

func (x AsymmetricSignatureAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AsymmetricSignatureAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_enumTypes[0].Descriptor()
}

func (AsymmetricSignatureAlgorithm) Type() protoreflect.EnumType {
	return &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_enumTypes[0]
}

func (x AsymmetricSignatureAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AsymmetricSignatureAlgorithm.Descriptor instead.
func (AsymmetricSignatureAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDescGZIP(), []int{0}
}

type AsymmetricSignatureKey_Status int32

const (
	AsymmetricSignatureKey_STATUS_UNSPECIFIED AsymmetricSignatureKey_Status = 0
	// The key is being created.
	AsymmetricSignatureKey_CREATING AsymmetricSignatureKey_Status = 1
	// The key is active and can be used for encryption and decryption or signature and verification.
	// Can be set to INACTIVE using the [AsymmetricKeyService.Update] method.
	AsymmetricSignatureKey_ACTIVE AsymmetricSignatureKey_Status = 2
	// The key is inactive and unusable.
	// Can be set to ACTIVE using the [AsymmetricKeyService.Update] method.
	AsymmetricSignatureKey_INACTIVE AsymmetricSignatureKey_Status = 3
)

// Enum value maps for AsymmetricSignatureKey_Status.
var (
	AsymmetricSignatureKey_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "CREATING",
		2: "ACTIVE",
		3: "INACTIVE",
	}
	AsymmetricSignatureKey_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"CREATING":           1,
		"ACTIVE":             2,
		"INACTIVE":           3,
	}
)

func (x AsymmetricSignatureKey_Status) Enum() *AsymmetricSignatureKey_Status {
	p := new(AsymmetricSignatureKey_Status)
	*p = x
	return p
}

func (x AsymmetricSignatureKey_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AsymmetricSignatureKey_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_enumTypes[1].Descriptor()
}

func (AsymmetricSignatureKey_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_enumTypes[1]
}

func (x AsymmetricSignatureKey_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AsymmetricSignatureKey_Status.Descriptor instead.
func (AsymmetricSignatureKey_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDescGZIP(), []int{0, 0}
}

// An asymmetric KMS key that may contain several versions of the cryptographic material.
type AsymmetricSignatureKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the key.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the folder that the key belongs to.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Time when the key was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Name of the key.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the key.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the key as `key:value` pairs. Maximum 64 per key.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Current status of the key.
	Status AsymmetricSignatureKey_Status `protobuf:"varint,7,opt,name=status,proto3,enum=yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey_Status" json:"status,omitempty"`
	// Signature Algorithm ID.
	SignatureAlgorithm AsymmetricSignatureAlgorithm `protobuf:"varint,8,opt,name=signature_algorithm,json=signatureAlgorithm,proto3,enum=yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureAlgorithm" json:"signature_algorithm,omitempty"`
	// Flag that inhibits deletion of the key
	DeletionProtection bool `protobuf:"varint,9,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
}

func (x *AsymmetricSignatureKey) Reset() {
	*x = AsymmetricSignatureKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsymmetricSignatureKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsymmetricSignatureKey) ProtoMessage() {}

func (x *AsymmetricSignatureKey) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsymmetricSignatureKey.ProtoReflect.Descriptor instead.
func (*AsymmetricSignatureKey) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDescGZIP(), []int{0}
}

func (x *AsymmetricSignatureKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AsymmetricSignatureKey) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *AsymmetricSignatureKey) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AsymmetricSignatureKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AsymmetricSignatureKey) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AsymmetricSignatureKey) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AsymmetricSignatureKey) GetStatus() AsymmetricSignatureKey_Status {
	if x != nil {
		return x.Status
	}
	return AsymmetricSignatureKey_STATUS_UNSPECIFIED
}

func (x *AsymmetricSignatureKey) GetSignatureAlgorithm() AsymmetricSignatureAlgorithm {
	if x != nil {
		return x.SignatureAlgorithm
	}
	return AsymmetricSignatureAlgorithm_ASYMMETRIC_SIGNATURE_ALGORITHM_UNSPECIFIED
}

func (x *AsymmetricSignatureKey) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

var File_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto protoreflect.FileDescriptor

var file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDesc = []byte{
	0x0a, 0x46, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b,
	0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa9, 0x05, 0x0a, 0x16, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x46, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6d, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x76, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x6d, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x2a, 0xda,
	0x03, 0x0a, 0x1c, 0x41, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12,
	0x2e, 0x0a, 0x2a, 0x41, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x53, 0x41, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x5f, 0x50, 0x53, 0x53, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x52, 0x53, 0x41, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f,
	0x50, 0x53, 0x53, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x53, 0x41, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50,
	0x53, 0x53, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x52, 0x53, 0x41, 0x5f, 0x33, 0x30, 0x37, 0x32, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x53,
	0x53, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x53, 0x41, 0x5f, 0x33, 0x30, 0x37, 0x32, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x53, 0x53,
	0x5f, 0x53, 0x48, 0x41, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x53,
	0x41, 0x5f, 0x33, 0x30, 0x37, 0x32, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x53, 0x53, 0x5f,
	0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x53, 0x41,
	0x5f, 0x34, 0x30, 0x39, 0x36, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x53, 0x53, 0x5f, 0x53,
	0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x53, 0x41, 0x5f,
	0x34, 0x30, 0x39, 0x36, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x53, 0x53, 0x5f, 0x53, 0x48,
	0x41, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x53, 0x41, 0x5f, 0x34,
	0x30, 0x39, 0x36, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x53, 0x53, 0x5f, 0x53, 0x48, 0x41,
	0x5f, 0x35, 0x31, 0x32, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f,
	0x4e, 0x49, 0x53, 0x54, 0x5f, 0x50, 0x32, 0x35, 0x36, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35,
	0x36, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x4e, 0x49, 0x53,
	0x54, 0x5f, 0x50, 0x33, 0x38, 0x34, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x0b,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x4e, 0x49, 0x53, 0x54, 0x5f, 0x50,
	0x35, 0x32, 0x31, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x0c, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x5f, 0x4b,
	0x31, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x0d, 0x42, 0x6a, 0x0a, 0x17, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6b, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x3b, 0x6b, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDescOnce sync.Once
	file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDescData = file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDesc
)

func file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDescGZIP() []byte {
	file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDescData)
	})
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDescData
}

var file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_goTypes = []interface{}{
	(AsymmetricSignatureAlgorithm)(0),  // 0: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureAlgorithm
	(AsymmetricSignatureKey_Status)(0), // 1: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.Status
	(*AsymmetricSignatureKey)(nil),     // 2: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey
	nil,                                // 3: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.LabelsEntry
	(*timestamppb.Timestamp)(nil),      // 4: google.protobuf.Timestamp
}
var file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_depIdxs = []int32{
	4, // 0: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.created_at:type_name -> google.protobuf.Timestamp
	3, // 1: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.labels:type_name -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.LabelsEntry
	1, // 2: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.status:type_name -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.Status
	0, // 3: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.signature_algorithm:type_name -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureAlgorithm
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_init() }
func file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_init() {
	if File_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsymmetricSignatureKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_msgTypes,
	}.Build()
	File_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto = out.File
	file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_rawDesc = nil
	file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_goTypes = nil
	file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_key_proto_depIdxs = nil
}
