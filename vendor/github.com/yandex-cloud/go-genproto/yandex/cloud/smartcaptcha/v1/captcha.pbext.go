// Code generated by protoc-gen-goext. DO NOT EDIT.

package smartcaptcha

import (
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

func (m *Captcha) SetId(v string) {
	m.Id = v
}

func (m *Captcha) SetFolderId(v string) {
	m.FolderId = v
}

func (m *Captcha) SetCloudId(v string) {
	m.CloudId = v
}

func (m *Captcha) SetClientKey(v string) {
	m.ClientKey = v
}

func (m *Captcha) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *Captcha) SetName(v string) {
	m.Name = v
}

func (m *Captcha) SetAllowedSites(v []string) {
	m.AllowedSites = v
}

func (m *Captcha) SetComplexity(v CaptchaComplexity) {
	m.Complexity = v
}

func (m *Captcha) SetStyleJson(v string) {
	m.StyleJson = v
}

func (m *Captcha) SetSuspend(v bool) {
	m.Suspend = v
}

func (m *Captcha) SetTurnOffHostnameCheck(v bool) {
	m.TurnOffHostnameCheck = v
}

func (m *Captcha) SetPreCheckType(v CaptchaPreCheckType) {
	m.PreCheckType = v
}

func (m *Captcha) SetChallengeType(v CaptchaChallengeType) {
	m.ChallengeType = v
}

func (m *Captcha) SetSecurityRules(v []*SecurityRule) {
	m.SecurityRules = v
}

func (m *Captcha) SetDeletionProtection(v bool) {
	m.DeletionProtection = v
}

func (m *Captcha) SetOverrideVariants(v []*OverrideVariant) {
	m.OverrideVariants = v
}

func (m *OverrideVariant) SetUuid(v string) {
	m.Uuid = v
}

func (m *OverrideVariant) SetDescription(v string) {
	m.Description = v
}

func (m *OverrideVariant) SetComplexity(v CaptchaComplexity) {
	m.Complexity = v
}

func (m *OverrideVariant) SetPreCheckType(v CaptchaPreCheckType) {
	m.PreCheckType = v
}

func (m *OverrideVariant) SetChallengeType(v CaptchaChallengeType) {
	m.ChallengeType = v
}

func (m *CaptchaSecretKey) SetServerKey(v string) {
	m.ServerKey = v
}

func (m *SecurityRule) SetName(v string) {
	m.Name = v
}

func (m *SecurityRule) SetPriority(v int64) {
	m.Priority = v
}

func (m *SecurityRule) SetDescription(v string) {
	m.Description = v
}

func (m *SecurityRule) SetCondition(v *Condition) {
	m.Condition = v
}

func (m *SecurityRule) SetOverrideVariantUuid(v string) {
	m.OverrideVariantUuid = v
}

func (m *Condition) SetHost(v *Condition_HostMatcher) {
	m.Host = v
}

func (m *Condition) SetUri(v *Condition_UriMatcher) {
	m.Uri = v
}

func (m *Condition) SetHeaders(v []*Condition_HeaderMatcher) {
	m.Headers = v
}

func (m *Condition) SetSourceIp(v *Condition_IpMatcher) {
	m.SourceIp = v
}

type Condition_StringMatcher_Match = isCondition_StringMatcher_Match

func (m *Condition_StringMatcher) SetMatch(v Condition_StringMatcher_Match) {
	m.Match = v
}

func (m *Condition_StringMatcher) SetExactMatch(v string) {
	m.Match = &Condition_StringMatcher_ExactMatch{
		ExactMatch: v,
	}
}

func (m *Condition_StringMatcher) SetExactNotMatch(v string) {
	m.Match = &Condition_StringMatcher_ExactNotMatch{
		ExactNotMatch: v,
	}
}

func (m *Condition_StringMatcher) SetPrefixMatch(v string) {
	m.Match = &Condition_StringMatcher_PrefixMatch{
		PrefixMatch: v,
	}
}

func (m *Condition_StringMatcher) SetPrefixNotMatch(v string) {
	m.Match = &Condition_StringMatcher_PrefixNotMatch{
		PrefixNotMatch: v,
	}
}

func (m *Condition_StringMatcher) SetPireRegexMatch(v string) {
	m.Match = &Condition_StringMatcher_PireRegexMatch{
		PireRegexMatch: v,
	}
}

func (m *Condition_StringMatcher) SetPireRegexNotMatch(v string) {
	m.Match = &Condition_StringMatcher_PireRegexNotMatch{
		PireRegexNotMatch: v,
	}
}

func (m *Condition_HostMatcher) SetHosts(v []*Condition_StringMatcher) {
	m.Hosts = v
}

func (m *Condition_UriMatcher) SetPath(v *Condition_StringMatcher) {
	m.Path = v
}

func (m *Condition_UriMatcher) SetQueries(v []*Condition_QueryMatcher) {
	m.Queries = v
}

func (m *Condition_QueryMatcher) SetKey(v string) {
	m.Key = v
}

func (m *Condition_QueryMatcher) SetValue(v *Condition_StringMatcher) {
	m.Value = v
}

func (m *Condition_HeaderMatcher) SetName(v string) {
	m.Name = v
}

func (m *Condition_HeaderMatcher) SetValue(v *Condition_StringMatcher) {
	m.Value = v
}

func (m *Condition_IpMatcher) SetIpRangesMatch(v *Condition_IpRangesMatcher) {
	m.IpRangesMatch = v
}

func (m *Condition_IpMatcher) SetIpRangesNotMatch(v *Condition_IpRangesMatcher) {
	m.IpRangesNotMatch = v
}

func (m *Condition_IpMatcher) SetGeoIpMatch(v *Condition_GeoIpMatcher) {
	m.GeoIpMatch = v
}

func (m *Condition_IpMatcher) SetGeoIpNotMatch(v *Condition_GeoIpMatcher) {
	m.GeoIpNotMatch = v
}

func (m *Condition_IpRangesMatcher) SetIpRanges(v []string) {
	m.IpRanges = v
}

func (m *Condition_GeoIpMatcher) SetLocations(v []string) {
	m.Locations = v
}
