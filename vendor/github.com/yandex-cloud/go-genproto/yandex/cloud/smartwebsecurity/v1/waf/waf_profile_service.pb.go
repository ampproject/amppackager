// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/smartwebsecurity/v1/waf/waf_profile_service.proto

package smartwebsecurity

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetWafProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the WafProfile resource to return.
	WafProfileId string `protobuf:"bytes,1,opt,name=waf_profile_id,json=wafProfileId,proto3" json:"waf_profile_id,omitempty"`
}

func (x *GetWafProfileRequest) Reset() {
	*x = GetWafProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWafProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWafProfileRequest) ProtoMessage() {}

func (x *GetWafProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWafProfileRequest.ProtoReflect.Descriptor instead.
func (*GetWafProfileRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetWafProfileRequest) GetWafProfileId() string {
	if x != nil {
		return x.WafProfileId
	}
	return ""
}

type ListWafProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the folder that the WAF profile belongs to.
	// Currently page_size, page_token, filter and order_by are not supported and List method will return all WAF profiles in the folder.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *ListWafProfilesRequest) Reset() {
	*x = ListWafProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWafProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWafProfilesRequest) ProtoMessage() {}

func (x *ListWafProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWafProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListWafProfilesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListWafProfilesRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

type ListWafProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of WafProfile resources.
	// Currently next_page_token is not supported and List method will return all WAF profiles in the folder.
	WafProfiles []*WafProfile `protobuf:"bytes,1,rep,name=waf_profiles,json=wafProfiles,proto3" json:"waf_profiles,omitempty"`
}

func (x *ListWafProfilesResponse) Reset() {
	*x = ListWafProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWafProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWafProfilesResponse) ProtoMessage() {}

func (x *ListWafProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWafProfilesResponse.ProtoReflect.Descriptor instead.
func (*ListWafProfilesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListWafProfilesResponse) GetWafProfiles() []*WafProfile {
	if x != nil {
		return x.WafProfiles
	}
	return nil
}

type CreateWafProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the folder to create a WAF profile in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the WAF profile. The name is unique within the folder. 1-50 characters long.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional description of the WAF profile.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Labels as “ key:value “ pairs. Maximum of 64 per resource.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Settings for each rule in rule set.
	Rules []*WafProfileRule `protobuf:"bytes,5,rep,name=rules,proto3" json:"rules,omitempty"`
	// List of exclusion rules. See [Rules](/docs/smartwebsecurity/concepts/waf#exclusion-rules).
	ExclusionRules []*WafProfileExclusionRule `protobuf:"bytes,6,rep,name=exclusion_rules,json=exclusionRules,proto3" json:"exclusion_rules,omitempty"`
	// Types that are assignable to RuleSet:
	//
	//	*CreateWafProfileRequest_CoreRuleSet
	RuleSet isCreateWafProfileRequest_RuleSet `protobuf_oneof:"rule_set"`
	// Parameters for request body analyzer.
	AnalyzeRequestBody *WafProfile_AnalyzeRequestBody `protobuf:"bytes,8,opt,name=analyze_request_body,json=analyzeRequestBody,proto3" json:"analyze_request_body,omitempty"`
}

func (x *CreateWafProfileRequest) Reset() {
	*x = CreateWafProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWafProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWafProfileRequest) ProtoMessage() {}

func (x *CreateWafProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWafProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateWafProfileRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateWafProfileRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateWafProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWafProfileRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateWafProfileRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateWafProfileRequest) GetRules() []*WafProfileRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *CreateWafProfileRequest) GetExclusionRules() []*WafProfileExclusionRule {
	if x != nil {
		return x.ExclusionRules
	}
	return nil
}

func (m *CreateWafProfileRequest) GetRuleSet() isCreateWafProfileRequest_RuleSet {
	if m != nil {
		return m.RuleSet
	}
	return nil
}

func (x *CreateWafProfileRequest) GetCoreRuleSet() *WafProfile_CoreRuleSet {
	if x, ok := x.GetRuleSet().(*CreateWafProfileRequest_CoreRuleSet); ok {
		return x.CoreRuleSet
	}
	return nil
}

func (x *CreateWafProfileRequest) GetAnalyzeRequestBody() *WafProfile_AnalyzeRequestBody {
	if x != nil {
		return x.AnalyzeRequestBody
	}
	return nil
}

type isCreateWafProfileRequest_RuleSet interface {
	isCreateWafProfileRequest_RuleSet()
}

type CreateWafProfileRequest_CoreRuleSet struct {
	// Core rule set settings. See [Basic rule set](/docs/smartwebsecurity/concepts/waf#rules-set) for details.
	CoreRuleSet *WafProfile_CoreRuleSet `protobuf:"bytes,7,opt,name=core_rule_set,json=coreRuleSet,proto3,oneof"`
}

func (*CreateWafProfileRequest_CoreRuleSet) isCreateWafProfileRequest_RuleSet() {}

type CreateWafProfileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the WAF profile that is being created.
	WafProfileId string `protobuf:"bytes,1,opt,name=waf_profile_id,json=wafProfileId,proto3" json:"waf_profile_id,omitempty"`
}

func (x *CreateWafProfileMetadata) Reset() {
	*x = CreateWafProfileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWafProfileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWafProfileMetadata) ProtoMessage() {}

func (x *CreateWafProfileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWafProfileMetadata.ProtoReflect.Descriptor instead.
func (*CreateWafProfileMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateWafProfileMetadata) GetWafProfileId() string {
	if x != nil {
		return x.WafProfileId
	}
	return ""
}

type UpdateWafProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the WAF profile to update.
	WafProfileId string `protobuf:"bytes,1,opt,name=waf_profile_id,json=wafProfileId,proto3" json:"waf_profile_id,omitempty"`
	// Field mask that specifies which fields of the WafProfile resource are going to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Name of the WAF profile. The name is unique within the folder. 1-50 characters long.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Optional description of the WAF profile.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Labels as “ key:value “ pairs. Maximum of 64 per resource.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Settings for each rule in rule set.
	Rules []*WafProfileRule `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
	// List of exclusion rules. See [Rules](/docs/smartwebsecurity/concepts/waf#exclusion-rules).
	ExclusionRules []*WafProfileExclusionRule `protobuf:"bytes,7,rep,name=exclusion_rules,json=exclusionRules,proto3" json:"exclusion_rules,omitempty"`
	// Types that are assignable to RuleSet:
	//
	//	*UpdateWafProfileRequest_CoreRuleSet
	RuleSet isUpdateWafProfileRequest_RuleSet `protobuf_oneof:"rule_set"`
	// Parameters for request body analyzer.
	AnalyzeRequestBody *WafProfile_AnalyzeRequestBody `protobuf:"bytes,9,opt,name=analyze_request_body,json=analyzeRequestBody,proto3" json:"analyze_request_body,omitempty"`
}

func (x *UpdateWafProfileRequest) Reset() {
	*x = UpdateWafProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWafProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWafProfileRequest) ProtoMessage() {}

func (x *UpdateWafProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWafProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateWafProfileRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateWafProfileRequest) GetWafProfileId() string {
	if x != nil {
		return x.WafProfileId
	}
	return ""
}

func (x *UpdateWafProfileRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateWafProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateWafProfileRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateWafProfileRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateWafProfileRequest) GetRules() []*WafProfileRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *UpdateWafProfileRequest) GetExclusionRules() []*WafProfileExclusionRule {
	if x != nil {
		return x.ExclusionRules
	}
	return nil
}

func (m *UpdateWafProfileRequest) GetRuleSet() isUpdateWafProfileRequest_RuleSet {
	if m != nil {
		return m.RuleSet
	}
	return nil
}

func (x *UpdateWafProfileRequest) GetCoreRuleSet() *WafProfile_CoreRuleSet {
	if x, ok := x.GetRuleSet().(*UpdateWafProfileRequest_CoreRuleSet); ok {
		return x.CoreRuleSet
	}
	return nil
}

func (x *UpdateWafProfileRequest) GetAnalyzeRequestBody() *WafProfile_AnalyzeRequestBody {
	if x != nil {
		return x.AnalyzeRequestBody
	}
	return nil
}

type isUpdateWafProfileRequest_RuleSet interface {
	isUpdateWafProfileRequest_RuleSet()
}

type UpdateWafProfileRequest_CoreRuleSet struct {
	// Core rule set settings. See [Basic rule set](/docs/smartwebsecurity/concepts/waf#rules-set) for details.
	CoreRuleSet *WafProfile_CoreRuleSet `protobuf:"bytes,8,opt,name=core_rule_set,json=coreRuleSet,proto3,oneof"`
}

func (*UpdateWafProfileRequest_CoreRuleSet) isUpdateWafProfileRequest_RuleSet() {}

type UpdateWafProfileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the WafProfile resource that is being updated.
	WafProfileId string `protobuf:"bytes,1,opt,name=waf_profile_id,json=wafProfileId,proto3" json:"waf_profile_id,omitempty"`
}

func (x *UpdateWafProfileMetadata) Reset() {
	*x = UpdateWafProfileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWafProfileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWafProfileMetadata) ProtoMessage() {}

func (x *UpdateWafProfileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWafProfileMetadata.ProtoReflect.Descriptor instead.
func (*UpdateWafProfileMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateWafProfileMetadata) GetWafProfileId() string {
	if x != nil {
		return x.WafProfileId
	}
	return ""
}

type DeleteWafProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the WAF profile to delete.
	WafProfileId string `protobuf:"bytes,1,opt,name=waf_profile_id,json=wafProfileId,proto3" json:"waf_profile_id,omitempty"`
}

func (x *DeleteWafProfileRequest) Reset() {
	*x = DeleteWafProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWafProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWafProfileRequest) ProtoMessage() {}

func (x *DeleteWafProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWafProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteWafProfileRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteWafProfileRequest) GetWafProfileId() string {
	if x != nil {
		return x.WafProfileId
	}
	return ""
}

type DeleteWafProfileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the WafProfile resource that is being deleted.
	WafProfileId string `protobuf:"bytes,1,opt,name=waf_profile_id,json=wafProfileId,proto3" json:"waf_profile_id,omitempty"`
}

func (x *DeleteWafProfileMetadata) Reset() {
	*x = DeleteWafProfileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWafProfileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWafProfileMetadata) ProtoMessage() {}

func (x *DeleteWafProfileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWafProfileMetadata.ProtoReflect.Descriptor instead.
func (*DeleteWafProfileMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteWafProfileMetadata) GetWafProfileId() string {
	if x != nil {
		return x.WafProfileId
	}
	return ""
}

var File_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x61, 0x66, 0x2f, 0x77, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x24, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x36, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x61, 0x66, 0x2f, 0x77, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x61,
	0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0c, 0x77,
	0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x08,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x77, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65,
	0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x66,
	0x2e, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x77, 0x61, 0x66,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xa5, 0x05, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65,
	0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x66,
	0x2e, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x62,
	0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x57, 0x61, 0x66,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x75, 0x0a, 0x14, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x22, 0x40, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e,
	0x77, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0xf1, 0x05, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x66,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x0e, 0x77, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0c, 0x77, 0x61,
	0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x77, 0x61, 0x66, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x66, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x4a, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0f,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x57, 0x61, 0x66,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x77,
	0x61, 0x66, 0x2e, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x75, 0x0a, 0x14, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x57, 0x61,
	0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x12, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x22, 0x40, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x61, 0x66, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31,
	0x01, 0x52, 0x0c, 0x77, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x40, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x77,
	0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x32, 0xea, 0x07, 0x0a, 0x11, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x77,
	0x61, 0x66, 0x2e, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x39, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x66, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xad, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x66,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x66, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65,
	0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x66,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0xb2, 0xd2, 0x2a, 0x26, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0a, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31,
	0x2f, 0x77, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xd2, 0x01, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0xb2, 0xd2, 0x2a, 0x26, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0a, 0x57, 0x61, 0x66, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x32, 0x31,
	0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x77, 0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0xda, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x77, 0x61, 0x66, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x66, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e,
	0xb2, 0xd2, 0x2a, 0x31, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x66, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x2a, 0x31, 0x2f, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76,
	0x31, 0x2f, 0x77, 0x61, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x77,
	0x61, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x85,
	0x01, 0x0a, 0x28, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x61, 0x66, 0x5a, 0x59, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x76,
	0x31, 0x2f, 0x77, 0x61, 0x66, 0x3b, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescData = file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDesc
)

func file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescData)
	})
	return file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDescData
}

var file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_goTypes = []interface{}{
	(*GetWafProfileRequest)(nil),          // 0: yandex.cloud.smartwebsecurity.v1.waf.GetWafProfileRequest
	(*ListWafProfilesRequest)(nil),        // 1: yandex.cloud.smartwebsecurity.v1.waf.ListWafProfilesRequest
	(*ListWafProfilesResponse)(nil),       // 2: yandex.cloud.smartwebsecurity.v1.waf.ListWafProfilesResponse
	(*CreateWafProfileRequest)(nil),       // 3: yandex.cloud.smartwebsecurity.v1.waf.CreateWafProfileRequest
	(*CreateWafProfileMetadata)(nil),      // 4: yandex.cloud.smartwebsecurity.v1.waf.CreateWafProfileMetadata
	(*UpdateWafProfileRequest)(nil),       // 5: yandex.cloud.smartwebsecurity.v1.waf.UpdateWafProfileRequest
	(*UpdateWafProfileMetadata)(nil),      // 6: yandex.cloud.smartwebsecurity.v1.waf.UpdateWafProfileMetadata
	(*DeleteWafProfileRequest)(nil),       // 7: yandex.cloud.smartwebsecurity.v1.waf.DeleteWafProfileRequest
	(*DeleteWafProfileMetadata)(nil),      // 8: yandex.cloud.smartwebsecurity.v1.waf.DeleteWafProfileMetadata
	nil,                                   // 9: yandex.cloud.smartwebsecurity.v1.waf.CreateWafProfileRequest.LabelsEntry
	nil,                                   // 10: yandex.cloud.smartwebsecurity.v1.waf.UpdateWafProfileRequest.LabelsEntry
	(*WafProfile)(nil),                    // 11: yandex.cloud.smartwebsecurity.v1.waf.WafProfile
	(*WafProfileRule)(nil),                // 12: yandex.cloud.smartwebsecurity.v1.waf.WafProfileRule
	(*WafProfileExclusionRule)(nil),       // 13: yandex.cloud.smartwebsecurity.v1.waf.WafProfileExclusionRule
	(*WafProfile_CoreRuleSet)(nil),        // 14: yandex.cloud.smartwebsecurity.v1.waf.WafProfile.CoreRuleSet
	(*WafProfile_AnalyzeRequestBody)(nil), // 15: yandex.cloud.smartwebsecurity.v1.waf.WafProfile.AnalyzeRequestBody
	(*fieldmaskpb.FieldMask)(nil),         // 16: google.protobuf.FieldMask
	(*operation.Operation)(nil),           // 17: yandex.cloud.operation.Operation
}
var file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_depIdxs = []int32{
	11, // 0: yandex.cloud.smartwebsecurity.v1.waf.ListWafProfilesResponse.waf_profiles:type_name -> yandex.cloud.smartwebsecurity.v1.waf.WafProfile
	9,  // 1: yandex.cloud.smartwebsecurity.v1.waf.CreateWafProfileRequest.labels:type_name -> yandex.cloud.smartwebsecurity.v1.waf.CreateWafProfileRequest.LabelsEntry
	12, // 2: yandex.cloud.smartwebsecurity.v1.waf.CreateWafProfileRequest.rules:type_name -> yandex.cloud.smartwebsecurity.v1.waf.WafProfileRule
	13, // 3: yandex.cloud.smartwebsecurity.v1.waf.CreateWafProfileRequest.exclusion_rules:type_name -> yandex.cloud.smartwebsecurity.v1.waf.WafProfileExclusionRule
	14, // 4: yandex.cloud.smartwebsecurity.v1.waf.CreateWafProfileRequest.core_rule_set:type_name -> yandex.cloud.smartwebsecurity.v1.waf.WafProfile.CoreRuleSet
	15, // 5: yandex.cloud.smartwebsecurity.v1.waf.CreateWafProfileRequest.analyze_request_body:type_name -> yandex.cloud.smartwebsecurity.v1.waf.WafProfile.AnalyzeRequestBody
	16, // 6: yandex.cloud.smartwebsecurity.v1.waf.UpdateWafProfileRequest.update_mask:type_name -> google.protobuf.FieldMask
	10, // 7: yandex.cloud.smartwebsecurity.v1.waf.UpdateWafProfileRequest.labels:type_name -> yandex.cloud.smartwebsecurity.v1.waf.UpdateWafProfileRequest.LabelsEntry
	12, // 8: yandex.cloud.smartwebsecurity.v1.waf.UpdateWafProfileRequest.rules:type_name -> yandex.cloud.smartwebsecurity.v1.waf.WafProfileRule
	13, // 9: yandex.cloud.smartwebsecurity.v1.waf.UpdateWafProfileRequest.exclusion_rules:type_name -> yandex.cloud.smartwebsecurity.v1.waf.WafProfileExclusionRule
	14, // 10: yandex.cloud.smartwebsecurity.v1.waf.UpdateWafProfileRequest.core_rule_set:type_name -> yandex.cloud.smartwebsecurity.v1.waf.WafProfile.CoreRuleSet
	15, // 11: yandex.cloud.smartwebsecurity.v1.waf.UpdateWafProfileRequest.analyze_request_body:type_name -> yandex.cloud.smartwebsecurity.v1.waf.WafProfile.AnalyzeRequestBody
	0,  // 12: yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.Get:input_type -> yandex.cloud.smartwebsecurity.v1.waf.GetWafProfileRequest
	1,  // 13: yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.List:input_type -> yandex.cloud.smartwebsecurity.v1.waf.ListWafProfilesRequest
	3,  // 14: yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.Create:input_type -> yandex.cloud.smartwebsecurity.v1.waf.CreateWafProfileRequest
	5,  // 15: yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.Update:input_type -> yandex.cloud.smartwebsecurity.v1.waf.UpdateWafProfileRequest
	7,  // 16: yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.Delete:input_type -> yandex.cloud.smartwebsecurity.v1.waf.DeleteWafProfileRequest
	11, // 17: yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.Get:output_type -> yandex.cloud.smartwebsecurity.v1.waf.WafProfile
	2,  // 18: yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.List:output_type -> yandex.cloud.smartwebsecurity.v1.waf.ListWafProfilesResponse
	17, // 19: yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.Create:output_type -> yandex.cloud.operation.Operation
	17, // 20: yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.Update:output_type -> yandex.cloud.operation.Operation
	17, // 21: yandex.cloud.smartwebsecurity.v1.waf.WafProfileService.Delete:output_type -> yandex.cloud.operation.Operation
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_init() }
func file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_init() {
	if File_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto != nil {
		return
	}
	file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWafProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWafProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWafProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWafProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWafProfileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWafProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWafProfileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWafProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWafProfileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CreateWafProfileRequest_CoreRuleSet)(nil),
	}
	file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*UpdateWafProfileRequest_CoreRuleSet)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto = out.File
	file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_rawDesc = nil
	file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_goTypes = nil
	file_yandex_cloud_smartwebsecurity_v1_waf_waf_profile_service_proto_depIdxs = nil
}
