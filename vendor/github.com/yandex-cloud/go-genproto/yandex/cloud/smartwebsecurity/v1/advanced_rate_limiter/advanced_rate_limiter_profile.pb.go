// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/smartwebsecurity/v1/advanced_rate_limiter/advanced_rate_limiter_profile.proto

package smartwebsecurity

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	v1 "github.com/yandex-cloud/go-genproto/yandex/cloud/smartwebsecurity/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of action to perform if this rule matched.
type AdvancedRateLimiterRule_Action int32

const (
	AdvancedRateLimiterRule_ACTION_UNSPECIFIED AdvancedRateLimiterRule_Action = 0
	// Deny request.
	AdvancedRateLimiterRule_DENY AdvancedRateLimiterRule_Action = 1
)

// Enum value maps for AdvancedRateLimiterRule_Action.
var (
	AdvancedRateLimiterRule_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "DENY",
	}
	AdvancedRateLimiterRule_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"DENY":               1,
	}
)

func (x AdvancedRateLimiterRule_Action) Enum() *AdvancedRateLimiterRule_Action {
	p := new(AdvancedRateLimiterRule_Action)
	*p = x
	return p
}

func (x AdvancedRateLimiterRule_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvancedRateLimiterRule_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_enumTypes[0].Descriptor()
}

func (AdvancedRateLimiterRule_Action) Type() protoreflect.EnumType {
	return &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_enumTypes[0]
}

func (x AdvancedRateLimiterRule_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvancedRateLimiterRule_Action.Descriptor instead.
func (AdvancedRateLimiterRule_Action) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescGZIP(), []int{1, 0}
}

// Type of simple characteristic.
type AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type int32

const (
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_TYPE_UNSPECIFIED AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type = 0
	// HTTP Request path.
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_REQUEST_PATH AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type = 1
	// HTTP Method.
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_HTTP_METHOD AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type = 2
	// IP address.
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_IP AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type = 3
	// Region.
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_GEO AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type = 4
	// Host.
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_HOST AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type = 5
)

// Enum value maps for AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type.
var (
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "REQUEST_PATH",
		2: "HTTP_METHOD",
		3: "IP",
		4: "GEO",
		5: "HOST",
	}
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"REQUEST_PATH":     1,
		"HTTP_METHOD":      2,
		"IP":               3,
		"GEO":              4,
		"HOST":             5,
	}
)

func (x AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type) Enum() *AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type {
	p := new(AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type)
	*p = x
	return p
}

func (x AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_enumTypes[1].Descriptor()
}

func (AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type) Type() protoreflect.EnumType {
	return &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_enumTypes[1]
}

func (x AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type.Descriptor instead.
func (AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescGZIP(), []int{1, 1, 0, 0, 0}
}

// Type of key characteristic.
type AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type int32

const (
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_TYPE_UNSPECIFIED AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type = 0
	// HTTP cookie key.
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_COOKIE_KEY AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type = 1
	// HTTP header key.
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_HEADER_KEY AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type = 2
	// Query params key.
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_QUERY_KEY AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type = 3
)

// Enum value maps for AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type.
var (
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "COOKIE_KEY",
		2: "HEADER_KEY",
		3: "QUERY_KEY",
	}
	AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"COOKIE_KEY":       1,
		"HEADER_KEY":       2,
		"QUERY_KEY":        3,
	}
)

func (x AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type) Enum() *AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type {
	p := new(AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type)
	*p = x
	return p
}

func (x AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_enumTypes[2].Descriptor()
}

func (AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type) Type() protoreflect.EnumType {
	return &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_enumTypes[2]
}

func (x AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type.Descriptor instead.
func (AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescGZIP(), []int{1, 1, 0, 1, 0}
}

// A AdvancedRateLimiterProfile (ARL) resource.
type AdvancedRateLimiterProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the ARL profile.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the folder that the ARL profile belongs to.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Labels as “ key:value “ pairs. Maximum of 64 per resource.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Name of the ARL profile. The name is unique within the folder. 1-50 characters long.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Optional description of the ARL profile.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// List of rules.
	AdvancedRateLimiterRules []*AdvancedRateLimiterRule `protobuf:"bytes,6,rep,name=advanced_rate_limiter_rules,json=advancedRateLimiterRules,proto3" json:"advanced_rate_limiter_rules,omitempty"`
	// Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// ID of the cloud that the ARL profile belongs to.
	CloudId string `protobuf:"bytes,9,opt,name=cloud_id,json=cloudId,proto3" json:"cloud_id,omitempty"`
}

func (x *AdvancedRateLimiterProfile) Reset() {
	*x = AdvancedRateLimiterProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedRateLimiterProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedRateLimiterProfile) ProtoMessage() {}

func (x *AdvancedRateLimiterProfile) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedRateLimiterProfile.ProtoReflect.Descriptor instead.
func (*AdvancedRateLimiterProfile) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescGZIP(), []int{0}
}

func (x *AdvancedRateLimiterProfile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdvancedRateLimiterProfile) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *AdvancedRateLimiterProfile) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AdvancedRateLimiterProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdvancedRateLimiterProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AdvancedRateLimiterProfile) GetAdvancedRateLimiterRules() []*AdvancedRateLimiterRule {
	if x != nil {
		return x.AdvancedRateLimiterRules
	}
	return nil
}

func (x *AdvancedRateLimiterProfile) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AdvancedRateLimiterProfile) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

// A AdvancedRateLimiterRule object, see [Rules](/docs/smartwebsecurity/concepts/arl#traffic-conditions).
type AdvancedRateLimiterRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the rule. The name is unique within the ARL profile. 1-50 characters long.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Determines the priority in case there are several matched rules.
	// Enter an integer within the range of 1 and 999999.
	// The rule priority must be unique within the entire ARL profile.
	// A lower numeric value means a higher priority.
	Priority int64 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// Optional description of the rule. 0-512 characters long.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// This allows you to evaluate backend capabilities and find the optimum limit values.
	// Requests will not be blocked in this mode.
	DryRun bool `protobuf:"varint,4,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// Types that are assignable to RuleSpecifier:
	//
	//	*AdvancedRateLimiterRule_StaticQuota_
	//	*AdvancedRateLimiterRule_DynamicQuota_
	RuleSpecifier isAdvancedRateLimiterRule_RuleSpecifier `protobuf_oneof:"rule_specifier"`
}

func (x *AdvancedRateLimiterRule) Reset() {
	*x = AdvancedRateLimiterRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedRateLimiterRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedRateLimiterRule) ProtoMessage() {}

func (x *AdvancedRateLimiterRule) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedRateLimiterRule.ProtoReflect.Descriptor instead.
func (*AdvancedRateLimiterRule) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescGZIP(), []int{1}
}

func (x *AdvancedRateLimiterRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdvancedRateLimiterRule) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *AdvancedRateLimiterRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AdvancedRateLimiterRule) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (m *AdvancedRateLimiterRule) GetRuleSpecifier() isAdvancedRateLimiterRule_RuleSpecifier {
	if m != nil {
		return m.RuleSpecifier
	}
	return nil
}

func (x *AdvancedRateLimiterRule) GetStaticQuota() *AdvancedRateLimiterRule_StaticQuota {
	if x, ok := x.GetRuleSpecifier().(*AdvancedRateLimiterRule_StaticQuota_); ok {
		return x.StaticQuota
	}
	return nil
}

func (x *AdvancedRateLimiterRule) GetDynamicQuota() *AdvancedRateLimiterRule_DynamicQuota {
	if x, ok := x.GetRuleSpecifier().(*AdvancedRateLimiterRule_DynamicQuota_); ok {
		return x.DynamicQuota
	}
	return nil
}

type isAdvancedRateLimiterRule_RuleSpecifier interface {
	isAdvancedRateLimiterRule_RuleSpecifier()
}

type AdvancedRateLimiterRule_StaticQuota_ struct {
	// Static quota. Counting each request individually.
	StaticQuota *AdvancedRateLimiterRule_StaticQuota `protobuf:"bytes,5,opt,name=static_quota,json=staticQuota,proto3,oneof"`
}

type AdvancedRateLimiterRule_DynamicQuota_ struct {
	// Dynamic quota. Grouping requests by a certain attribute and limiting the number of groups.
	DynamicQuota *AdvancedRateLimiterRule_DynamicQuota `protobuf:"bytes,6,opt,name=dynamic_quota,json=dynamicQuota,proto3,oneof"`
}

func (*AdvancedRateLimiterRule_StaticQuota_) isAdvancedRateLimiterRule_RuleSpecifier() {}

func (*AdvancedRateLimiterRule_DynamicQuota_) isAdvancedRateLimiterRule_RuleSpecifier() {}

// StaticQuota object.
type AdvancedRateLimiterRule_StaticQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action in case of exceeding this quota.
	Action AdvancedRateLimiterRule_Action `protobuf:"varint,1,opt,name=action,proto3,enum=yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule_Action" json:"action,omitempty"`
	// The condition for matching the quota.
	Condition *v1.Condition `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	// Desired maximum number of requests per period.
	// Enter an integer within the range of 1 and 9999999999999.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Period of time in seconds.
	Period int64 `protobuf:"varint,4,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *AdvancedRateLimiterRule_StaticQuota) Reset() {
	*x = AdvancedRateLimiterRule_StaticQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedRateLimiterRule_StaticQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedRateLimiterRule_StaticQuota) ProtoMessage() {}

func (x *AdvancedRateLimiterRule_StaticQuota) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedRateLimiterRule_StaticQuota.ProtoReflect.Descriptor instead.
func (*AdvancedRateLimiterRule_StaticQuota) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AdvancedRateLimiterRule_StaticQuota) GetAction() AdvancedRateLimiterRule_Action {
	if x != nil {
		return x.Action
	}
	return AdvancedRateLimiterRule_ACTION_UNSPECIFIED
}

func (x *AdvancedRateLimiterRule_StaticQuota) GetCondition() *v1.Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *AdvancedRateLimiterRule_StaticQuota) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AdvancedRateLimiterRule_StaticQuota) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

// DynamicQuota object.
type AdvancedRateLimiterRule_DynamicQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action in case of exceeding this quota.
	Action AdvancedRateLimiterRule_Action `protobuf:"varint,1,opt,name=action,proto3,enum=yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule_Action" json:"action,omitempty"`
	// The condition for matching the quota.
	Condition *v1.Condition `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	// Desired maximum number of requests per period.
	// Enter an integer within the range of 1 and 9999999999999.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Period of time in seconds.
	Period int64 `protobuf:"varint,4,opt,name=period,proto3" json:"period,omitempty"`
	// List of characteristics.
	Characteristics []*AdvancedRateLimiterRule_DynamicQuota_Characteristic `protobuf:"bytes,5,rep,name=characteristics,proto3" json:"characteristics,omitempty"`
}

func (x *AdvancedRateLimiterRule_DynamicQuota) Reset() {
	*x = AdvancedRateLimiterRule_DynamicQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedRateLimiterRule_DynamicQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedRateLimiterRule_DynamicQuota) ProtoMessage() {}

func (x *AdvancedRateLimiterRule_DynamicQuota) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedRateLimiterRule_DynamicQuota.ProtoReflect.Descriptor instead.
func (*AdvancedRateLimiterRule_DynamicQuota) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescGZIP(), []int{1, 1}
}

func (x *AdvancedRateLimiterRule_DynamicQuota) GetAction() AdvancedRateLimiterRule_Action {
	if x != nil {
		return x.Action
	}
	return AdvancedRateLimiterRule_ACTION_UNSPECIFIED
}

func (x *AdvancedRateLimiterRule_DynamicQuota) GetCondition() *v1.Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *AdvancedRateLimiterRule_DynamicQuota) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AdvancedRateLimiterRule_DynamicQuota) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *AdvancedRateLimiterRule_DynamicQuota) GetCharacteristics() []*AdvancedRateLimiterRule_DynamicQuota_Characteristic {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

type AdvancedRateLimiterRule_DynamicQuota_Characteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CharacteristicSpecifier:
	//
	//	*AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_
	//	*AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_
	CharacteristicSpecifier isAdvancedRateLimiterRule_DynamicQuota_Characteristic_CharacteristicSpecifier `protobuf_oneof:"characteristic_specifier"`
	// Determines case-sensitive or case-insensitive keys matching.
	CaseInsensitive bool `protobuf:"varint,10,opt,name=case_insensitive,json=caseInsensitive,proto3" json:"case_insensitive,omitempty"`
}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic) Reset() {
	*x = AdvancedRateLimiterRule_DynamicQuota_Characteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedRateLimiterRule_DynamicQuota_Characteristic) ProtoMessage() {}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedRateLimiterRule_DynamicQuota_Characteristic.ProtoReflect.Descriptor instead.
func (*AdvancedRateLimiterRule_DynamicQuota_Characteristic) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (m *AdvancedRateLimiterRule_DynamicQuota_Characteristic) GetCharacteristicSpecifier() isAdvancedRateLimiterRule_DynamicQuota_Characteristic_CharacteristicSpecifier {
	if m != nil {
		return m.CharacteristicSpecifier
	}
	return nil
}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic) GetSimpleCharacteristic() *AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic {
	if x, ok := x.GetCharacteristicSpecifier().(*AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_); ok {
		return x.SimpleCharacteristic
	}
	return nil
}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic) GetKeyCharacteristic() *AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic {
	if x, ok := x.GetCharacteristicSpecifier().(*AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_); ok {
		return x.KeyCharacteristic
	}
	return nil
}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic) GetCaseInsensitive() bool {
	if x != nil {
		return x.CaseInsensitive
	}
	return false
}

type isAdvancedRateLimiterRule_DynamicQuota_Characteristic_CharacteristicSpecifier interface {
	isAdvancedRateLimiterRule_DynamicQuota_Characteristic_CharacteristicSpecifier()
}

type AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_ struct {
	// Characteristic automatically based on the Request path, HTTP method, IP address, Region, and Host attributes.
	// See [Rules](/docs/smartwebsecurity/concepts/arl#requests-counting) for more details.
	SimpleCharacteristic *AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic `protobuf:"bytes,1,opt,name=simple_characteristic,json=simpleCharacteristic,proto3,oneof"`
}

type AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_ struct {
	// Characteristic based on key match in the Query params, HTTP header, and HTTP cookie attributes.
	// See [Rules](/docs/smartwebsecurity/concepts/arl#requests-counting) for more details.
	KeyCharacteristic *AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic `protobuf:"bytes,2,opt,name=key_characteristic,json=keyCharacteristic,proto3,oneof"`
}

func (*AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_) isAdvancedRateLimiterRule_DynamicQuota_Characteristic_CharacteristicSpecifier() {
}

func (*AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_) isAdvancedRateLimiterRule_DynamicQuota_Characteristic_CharacteristicSpecifier() {
}

type AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of simple characteristic.
	Type AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type" json:"type,omitempty"`
}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic) Reset() {
	*x = AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic) ProtoMessage() {}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic.ProtoReflect.Descriptor instead.
func (*AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescGZIP(), []int{1, 1, 0, 0}
}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic) GetType() AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type {
	if x != nil {
		return x.Type
	}
	return AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_TYPE_UNSPECIFIED
}

type AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of key characteristic.
	Type AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type" json:"type,omitempty"`
	// String value of the key.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic) Reset() {
	*x = AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic) ProtoMessage() {}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic.ProtoReflect.Descriptor instead.
func (*AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescGZIP(), []int{1, 1, 0, 1}
}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic) GetType() AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type {
	if x != nil {
		return x.Type
	}
	return AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_TYPE_UNSPECIFIED
}

func (x *AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto protoreflect.FileDescriptor

var file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDesc = []byte{
	0x0a, 0x5a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x05,
	0x0a, 0x1a, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0xb3, 0x01, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77,
	0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3b, 0xf2, 0xc7, 0x31, 0x0b,
	0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x04, 0x3c,
	0x3d, 0x36, 0x34, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x18, 0x12,
	0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d,
	0x2a, 0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe8,
	0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31, 0x1a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e, 0x5d,
	0x2a, 0x8a, 0xc8, 0x31, 0x04, 0x31, 0x2d, 0x35, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x35, 0x31, 0x32, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8e, 0x01, 0x0a,
	0x1b, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x18, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04,
	0x08, 0x08, 0x10, 0x09, 0x22, 0xc7, 0x12, 0x0a, 0x17, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31, 0x1a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x2e,
	0x5d, 0x2a, 0x8a, 0xc8, 0x31, 0x04, 0x31, 0x2d, 0x35, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0c, 0xfa, 0xc7, 0x31, 0x08, 0x31, 0x2d, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x35, 0x31, 0x32, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72,
	0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x12, 0x80, 0x01, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x1a, 0xc9, 0x02, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65,
	0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x13, 0xfa, 0xc7, 0x31, 0x0f, 0x31, 0x2d, 0x39, 0x39, 0x39, 0x39, 0x39,
	0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x54, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x3c, 0xfa, 0xc7, 0x31, 0x38, 0x31, 0x2c, 0x35, 0x2c, 0x31, 0x30, 0x2c, 0x33, 0x30, 0x2c, 0x36,
	0x30, 0x2c, 0x31, 0x32, 0x30, 0x2c, 0x31, 0x38, 0x30, 0x2c, 0x32, 0x34, 0x30, 0x2c, 0x33, 0x30,
	0x30, 0x2c, 0x36, 0x30, 0x30, 0x2c, 0x39, 0x30, 0x30, 0x2c, 0x31, 0x32, 0x30, 0x30, 0x2c, 0x31,
	0x38, 0x30, 0x30, 0x2c, 0x32, 0x37, 0x30, 0x30, 0x2c, 0x33, 0x36, 0x30, 0x30, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0xe2, 0x0b, 0x0a, 0x0c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65,
	0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x13, 0xfa, 0xc7, 0x31, 0x0f, 0x31, 0x2d, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
	0x39, 0x39, 0x39, 0x39, 0x39, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x3c, 0xfa, 0xc7,
	0x31, 0x38, 0x31, 0x2c, 0x35, 0x2c, 0x31, 0x30, 0x2c, 0x33, 0x30, 0x2c, 0x36, 0x30, 0x2c, 0x31,
	0x32, 0x30, 0x2c, 0x31, 0x38, 0x30, 0x2c, 0x32, 0x34, 0x30, 0x2c, 0x33, 0x30, 0x30, 0x2c, 0x36,
	0x30, 0x30, 0x2c, 0x39, 0x30, 0x30, 0x2c, 0x31, 0x32, 0x30, 0x30, 0x2c, 0x31, 0x38, 0x30, 0x30,
	0x2c, 0x32, 0x37, 0x30, 0x30, 0x2c, 0x33, 0x36, 0x30, 0x30, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x42, 0x07, 0x82, 0xc8, 0x31, 0x03, 0x3c,
	0x3d, 0x33, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x1a, 0xf4, 0x07, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0xb8, 0x01, 0x0a, 0x15, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x48, 0x00, 0x52, 0x14, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x12, 0xae, 0x01, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x48, 0x00, 0x52,
	0x11, 0x6b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x8f, 0x02,
	0x0a, 0x14, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x9a, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x85, 0x01, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x54,
	0x48, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x50, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x47, 0x45, 0x4f, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x1a,
	0x90, 0x02, 0x0a, 0x11, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x97, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x82, 0x01, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x03, 0x42, 0x20, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x04,
	0xc0, 0xc1, 0x31, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x0a, 0x22, 0x2a, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x45, 0x4e, 0x59, 0x10, 0x01, 0x42, 0x16, 0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x42, 0xa9,
	0x01, 0x0a, 0x3a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5a, 0x6b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x77, 0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x3b, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x77,
	0x65, 0x62, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescOnce sync.Once
	file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescData = file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDesc
)

func file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescGZIP() []byte {
	file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescData)
	})
	return file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDescData
}

var file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_goTypes = []interface{}{
	(AdvancedRateLimiterRule_Action)(0),                                                // 0: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.Action
	(AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_Type)(0), // 1: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic.SimpleCharacteristic.Type
	(AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_Type)(0),    // 2: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic.KeyCharacteristic.Type
	(*AdvancedRateLimiterProfile)(nil),                                                 // 3: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterProfile
	(*AdvancedRateLimiterRule)(nil),                                                    // 4: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule
	nil,                                                                                // 5: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterProfile.LabelsEntry
	(*AdvancedRateLimiterRule_StaticQuota)(nil),                                        // 6: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.StaticQuota
	(*AdvancedRateLimiterRule_DynamicQuota)(nil),                                       // 7: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota
	(*AdvancedRateLimiterRule_DynamicQuota_Characteristic)(nil),                        // 8: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic
	(*AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic)(nil),   // 9: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic.SimpleCharacteristic
	(*AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic)(nil),      // 10: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic.KeyCharacteristic
	(*timestamppb.Timestamp)(nil),                                                      // 11: google.protobuf.Timestamp
	(*v1.Condition)(nil),                                                               // 12: yandex.cloud.smartwebsecurity.v1.Condition
}
var file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_depIdxs = []int32{
	5,  // 0: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterProfile.labels:type_name -> yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterProfile.LabelsEntry
	4,  // 1: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterProfile.advanced_rate_limiter_rules:type_name -> yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule
	11, // 2: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterProfile.created_at:type_name -> google.protobuf.Timestamp
	6,  // 3: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.static_quota:type_name -> yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.StaticQuota
	7,  // 4: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.dynamic_quota:type_name -> yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota
	0,  // 5: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.StaticQuota.action:type_name -> yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.Action
	12, // 6: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.StaticQuota.condition:type_name -> yandex.cloud.smartwebsecurity.v1.Condition
	0,  // 7: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.action:type_name -> yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.Action
	12, // 8: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.condition:type_name -> yandex.cloud.smartwebsecurity.v1.Condition
	8,  // 9: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.characteristics:type_name -> yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic
	9,  // 10: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic.simple_characteristic:type_name -> yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic.SimpleCharacteristic
	10, // 11: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic.key_characteristic:type_name -> yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic.KeyCharacteristic
	1,  // 12: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic.SimpleCharacteristic.type:type_name -> yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic.SimpleCharacteristic.Type
	2,  // 13: yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic.KeyCharacteristic.type:type_name -> yandex.cloud.smartwebsecurity.v1.advanced_rate_limiter.AdvancedRateLimiterRule.DynamicQuota.Characteristic.KeyCharacteristic.Type
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() {
	file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_init()
}
func file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_init() {
	if File_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedRateLimiterProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedRateLimiterRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedRateLimiterRule_StaticQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedRateLimiterRule_DynamicQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedRateLimiterRule_DynamicQuota_Characteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AdvancedRateLimiterRule_StaticQuota_)(nil),
		(*AdvancedRateLimiterRule_DynamicQuota_)(nil),
	}
	file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AdvancedRateLimiterRule_DynamicQuota_Characteristic_SimpleCharacteristic_)(nil),
		(*AdvancedRateLimiterRule_DynamicQuota_Characteristic_KeyCharacteristic_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_msgTypes,
	}.Build()
	File_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto = out.File
	file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_rawDesc = nil
	file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_goTypes = nil
	file_yandex_cloud_smartwebsecurity_v1_advanced_rate_limiter_advanced_rate_limiter_profile_proto_depIdxs = nil
}
