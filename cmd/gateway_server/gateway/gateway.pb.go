// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gateway.proto

package gateway

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TransformHTMLRequest_ConfigType int32

const (
	TransformHTMLRequest_NONE       TransformHTMLRequest_ConfigType = 0
	TransformHTMLRequest_DEFAULT    TransformHTMLRequest_ConfigType = 1
	TransformHTMLRequest_VALIDATION TransformHTMLRequest_ConfigType = 2
)

var TransformHTMLRequest_ConfigType_name = map[int32]string{
	0: "NONE",
	1: "DEFAULT",
	2: "VALIDATION",
}

var TransformHTMLRequest_ConfigType_value = map[string]int32{
	"NONE":       0,
	"DEFAULT":    1,
	"VALIDATION": 2,
}

func (x TransformHTMLRequest_ConfigType) String() string {
	return proto.EnumName(TransformHTMLRequest_ConfigType_name, int32(x))
}

func (TransformHTMLRequest_ConfigType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1a937782ebbded5, []int{2, 0}
}

type SXGRequest struct {
	// URL to fetch from publisher's internal server. ie. PublisherServer.
	FetchUrl string `protobuf:"bytes,1,opt,name=fetch_url,json=fetchUrl,proto3" json:"fetch_url,omitempty"`
	// URL to sign in sxg package.
	SignUrl string `protobuf:"bytes,2,opt,name=sign_url,json=signUrl,proto3" json:"sign_url,omitempty"`
	// ECC private key.
	PrivateKey []byte `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// X509 certificate which may or may not contain CanSignHTTPExchange
	// extension.
	PublicCert []byte `protobuf:"bytes,4,opt,name=public_cert,json=publicCert,proto3" json:"public_cert,omitempty"`
	// Extra request headers to pass to Packager. singer.go->ServeHTTP.
	PackagerServerRequestHeaders map[string]string `protobuf:"bytes,5,rep,name=packager_server_request_headers,json=packagerServerRequestHeaders,proto3" json:"packager_server_request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral         struct{}          `json:"-"`
	XXX_unrecognized             []byte            `json:"-"`
	XXX_sizecache                int32             `json:"-"`
}

func (m *SXGRequest) Reset()         { *m = SXGRequest{} }
func (m *SXGRequest) String() string { return proto.CompactTextString(m) }
func (*SXGRequest) ProtoMessage()    {}
func (*SXGRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a937782ebbded5, []int{0}
}

func (m *SXGRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SXGRequest.Unmarshal(m, b)
}
func (m *SXGRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SXGRequest.Marshal(b, m, deterministic)
}
func (m *SXGRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SXGRequest.Merge(m, src)
}
func (m *SXGRequest) XXX_Size() int {
	return xxx_messageInfo_SXGRequest.Size(m)
}
func (m *SXGRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SXGRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SXGRequest proto.InternalMessageInfo

func (m *SXGRequest) GetFetchUrl() string {
	if m != nil {
		return m.FetchUrl
	}
	return ""
}

func (m *SXGRequest) GetSignUrl() string {
	if m != nil {
		return m.SignUrl
	}
	return ""
}

func (m *SXGRequest) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *SXGRequest) GetPublicCert() []byte {
	if m != nil {
		return m.PublicCert
	}
	return nil
}

func (m *SXGRequest) GetPackagerServerRequestHeaders() map[string]string {
	if m != nil {
		return m.PackagerServerRequestHeaders
	}
	return nil
}

type SXGResponse struct {
	Sxg              []byte `protobuf:"bytes,1,opt,name=sxg,proto3" json:"sxg,omitempty"`
	Error            bool   `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorDescription string `protobuf:"bytes,3,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	// application/cert-chain+cbor format certificate response.
	Cbor []byte `protobuf:"bytes,4,opt,name=cbor,proto3" json:"cbor,omitempty"`
	// HTTP headers returned by the packager.
	HttpHeaders          map[string]string `protobuf:"bytes,5,rep,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SXGResponse) Reset()         { *m = SXGResponse{} }
func (m *SXGResponse) String() string { return proto.CompactTextString(m) }
func (*SXGResponse) ProtoMessage()    {}
func (*SXGResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a937782ebbded5, []int{1}
}

func (m *SXGResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SXGResponse.Unmarshal(m, b)
}
func (m *SXGResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SXGResponse.Marshal(b, m, deterministic)
}
func (m *SXGResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SXGResponse.Merge(m, src)
}
func (m *SXGResponse) XXX_Size() int {
	return xxx_messageInfo_SXGResponse.Size(m)
}
func (m *SXGResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SXGResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SXGResponse proto.InternalMessageInfo

func (m *SXGResponse) GetSxg() []byte {
	if m != nil {
		return m.Sxg
	}
	return nil
}

func (m *SXGResponse) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *SXGResponse) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func (m *SXGResponse) GetCbor() []byte {
	if m != nil {
		return m.Cbor
	}
	return nil
}

func (m *SXGResponse) GetHttpHeaders() map[string]string {
	if m != nil {
		return m.HttpHeaders
	}
	return nil
}

type TransformHTMLRequest struct {
	ConfigType           TransformHTMLRequest_ConfigType `protobuf:"varint,1,opt,name=config_type,json=configType,proto3,enum=gateway.TransformHTMLRequest_ConfigType" json:"config_type,omitempty"`
	HtmlSource           string                          `protobuf:"bytes,2,opt,name=html_source,json=htmlSource,proto3" json:"html_source,omitempty"`
	Url                  string                          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *TransformHTMLRequest) Reset()         { *m = TransformHTMLRequest{} }
func (m *TransformHTMLRequest) String() string { return proto.CompactTextString(m) }
func (*TransformHTMLRequest) ProtoMessage()    {}
func (*TransformHTMLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a937782ebbded5, []int{2}
}

func (m *TransformHTMLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransformHTMLRequest.Unmarshal(m, b)
}
func (m *TransformHTMLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransformHTMLRequest.Marshal(b, m, deterministic)
}
func (m *TransformHTMLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransformHTMLRequest.Merge(m, src)
}
func (m *TransformHTMLRequest) XXX_Size() int {
	return xxx_messageInfo_TransformHTMLRequest.Size(m)
}
func (m *TransformHTMLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransformHTMLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransformHTMLRequest proto.InternalMessageInfo

func (m *TransformHTMLRequest) GetConfigType() TransformHTMLRequest_ConfigType {
	if m != nil {
		return m.ConfigType
	}
	return TransformHTMLRequest_NONE
}

func (m *TransformHTMLRequest) GetHtmlSource() string {
	if m != nil {
		return m.HtmlSource
	}
	return ""
}

func (m *TransformHTMLRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type TransformedHTML struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	OriginalHtml         string   `protobuf:"bytes,2,opt,name=original_html,json=originalHtml,proto3" json:"original_html,omitempty"`
	TransformedHtml      string   `protobuf:"bytes,3,opt,name=transformed_html,json=transformedHtml,proto3" json:"transformed_html,omitempty"`
	Error                bool     `protobuf:"varint,4,opt,name=error,proto3" json:"error,omitempty"`
	ErrorDescription     string   `protobuf:"bytes,5,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransformedHTML) Reset()         { *m = TransformedHTML{} }
func (m *TransformedHTML) String() string { return proto.CompactTextString(m) }
func (*TransformedHTML) ProtoMessage()    {}
func (*TransformedHTML) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a937782ebbded5, []int{3}
}

func (m *TransformedHTML) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransformedHTML.Unmarshal(m, b)
}
func (m *TransformedHTML) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransformedHTML.Marshal(b, m, deterministic)
}
func (m *TransformedHTML) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransformedHTML.Merge(m, src)
}
func (m *TransformedHTML) XXX_Size() int {
	return xxx_messageInfo_TransformedHTML.Size(m)
}
func (m *TransformedHTML) XXX_DiscardUnknown() {
	xxx_messageInfo_TransformedHTML.DiscardUnknown(m)
}

var xxx_messageInfo_TransformedHTML proto.InternalMessageInfo

func (m *TransformedHTML) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TransformedHTML) GetOriginalHtml() string {
	if m != nil {
		return m.OriginalHtml
	}
	return ""
}

func (m *TransformedHTML) GetTransformedHtml() string {
	if m != nil {
		return m.TransformedHtml
	}
	return ""
}

func (m *TransformedHTML) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *TransformedHTML) GetErrorDescription() string {
	if m != nil {
		return m.ErrorDescription
	}
	return ""
}

func init() {
	proto.RegisterEnum("gateway.TransformHTMLRequest_ConfigType", TransformHTMLRequest_ConfigType_name, TransformHTMLRequest_ConfigType_value)
	proto.RegisterType((*SXGRequest)(nil), "gateway.SXGRequest")
	proto.RegisterMapType((map[string]string)(nil), "gateway.SXGRequest.PackagerServerRequestHeadersEntry")
	proto.RegisterType((*SXGResponse)(nil), "gateway.SXGResponse")
	proto.RegisterMapType((map[string]string)(nil), "gateway.SXGResponse.HttpHeadersEntry")
	proto.RegisterType((*TransformHTMLRequest)(nil), "gateway.TransformHTMLRequest")
	proto.RegisterType((*TransformedHTML)(nil), "gateway.TransformedHTML")
}

func init() { proto.RegisterFile("gateway.proto", fileDescriptor_f1a937782ebbded5) }

var fileDescriptor_f1a937782ebbded5 = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x8e, 0xd2, 0x50,
	0x14, 0x9d, 0x02, 0xe3, 0xc0, 0x2d, 0x30, 0xf5, 0xc9, 0x02, 0x51, 0x33, 0x58, 0x63, 0x82, 0x31,
	0x61, 0xc1, 0xc4, 0xc4, 0xcc, 0xc2, 0x04, 0x07, 0x04, 0x14, 0xc1, 0x14, 0xc6, 0xcc, 0xae, 0x29,
	0xe5, 0x52, 0x9a, 0x29, 0x6d, 0x7d, 0x7d, 0xa0, 0x4d, 0x5c, 0xf8, 0x19, 0x7e, 0x89, 0xff, 0xe0,
	0x07, 0xf8, 0x2f, 0x2e, 0xcd, 0x7b, 0xaf, 0x80, 0x8c, 0x64, 0x26, 0xee, 0xee, 0x3d, 0xf7, 0x9e,
	0x9b, 0xd3, 0xf3, 0x0e, 0x40, 0xc1, 0xb1, 0x18, 0x7e, 0xb6, 0xe2, 0x7a, 0x48, 0x03, 0x16, 0x90,
	0xa3, 0xa4, 0xd5, 0x7f, 0xa5, 0x00, 0x46, 0x97, 0x1d, 0x03, 0x3f, 0x2d, 0x31, 0x62, 0xe4, 0x01,
	0xe4, 0x66, 0xc8, 0xec, 0xb9, 0xb9, 0xa4, 0x5e, 0x59, 0xa9, 0x2a, 0xb5, 0x9c, 0x91, 0x15, 0xc0,
	0x05, 0xf5, 0xc8, 0x7d, 0xc8, 0x46, 0xae, 0xe3, 0x8b, 0x59, 0x4a, 0xcc, 0x8e, 0x78, 0xcf, 0x47,
	0x27, 0xa0, 0x86, 0xd4, 0x5d, 0x59, 0x0c, 0xcd, 0x2b, 0x8c, 0xcb, 0xe9, 0xaa, 0x52, 0xcb, 0x1b,
	0x90, 0x40, 0xef, 0x30, 0x16, 0x0b, 0xcb, 0x89, 0xe7, 0xda, 0xa6, 0x8d, 0x94, 0x95, 0x33, 0xc9,
	0x82, 0x80, 0xce, 0x91, 0x32, 0xf2, 0x15, 0x4e, 0x42, 0xcb, 0xbe, 0xb2, 0x1c, 0xa4, 0x66, 0x84,
	0x74, 0x85, 0xd4, 0xa4, 0x52, 0x94, 0x39, 0x47, 0x6b, 0x8a, 0x34, 0x2a, 0x1f, 0x56, 0xd3, 0x35,
	0xb5, 0xf1, 0xa2, 0xbe, 0xfe, 0x94, 0xad, 0xee, 0xfa, 0x87, 0x84, 0x3a, 0x12, 0xcc, 0x04, 0xed,
	0x4a, 0x5e, 0xdb, 0x67, 0x34, 0x36, 0x1e, 0x86, 0x37, 0xac, 0x54, 0x86, 0xf0, 0xf8, 0xd6, 0x13,
	0x44, 0x83, 0x34, 0xff, 0x38, 0x69, 0x0b, 0x2f, 0x49, 0x09, 0x0e, 0x57, 0x96, 0xb7, 0xc4, 0xc4,
	0x0e, 0xd9, 0x9c, 0xa5, 0x5e, 0x2a, 0xfa, 0xb7, 0x14, 0xa8, 0x42, 0x5f, 0x14, 0x06, 0x7e, 0x84,
	0x9c, 0x1b, 0x7d, 0x71, 0x04, 0x37, 0x6f, 0xf0, 0x92, 0x73, 0x91, 0xd2, 0x80, 0x0a, 0x6e, 0xd6,
	0x90, 0x0d, 0x79, 0x0e, 0x77, 0x45, 0x61, 0x4e, 0x31, 0xb2, 0xa9, 0x1b, 0x32, 0x37, 0xf0, 0x85,
	0x9d, 0x39, 0x43, 0x13, 0x83, 0xd6, 0x16, 0x27, 0x04, 0x32, 0xf6, 0x24, 0xa0, 0x89, 0x9b, 0xa2,
	0x26, 0x5d, 0xc8, 0xcf, 0x19, 0x0b, 0xaf, 0x99, 0xf6, 0x74, 0xd7, 0x34, 0x29, 0xaa, 0xde, 0x65,
	0x2c, 0xdc, 0x31, 0x49, 0x9d, 0x6f, 0x91, 0xca, 0x2b, 0xd0, 0xae, 0x2f, 0xfc, 0x97, 0x05, 0x3f,
	0x15, 0x28, 0x8d, 0xa9, 0xe5, 0x47, 0xb3, 0x80, 0x2e, 0xba, 0xe3, 0xf7, 0xfd, 0x75, 0xc8, 0x7a,
	0xa0, 0xda, 0x81, 0x3f, 0x73, 0x1d, 0x93, 0xc5, 0x21, 0x8a, 0x63, 0xc5, 0x46, 0x6d, 0xa3, 0x70,
	0x1f, 0xa7, 0x7e, 0x2e, 0x08, 0xe3, 0x38, 0x44, 0x03, 0xec, 0x4d, 0xcd, 0x63, 0x35, 0x67, 0x0b,
	0xcf, 0x8c, 0x82, 0x25, 0xb5, 0xd7, 0x1a, 0x80, 0x43, 0x23, 0x81, 0x70, 0xc1, 0x3c, 0xae, 0xd2,
	0x41, 0x5e, 0xea, 0xa7, 0x00, 0xdb, 0x63, 0x24, 0x0b, 0x99, 0xc1, 0x70, 0xd0, 0xd6, 0x0e, 0x88,
	0x0a, 0x47, 0xad, 0xf6, 0x9b, 0xe6, 0x45, 0x7f, 0xac, 0x29, 0xa4, 0x08, 0xf0, 0xb1, 0xd9, 0xef,
	0xb5, 0x9a, 0xe3, 0xde, 0x70, 0xa0, 0xa5, 0xf4, 0x1f, 0x0a, 0x1c, 0x6f, 0x74, 0xe1, 0x94, 0x2b,
	0x5b, 0x9f, 0x56, 0x36, 0xa7, 0xc9, 0x13, 0x28, 0x04, 0xd4, 0x75, 0x5c, 0xdf, 0xf2, 0x4c, 0xae,
	0x21, 0xd1, 0x93, 0x5f, 0x83, 0x5d, 0xb6, 0xf0, 0xc8, 0x33, 0xd0, 0xd8, 0xf6, 0x92, 0xdc, 0x93,
	0xf2, 0x8e, 0xff, 0xc2, 0xc5, 0xea, 0x26, 0x22, 0x99, 0x5b, 0x23, 0x72, 0xb8, 0x3f, 0x22, 0x8d,
	0xef, 0x0a, 0x14, 0x3b, 0xd2, 0x58, 0x1e, 0x6c, 0xd7, 0x46, 0x72, 0x06, 0x6a, 0x07, 0x7d, 0xa4,
	0x16, 0xc3, 0xd1, 0x65, 0x87, 0xdc, 0xdb, 0xf3, 0x7b, 0xaa, 0x94, 0xf6, 0xe5, 0x45, 0x3f, 0x20,
	0x6f, 0xa1, 0xb0, 0xf3, 0x3c, 0xe4, 0xd1, 0x8d, 0xcf, 0x56, 0x29, 0xff, 0x3b, 0x96, 0xee, 0xe9,
	0x07, 0xaf, 0xd3, 0xbf, 0x15, 0x65, 0x72, 0x47, 0xfc, 0x1f, 0x9d, 0xfe, 0x09, 0x00, 0x00, 0xff,
	0xff, 0xe0, 0xd4, 0x20, 0x75, 0xa0, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayServiceClient interface {
	// Calls Signer.go->FetchUrl method.
	GenerateSXG(ctx context.Context, in *SXGRequest, opts ...grpc.CallOption) (*SXGResponse, error)
	// Calls Transformer.go->Process method.
	TransformHTML(ctx context.Context, in *TransformHTMLRequest, opts ...grpc.CallOption) (*TransformedHTML, error)
}

type gatewayServiceClient struct {
	cc *grpc.ClientConn
}

func NewGatewayServiceClient(cc *grpc.ClientConn) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) GenerateSXG(ctx context.Context, in *SXGRequest, opts ...grpc.CallOption) (*SXGResponse, error) {
	out := new(SXGResponse)
	err := c.cc.Invoke(ctx, "/gateway.GatewayService/GenerateSXG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) TransformHTML(ctx context.Context, in *TransformHTMLRequest, opts ...grpc.CallOption) (*TransformedHTML, error) {
	out := new(TransformedHTML)
	err := c.cc.Invoke(ctx, "/gateway.GatewayService/TransformHTML", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
type GatewayServiceServer interface {
	// Calls Signer.go->FetchUrl method.
	GenerateSXG(context.Context, *SXGRequest) (*SXGResponse, error)
	// Calls Transformer.go->Process method.
	TransformHTML(context.Context, *TransformHTMLRequest) (*TransformedHTML, error)
}

func RegisterGatewayServiceServer(s *grpc.Server, srv GatewayServiceServer) {
	s.RegisterService(&_GatewayService_serviceDesc, srv)
}

func _GatewayService_GenerateSXG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SXGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GenerateSXG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.GatewayService/GenerateSXG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GenerateSXG(ctx, req.(*SXGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_TransformHTML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransformHTMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).TransformHTML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.GatewayService/TransformHTML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).TransformHTML(ctx, req.(*TransformHTMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateSXG",
			Handler:    _GatewayService_GenerateSXG_Handler,
		},
		{
			MethodName: "TransformHTML",
			Handler:    _GatewayService_TransformHTML_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
